{
    "project": {
        "name": "node-gdal-async",
        "description": "Node.js bindings for GDAL (Geospatial Data Abstraction Library) [Fork]",
        "url": "https://github.com/mmomtchev/node-gdal-async",
        "logo": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/df/GDALLogoColor.svg/200px-GDALLogoColor.svg.png",
        "version": "3.4.2"
    },
    "files": {
        "lib/calc.js": {
            "name": "lib/calc.js",
            "modules": {},
            "classes": {},
            "fors": {
                "gdal": 1
            },
            "namespaces": {}
        },
        "lib/default_iterators.js": {
            "name": "lib/default_iterators.js",
            "modules": {},
            "classes": {},
            "fors": {
                "gdal.DatasetLayers": 1,
                "gdal.DatasetBands": 1,
                "gdal.RasterBandOverviews": 1,
                "gdal.GDALDrivers": 1,
                "gdal.LayerFeatures": 1,
                "gdal.FeatureFields": 1,
                "gdal.LayerFields": 1,
                "gdal.FeatureDefnFields": 1,
                "gdal.LineStringPoints": 1,
                "gdal.PolygonRings": 1,
                "gdal.CompoundCurveCurves": 1,
                "gdal.GeometryCollectionChildren": 1,
                "gdal.ColorTable": 1,
                "gdal.GroupArrays": 1,
                "gdal.GroupGroups": 1,
                "gdal.GroupDimensions": 1,
                "gdal.GroupAttributes": 1,
                "gdal.ArrayDimensions": 1,
                "gdal.ArrayAttributes": 1
            },
            "namespaces": {}
        },
        "lib/envelope.js": {
            "name": "lib/envelope.js",
            "modules": {},
            "classes": {
                "gdal.Envelope": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/envelope_3d.js": {
            "name": "lib/envelope_3d.js",
            "modules": {},
            "classes": {
                "gdal.Envelope3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/gdal.js": {
            "name": "lib/gdal.js",
            "modules": {},
            "classes": {
                "gdal.config": 1
            },
            "fors": {
                "gdal": 1,
                "gdal.DatasetBands": 1,
                "gdal.LayerFields": 1,
                "gdal.Geometry": 1
            },
            "namespaces": {}
        },
        "lib/iterators.js": {
            "name": "lib/iterators.js",
            "modules": {},
            "classes": {},
            "fors": {
                "gdal.DatasetBands": 1,
                "gdal.LayerFeatures": 1,
                "gdal.FeatureFields": 1,
                "gdal.Geometry": 1
            },
            "namespaces": {}
        },
        "lib/multiplexer.js": {
            "name": "lib/multiplexer.js",
            "modules": {},
            "classes": {
                "gdal.RasterMuxStream": 1,
                "gdal.RasterTransform": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/readable.js": {
            "name": "lib/readable.js",
            "modules": {},
            "classes": {
                "gdal.RasterReadStream": 1
            },
            "fors": {
                "gdal.RasterBandPixels": 1
            },
            "namespaces": {}
        },
        "lib/writable.js": {
            "name": "lib/writable.js",
            "modules": {},
            "classes": {
                "gdal.RasterWriteStream": 1
            },
            "fors": {
                "gdal.RasterBandPixels": 1
            },
            "namespaces": {}
        },
        "src/collections/array_attributes.cpp": {
            "name": "src/collections/array_attributes.cpp",
            "modules": {},
            "classes": {
                "gdal.ArrayAttributes": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/collections/array_dimensions.cpp": {
            "name": "src/collections/array_dimensions.cpp",
            "modules": {},
            "classes": {
                "gdal.ArrayDimensions": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/collections/colortable.cpp": {
            "name": "src/collections/colortable.cpp",
            "modules": {},
            "classes": {
                "gdal.ColorTable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/collections/compound_curves.cpp": {
            "name": "src/collections/compound_curves.cpp",
            "modules": {},
            "classes": {
                "gdal.CompoundCurveCurves": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/collections/dataset_bands.cpp": {
            "name": "src/collections/dataset_bands.cpp",
            "modules": {},
            "classes": {
                "gdal.DatasetBands": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/collections/dataset_layers.cpp": {
            "name": "src/collections/dataset_layers.cpp",
            "modules": {},
            "classes": {
                "gdal.DatasetLayers": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/collections/feature_defn_fields.cpp": {
            "name": "src/collections/feature_defn_fields.cpp",
            "modules": {},
            "classes": {
                "gdal.FeatureDefnFields": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/collections/feature_fields.cpp": {
            "name": "src/collections/feature_fields.cpp",
            "modules": {},
            "classes": {
                "gdal.FeatureFields": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/collections/gdal_drivers.cpp": {
            "name": "src/collections/gdal_drivers.cpp",
            "modules": {},
            "classes": {
                "gdal.GDALDrivers": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/collections/geometry_collection_children.cpp": {
            "name": "src/collections/geometry_collection_children.cpp",
            "modules": {},
            "classes": {
                "gdal.GeometryCollectionChildren": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/collections/group_arrays.cpp": {
            "name": "src/collections/group_arrays.cpp",
            "modules": {},
            "classes": {
                "gdal.GroupArrays": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/collections/group_attributes.cpp": {
            "name": "src/collections/group_attributes.cpp",
            "modules": {},
            "classes": {
                "gdal.GroupAttributes": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/collections/group_dimensions.cpp": {
            "name": "src/collections/group_dimensions.cpp",
            "modules": {},
            "classes": {
                "gdal.GroupDimensions": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/collections/group_groups.cpp": {
            "name": "src/collections/group_groups.cpp",
            "modules": {},
            "classes": {
                "gdal.GroupGroups": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/collections/layer_features.cpp": {
            "name": "src/collections/layer_features.cpp",
            "modules": {},
            "classes": {
                "gdal.LayerFeatures": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/collections/layer_fields.cpp": {
            "name": "src/collections/layer_fields.cpp",
            "modules": {},
            "classes": {
                "gdal.LayerFields": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/collections/linestring_points.cpp": {
            "name": "src/collections/linestring_points.cpp",
            "modules": {},
            "classes": {
                "gdal.LineStringPoints": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/collections/polygon_rings.cpp": {
            "name": "src/collections/polygon_rings.cpp",
            "modules": {},
            "classes": {
                "gdal.PolygonRings": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/collections/rasterband_overviews.cpp": {
            "name": "src/collections/rasterband_overviews.cpp",
            "modules": {},
            "classes": {
                "gdal.RasterBandOverviews": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/collections/rasterband_pixels.cpp": {
            "name": "src/collections/rasterband_pixels.cpp",
            "modules": {},
            "classes": {
                "gdal.RasterBandPixels": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/geometry/gdal_circularstring.cpp": {
            "name": "src/geometry/gdal_circularstring.cpp",
            "modules": {},
            "classes": {
                "gdal.CircularString": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/geometry/gdal_compoundcurve.cpp": {
            "name": "src/geometry/gdal_compoundcurve.cpp",
            "modules": {},
            "classes": {
                "gdal.CompoundCurve": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/geometry/gdal_geometry.cpp": {
            "name": "src/geometry/gdal_geometry.cpp",
            "modules": {},
            "classes": {
                "gdal.Geometry": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/geometry/gdal_geometrycollection.cpp": {
            "name": "src/geometry/gdal_geometrycollection.cpp",
            "modules": {},
            "classes": {
                "gdal.GeometryCollection": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/geometry/gdal_linearring.cpp": {
            "name": "src/geometry/gdal_linearring.cpp",
            "modules": {},
            "classes": {
                "gdal.LinearRing": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/geometry/gdal_linestring.cpp": {
            "name": "src/geometry/gdal_linestring.cpp",
            "modules": {},
            "classes": {
                "gdal.LineString": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/geometry/gdal_multicurve.cpp": {
            "name": "src/geometry/gdal_multicurve.cpp",
            "modules": {},
            "classes": {
                "gdal.MultiCurve": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/geometry/gdal_multilinestring.cpp": {
            "name": "src/geometry/gdal_multilinestring.cpp",
            "modules": {},
            "classes": {
                "gdal.MultiLineString": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/geometry/gdal_multipoint.cpp": {
            "name": "src/geometry/gdal_multipoint.cpp",
            "modules": {},
            "classes": {
                "gdal.MultiPoint": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/geometry/gdal_multipolygon.cpp": {
            "name": "src/geometry/gdal_multipolygon.cpp",
            "modules": {},
            "classes": {
                "gdal.MultiPolygon": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/geometry/gdal_point.cpp": {
            "name": "src/geometry/gdal_point.cpp",
            "modules": {},
            "classes": {
                "gdal.Point": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/geometry/gdal_polygon.cpp": {
            "name": "src/geometry/gdal_polygon.cpp",
            "modules": {},
            "classes": {
                "gdal.Polygon": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/geometry/gdal_simplecurve.cpp": {
            "name": "src/geometry/gdal_simplecurve.cpp",
            "modules": {},
            "classes": {
                "gdal.SimpleCurve": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/gdal_algorithms.cpp": {
            "name": "src/gdal_algorithms.cpp",
            "modules": {},
            "classes": {},
            "fors": {
                "gdal": 1
            },
            "namespaces": {}
        },
        "src/gdal_attribute.cpp": {
            "name": "src/gdal_attribute.cpp",
            "modules": {},
            "classes": {
                "gdal.Attribute": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/gdal_coordinate_transformation.cpp": {
            "name": "src/gdal_coordinate_transformation.cpp",
            "modules": {},
            "classes": {
                "gdal.CoordinateTransformation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/gdal_dataset.cpp": {
            "name": "src/gdal_dataset.cpp",
            "modules": {},
            "classes": {
                "gdal.Dataset": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/gdal_dimension.cpp": {
            "name": "src/gdal_dimension.cpp",
            "modules": {},
            "classes": {
                "gdal.Dimension": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/gdal_driver.cpp": {
            "name": "src/gdal_driver.cpp",
            "modules": {},
            "classes": {
                "gdal.Driver": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/gdal_feature.cpp": {
            "name": "src/gdal_feature.cpp",
            "modules": {},
            "classes": {
                "gdal.Feature": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/gdal_feature_defn.cpp": {
            "name": "src/gdal_feature_defn.cpp",
            "modules": {},
            "classes": {
                "gdal.FeatureDefn": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/gdal_field_defn.cpp": {
            "name": "src/gdal_field_defn.cpp",
            "modules": {},
            "classes": {
                "gdal.FieldDefn": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/gdal_fs.cpp": {
            "name": "src/gdal_fs.cpp",
            "modules": {},
            "classes": {
                "gdal.fs": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/gdal_group.cpp": {
            "name": "src/gdal_group.cpp",
            "modules": {},
            "classes": {
                "gdal.Group": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/gdal_layer.cpp": {
            "name": "src/gdal_layer.cpp",
            "modules": {},
            "classes": {
                "gdal.Layer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/gdal_mdarray.cpp": {
            "name": "src/gdal_mdarray.cpp",
            "modules": {},
            "classes": {
                "gdal.MDArray": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/gdal_memfile.cpp": {
            "name": "src/gdal_memfile.cpp",
            "modules": {},
            "classes": {
                "gdal.vsimem": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/gdal_rasterband.cpp": {
            "name": "src/gdal_rasterband.cpp",
            "modules": {},
            "classes": {
                "gdal.RasterBand": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/gdal_spatial_reference.cpp": {
            "name": "src/gdal_spatial_reference.cpp",
            "modules": {},
            "classes": {
                "gdal.SpatialReference": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/gdal_utils.cpp": {
            "name": "src/gdal_utils.cpp",
            "modules": {},
            "classes": {},
            "fors": {
                "gdal": 1
            },
            "namespaces": {}
        },
        "src/gdal_warper.cpp": {
            "name": "src/gdal_warper.cpp",
            "modules": {},
            "classes": {},
            "fors": {
                "gdal": 1
            },
            "namespaces": {}
        },
        "src/node_gdal.cpp": {
            "name": "src/node_gdal.cpp",
            "modules": {},
            "classes": {
                "gdal": 1,
                "Constants (DMD)": 1,
                "Constants (CPL Error Levels)": 1,
                "Constants (CPL Error Codes)": 1,
                "Constants (DCAP)": 1,
                "Constants (OLC)": 1,
                "Constants (ODsC)": 1,
                "Constants (GDT)": 1,
                "Constants (OJ)": 1,
                "Constants (GCI)": 1,
                "Constants (GPI)": 1,
                "Constants (wkbVariant)": 1,
                "Constants (wkbByteOrder)": 1,
                "Constants (wkbGeometryType)": 1,
                "Constants (OFT)": 1,
                "Constants (GRA)": 1,
                "Constants (DIM)": 1,
                "Constants (DIR)": 1
            },
            "fors": {
                "gdal": 1
            },
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "gdal": {
            "name": "gdal",
            "shortname": "gdal",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/node_gdal.cpp",
            "line": 465,
            "description": "This [node-gdal-async](https://github.com/mmomtchev/node-gdal-async) binding for\nNode.js provides a feature-complete way of reading, writing, and manipulating\ngeospatial data, raster and vector, synchronously and asynchronously using [GDAL](http://www.gdal.org/).\n```\n// sample: open a shapefile and display all features as geojson\nconst dataset = gdal.open(\"states.shp\");\n\ndataset.layers.get(0).features.forEach(function(feature) {\n    console.log(feature.getGeometry().toJSON());\n});\n```\n\n```\n// same thing, but asynchronously, allowing integration in server-side multi-user code\nconst dataset = await gdal.openAsync(\"states.shp\");\nconst features = (await dataset.layers.getAsync(0)).features;\nconst len = await features.countAsync();\n\nfor (let i = t; i < len; i++) {\n  features.getAsync(i, (error, feature) => {\n    console.log(feature.getGeometry().toJSON());\n  });\n}\n```\n\nsee ASYNCIO.md for some performance considerations when designing code\nthat will run multiple parallel operations on the same dataset\n\n<iframe\nsrc=\"http://ghbtns.com/github-btn.html?user=mmomtchev&repo=node-gdal-async&type=watch&count=true\"\nallowtransparency=\"true\" frameborder=\"0\" scrolling=\"0\" width=\"90\" height=\"20\"\nstyle=\"margin-top:20px\"></iframe> <iframe\nsrc=\"http://ghbtns.com/github-btn.html?user=mmomtchev&repo=node-gdal-async&type=fork&count=true\"\nallowtransparency=\"true\" frameborder=\"0\" scrolling=\"0\" width=\"200\"\nheight=\"20\"></iframe>"
        },
        "gdal.DatasetLayers": {
            "name": "gdal.DatasetLayers",
            "shortname": "gdal.DatasetLayers",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collections/dataset_layers.cpp",
            "line": 40,
            "description": "An encapsulation of a {{#crossLink \"gdal.Dataset\"}}Dataset{{/crossLink}}'s\nvector layers.\n\n```\nvar layers = dataset.layers;```"
        },
        "gdal.DatasetBands": {
            "name": "gdal.DatasetBands",
            "shortname": "gdal.DatasetBands",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collections/dataset_bands.cpp",
            "line": 37,
            "description": "An encapsulation of a {{#crossLink \"gdal.Dataset\"}}Dataset{{/crossLink}}'s\nraster bands.\n\n```\nvar bands = dataset.bands;```"
        },
        "gdal.RasterBandOverviews": {
            "name": "gdal.RasterBandOverviews",
            "shortname": "gdal.RasterBandOverviews",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collections/rasterband_overviews.cpp",
            "line": 32,
            "description": "An encapsulation of a {{#crossLink\n\"gdal.RasterBand\"}}RasterBand{{/crossLink}} overview functionality."
        },
        "gdal.GDALDrivers": {
            "name": "gdal.GDALDrivers",
            "shortname": "gdal.GDALDrivers",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collections/gdal_drivers.cpp",
            "line": 34,
            "description": "An collection of all {{#crossLink \"gdal.Driver\"}}drivers{{/crossLink}}\nregistered with GDAL."
        },
        "gdal.LayerFeatures": {
            "name": "gdal.LayerFeatures",
            "shortname": "gdal.LayerFeatures",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collections/layer_features.cpp",
            "line": 39,
            "description": "An encapsulation of a {{#crossLink \"gdal.Layer\"}}Layer{{/crossLink}}'s\nfeatures."
        },
        "gdal.FeatureFields": {
            "name": "gdal.FeatureFields",
            "shortname": "gdal.FeatureFields",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collections/feature_fields.cpp",
            "line": 39,
            "description": "An encapsulation of all field data that makes up a {{#crossLink\n\"gdal.Feature\"}}Feature{{/crossLink}}."
        },
        "gdal.LayerFields": {
            "name": "gdal.LayerFields",
            "shortname": "gdal.LayerFields",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collections/layer_fields.cpp",
            "line": 40
        },
        "gdal.FeatureDefnFields": {
            "name": "gdal.FeatureDefnFields",
            "shortname": "gdal.FeatureDefnFields",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collections/feature_defn_fields.cpp",
            "line": 40,
            "description": "An encapsulation of a {{#crossLink\n\"gdal.FeatureDefn\"}}FeatureDefn{{/crossLink}}'s fields."
        },
        "gdal.LineStringPoints": {
            "name": "gdal.LineStringPoints",
            "shortname": "gdal.LineStringPoints",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collections/linestring_points.cpp",
            "line": 37,
            "description": "An encapsulation of a {{#crossLink\n\"gdal.LineString\"}}LineString{{/crossLink}}'s points."
        },
        "gdal.PolygonRings": {
            "name": "gdal.PolygonRings",
            "shortname": "gdal.PolygonRings",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collections/polygon_rings.cpp",
            "line": 34,
            "description": "A collection of polygon rings, used by {{#crossLink\n\"gdal.Polygon\"}}gdal.Polygon{{/crossLink}}."
        },
        "gdal.CompoundCurveCurves": {
            "name": "gdal.CompoundCurveCurves",
            "shortname": "gdal.CompoundCurveCurves",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collections/compound_curves.cpp",
            "line": 35,
            "description": "A collection of connected curves, used by {{#crossLink\n\"gdal.CompoundCurve\"}}gdal.CompoundCurve{{/crossLink}}."
        },
        "gdal.GeometryCollectionChildren": {
            "name": "gdal.GeometryCollectionChildren",
            "shortname": "gdal.GeometryCollectionChildren",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collections/geometry_collection_children.cpp",
            "line": 34,
            "description": "A collection of Geometries, used by {{#crossLink\n\"gdal.GeometryCollection\"}}gdal.GeometryCollection{{/crossLink}}."
        },
        "gdal.ColorTable": {
            "name": "gdal.ColorTable",
            "shortname": "gdal.ColorTable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collections/colortable.cpp",
            "line": 50,
            "description": "An encapsulation of a {{#crossLink \"gdal.RasterBand\"}}RasterBand{{/crossLink}}'s\ncolor table.\n\n```\nvar colorTable = band.colorTable;\n\nband.colorTable = new gdal.ColorTable(gdal.GPI_RGB);\n```",
            "params": [
                {
                    "name": "interpretation",
                    "description": "palette interpretation",
                    "type": "String"
                }
            ]
        },
        "gdal.GroupArrays": {
            "name": "gdal.GroupArrays",
            "shortname": "gdal.GroupArrays",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collections/group_arrays.cpp",
            "line": 34,
            "description": "An encapsulation of a {{#crossLink \"gdal.Group\"}}Group{{/crossLink}}'s\ndescendant arrays."
        },
        "gdal.GroupGroups": {
            "name": "gdal.GroupGroups",
            "shortname": "gdal.GroupGroups",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collections/group_groups.cpp",
            "line": 33,
            "description": "An encapsulation of a {{#crossLink \"gdal.Group\"}}Group{{/crossLink}}'s\ndescendant groups."
        },
        "gdal.GroupDimensions": {
            "name": "gdal.GroupDimensions",
            "shortname": "gdal.GroupDimensions",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collections/group_dimensions.cpp",
            "line": 40,
            "description": "An encapsulation of a {{#crossLink \"gdal.Group\"}}Group{{/crossLink}}'s\ndescendant dimensions.\n\n```\nconst dimensions = group.dimensions;```"
        },
        "gdal.GroupAttributes": {
            "name": "gdal.GroupAttributes",
            "shortname": "gdal.GroupAttributes",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collections/group_attributes.cpp",
            "line": 37,
            "description": "An encapsulation of a {{#crossLink \"gdal.Group\"}}Group{{/crossLink}}'s\ndescendant attributes."
        },
        "gdal.ArrayDimensions": {
            "name": "gdal.ArrayDimensions",
            "shortname": "gdal.ArrayDimensions",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collections/array_dimensions.cpp",
            "line": 48,
            "description": "An encapsulation of a {{#crossLink \"gdal.Group\"}}Group{{/crossLink}}'s\ndescendant dimensions.\n\n```\nconst dimensions = group.dimensions;```"
        },
        "gdal.ArrayAttributes": {
            "name": "gdal.ArrayAttributes",
            "shortname": "gdal.ArrayAttributes",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collections/array_attributes.cpp",
            "line": 37,
            "description": "An encapsulation of a {{#crossLink \"gdal.Group\"}}Array{{/crossLink}}'s\ndescendant attributes."
        },
        "gdal.Envelope": {
            "name": "gdal.Envelope",
            "shortname": "gdal.Envelope",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/envelope.js",
            "line": 2,
            "description": "A 2D bounding box. For 3D envelopes, see {{#crossLink \"gdal.Envelope3D\"}}gdal.Envelope3D{{/crossLink}}.\n\n(Pure-javascript implementation of [OGREnvelope](https://gdal.org/doxygen/classOGREnvelope.html))",
            "is_constructor": 1,
            "params": [
                {
                    "name": "bounds",
                    "description": "An object containing `minX`, `maxX`, `minY`, and `maxY` values.",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "gdal.Envelope3D": {
            "name": "gdal.Envelope3D",
            "shortname": "gdal.Envelope3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/envelope_3d.js",
            "line": 2,
            "description": "A 3D bounding box. For 2D envelopes, see {{#crossLink \"gdal.Envelope\"}}gdal.Envelope{{/crossLink}}.\n\n(Pure-javascript implementation of [OGREnvelope3D](http://www.gdal.org/classOGREnvelope3D.html))",
            "is_constructor": 1,
            "params": [
                {
                    "name": "bounds",
                    "description": "An object containing `minX`, `maxX`, `minY`, `maxY`, `minZ`, and `maxZ` values.",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "gdal.config": {
            "name": "gdal.config",
            "shortname": "gdal.config",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/gdal.js",
            "line": 39
        },
        "gdal.Geometry": {
            "name": "gdal.Geometry",
            "shortname": "gdal.Geometry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 98,
            "description": "Abstract base class for all geometry classes."
        },
        "gdal.RasterMuxStream": {
            "name": "gdal.RasterMuxStream",
            "shortname": "gdal.RasterMuxStream",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/multiplexer.js",
            "line": 8,
            "description": "Multiplexer stream\n\nReads multiple input {{#crossLink \"gdal.RasterReadStream\"}}RasterReadStream{{/crossLink}} streams and outputs a single\nsynchronized stream with multiple data elements\n\nAll the input streams must have the same length\n\nCan be used with {{#crossLink \"gdal.RasterTransform\"}}RasterTransform{{/crossLink}}\nwhich will automatically apply a function over the whole chunk",
            "example": [
                "\n```\n const dsT2m = gdal.open('AROME_T2m_10.tiff'));\n const dsD2m = gdal.open('AROME_D2m_10.tiff'));\n\n const dsCloudBase = gdal.open('CLOUDBASE.tiff', 'w', 'GTiff',\n   dsT2m.rasterSize.x, dsT2m.rasterSize.y, 1, gdal.GDT_Float64);\n\n const mux = new gdal.RasterMuxStream({\n   T2m: dsT2m.bands.get(1).pixels.createReadStream(),\n   D2m: dsD2m.bands.get(1).pixels.createReadStream()\n });\n const ws = dsCloudBase.bands.get(1).pixels.createWriteStream();\n\n // Espy's estimation for cloud base height (lifted condensation level)\n // LCL = 125 * (T2m - Td2m)\n // where T2m is the temperature at 2m and Td2m is the dew point at 2m\n const espyEstimation = new Transform({\n   objectMode: true,\n   transform(chunk, _, cb) {\n     const lcl = new Float64Array(chunk.T2m.length)\n     for (let i = 0; i < chunk.T2m.length; i++) {\n       lcl[i] = 125 * (chunk.T2m[i] - chunk.D2m[i])\n     }\n     cb(null, lcl)\n   }\n })\n\n mux.pipe(espyEstimation).pipe(ws);\n```"
            ],
            "extends": "stream.Readable",
            "is_constructor": 1,
            "params": [
                {
                    "name": "inputs",
                    "description": "Input streams",
                    "type": "Record<string,RasterReadStream>"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "RasterReadableOptions",
                    "optional": true,
                    "props": [
                        {
                            "name": "blockOptimize",
                            "description": "Read by file blocks when possible (when rasterSize.x == blockSize.x)",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                }
            ]
        },
        "gdal.RasterTransform": {
            "name": "gdal.RasterTransform",
            "shortname": "gdal.RasterTransform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/multiplexer.js",
            "line": 204,
            "description": "A raster Transform stream\n\nApplies a function on all data elements\n\nInput must be a {{#crossLink \"gdal.RasterMuxStream\"}}RasterMuxStream{{/crossLink}}",
            "example": [
                " ```\n const dsT2m = gdal.open('AROME_T2m_10.tiff'));\n const dsD2m = gdal.open('AROME_D2m_10.tiff'));\n\n const dsCloudBase = gdal.open('CLOUDBASE.tiff', 'w', 'GTiff',\n   dsT2m.rasterSize.x, dsT2m.rasterSize.y, 1, gdal.GDT_Float64);\n\n const mux = new gdal.RasterMuxStream({\n   T2m: dsT2m.bands.get(1).pixels.createReadStream(),\n   D2m: dsD2m.bands.get(1).pixels.createReadStream()\n });\n const ws = dsCloudBase.bands.get(1).pixels.createWriteStream();\n\n // Espy's estimation for cloud base height (lifted condensation level)\n // LCL = 125 * (T2m - Td2m)\n // where T2m is the temperature at 2m and Td2m is the dew point at 2m\n const fn = (t,td) => 125 * (t - td);\n const espyEstimation = new RasterTransform({ type: Float64Array, fn });\n\n mux.pipe(espyEstimation).pipe(ws);\n ```"
            ],
            "extends": "stream.Transform",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "RasterTransformOptions",
                    "optional": true,
                    "props": [
                        {
                            "name": "fn",
                            "description": "Function to be applied on all data",
                            "type": "Function"
                        },
                        {
                            "name": "type",
                            "description": "Typed array constructor",
                            "type": "New (len: number) => TypedArray"
                        }
                    ]
                }
            ]
        },
        "gdal.RasterBandPixels": {
            "name": "gdal.RasterBandPixels",
            "shortname": "gdal.RasterBandPixels",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collections/rasterband_pixels.cpp",
            "line": 53,
            "description": "A representation of a {{#crossLink\n\"gdal.RasterBand\"}}RasterBand{{/crossLink}}'s pixels.\n\n\nNote: Typed arrays should be created with an external ArrayBuffer for\nversions of node >= 0.11\n```\nvar n = 16*16;\nvar data = new Float32Array(new ArrayBuffer(n*4));\n//read data into the existing array\nband.pixels.read(0,0,16,16,data);```"
        },
        "gdal.RasterReadStream": {
            "name": "gdal.RasterReadStream",
            "shortname": "gdal.RasterReadStream",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/readable.js",
            "line": 23,
            "description": "Class implementing {{#crossLink \"gdal.RasterBand\"}}RasterBand{{/crossLink}} reading as a stream of pixels\n\nReading is buffered and it is aligned on the underlying\ncompression blocks for maximum efficiency when possible\n\nPixels are streamed in row-major order",
            "extends": "stream.Readable",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "RasterReadableOptions",
                    "optional": true,
                    "props": [
                        {
                            "name": "band",
                            "description": "RasterBand to use",
                            "type": "RasterBand"
                        },
                        {
                            "name": "blockOptimize",
                            "description": "Read by file blocks when possible (when `rasterSize.x == blockSize.x`)",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "convertNoData",
                            "description": "Automatically convert `gdal.RasterBand.noDataValue` to `NaN`, requires float data types",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "type",
                            "description": "Data type to convert to, must be a `TypedArray` constructor, default is the raster band data type",
                            "type": "New (len: number) => TypedArray",
                            "optional": true,
                            "optdefault": "undefined"
                        }
                    ]
                }
            ]
        },
        "gdal.RasterWriteStream": {
            "name": "gdal.RasterWriteStream",
            "shortname": "gdal.RasterWriteStream",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/writable.js",
            "line": 22,
            "description": "Class implementing {{#crossLink \"gdal.RasterBand\"}}RasterBand{{/crossLink}}\nwriting as a stream of pixels\n\nWriting is buffered and it is aligned on the underlying\ncompression blocks for maximum efficiency when possible\n\nWhen piping between rasters using identical blocks,\nthe transfer is zero-copy\n\nThe input stream must be in row-major order\n\nIf the data type of the stream is different from the data type\nof the file, GDAL will automatically convert. Mixing data types\nacross chunks is not supported, all chunks must have the same type.\n\nWriting is zero-copy when writing chunks that are exact\nmultiples of the underlying stream block size as returned\nby `gdal.RasterBandPixels.blockSize`\n\nBlock are written only when full, so the stream must\nreceive exactly `width * height` pixels to write the last block",
            "extends": "stream.Writable",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "RasterWritableOptions",
                    "optional": true,
                    "props": [
                        {
                            "name": "band",
                            "description": "RasterBand to use",
                            "type": "RasterBand"
                        },
                        {
                            "name": "blockOptimize",
                            "description": "Write by file blocks when possible (when rasterSize.x == blockSize.x)",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "convertNoData",
                            "description": "Automatically convert `NaN` to `gdal.RasterBand.noDataValue` if it is set when the stream is constructed",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ]
        },
        "gdal.CircularString": {
            "name": "gdal.CircularString",
            "shortname": "gdal.CircularString",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/geometry/gdal_circularstring.cpp",
            "line": 31,
            "description": "Concrete representation of an arc.",
            "example": [
                "\n```\nvar CircularString = new gdal.CircularString();\nCircularString.points.add(new gdal.Point(0,0));\nCircularString.points.add(new gdal.Point(0,10));```"
            ],
            "is_constructor": 1,
            "extends": "gdal.SimpleCurve"
        },
        "gdal.CompoundCurve": {
            "name": "gdal.CompoundCurve",
            "shortname": "gdal.CompoundCurve",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/geometry/gdal_compoundcurve.cpp",
            "line": 35,
            "description": "Concrete representation of a compound contionuos curve.",
            "example": [
                "\n```\nvar CompoundCurve = new gdal.CompoundCurve();\nCompoundCurve.points.add(new gdal.Point(0,0));\nCompoundCurve.points.add(new gdal.Point(0,10));```"
            ],
            "is_constructor": 1,
            "extends": "gdal.Geometry"
        },
        "gdal.GeometryCollection": {
            "name": "gdal.GeometryCollection",
            "shortname": "gdal.GeometryCollection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/geometry/gdal_geometrycollection.cpp",
            "line": 13,
            "description": "A collection of 1 or more geometry objects.",
            "is_constructor": 1,
            "extends": "gdal.Geometry"
        },
        "gdal.LinearRing": {
            "name": "gdal.LinearRing",
            "shortname": "gdal.LinearRing",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/geometry/gdal_linearring.cpp",
            "line": 54,
            "description": "Concrete representation of a closed ring.",
            "is_constructor": 1,
            "extends": "gdal.LineString"
        },
        "gdal.LineString": {
            "name": "gdal.LineString",
            "shortname": "gdal.LineString",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/geometry/gdal_linestring.cpp",
            "line": 30,
            "description": "Concrete representation of a multi-vertex line.",
            "example": [
                "\n```\nvar lineString = new gdal.LineString();\nlineString.points.add(new gdal.Point(0,0));\nlineString.points.add(new gdal.Point(0,10));```"
            ],
            "is_constructor": 1,
            "extends": "gdal.SimpleCurve"
        },
        "gdal.MultiCurve": {
            "name": "gdal.MultiCurve",
            "shortname": "gdal.MultiCurve",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/geometry/gdal_multicurve.cpp",
            "line": 30,
            "is_constructor": 1,
            "extends": "gdal.GeometryCollection"
        },
        "gdal.MultiLineString": {
            "name": "gdal.MultiLineString",
            "shortname": "gdal.MultiLineString",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/geometry/gdal_multilinestring.cpp",
            "line": 31,
            "is_constructor": 1,
            "extends": "gdal.GeometryCollection"
        },
        "gdal.MultiPoint": {
            "name": "gdal.MultiPoint",
            "shortname": "gdal.MultiPoint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/geometry/gdal_multipoint.cpp",
            "line": 30,
            "is_constructor": 1,
            "extends": "gdal.GeometryCollection"
        },
        "gdal.MultiPolygon": {
            "name": "gdal.MultiPolygon",
            "shortname": "gdal.MultiPolygon",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/geometry/gdal_multipolygon.cpp",
            "line": 31,
            "is_constructor": 1,
            "extends": "gdal.GeometryCollection"
        },
        "gdal.Point": {
            "name": "gdal.Point",
            "shortname": "gdal.Point",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/geometry/gdal_point.cpp",
            "line": 31,
            "description": "Point class.",
            "is_constructor": 1,
            "extends": "gdal.Geometry",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ]
        },
        "gdal.Polygon": {
            "name": "gdal.Polygon",
            "shortname": "gdal.Polygon",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/geometry/gdal_polygon.cpp",
            "line": 35,
            "description": "Concrete class representing polygons.",
            "is_constructor": 1,
            "extends": "gdal.Geometry"
        },
        "gdal.SimpleCurve": {
            "name": "gdal.SimpleCurve",
            "shortname": "gdal.SimpleCurve",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/geometry/gdal_simplecurve.cpp",
            "line": 35,
            "description": "Abstract class representing all SimpleCurves.",
            "is_constructor": 1,
            "extends": "gdal.Geometry"
        },
        "gdal.Attribute": {
            "name": "gdal.Attribute",
            "shortname": "gdal.Attribute",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/gdal_attribute.cpp",
            "line": 60,
            "description": "A representation of a group with access methods."
        },
        "gdal.CoordinateTransformation": {
            "name": "gdal.CoordinateTransformation",
            "shortname": "gdal.CoordinateTransformation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/gdal_coordinate_transformation.cpp",
            "line": 43,
            "description": "Object for transforming between coordinate systems.",
            "throws": {
                "description": "Error"
            },
            "is_constructor": 1,
            "params": [
                {
                    "name": "source",
                    "description": "",
                    "type": "gdal.SpatialReference"
                },
                {
                    "name": "target",
                    "description": "If a raster Dataset, the\nconversion will represent a conversion to pixel coordinates.",
                    "type": "gdal.SpatialReference|gdal.Dataset"
                }
            ]
        },
        "gdal.Dataset": {
            "name": "gdal.Dataset",
            "shortname": "gdal.Dataset",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/gdal_dataset.cpp",
            "line": 74,
            "description": "A set of associated raster bands and/or vector layers, usually from one file.\n\n```\n// raster dataset:\ndataset = gdal.open('file.tif');\nbands = dataset.bands;\n\n// vector dataset:\ndataset = gdal.open('file.shp');\nlayers = dataset.layers;```"
        },
        "gdal.Dimension": {
            "name": "gdal.Dimension",
            "shortname": "gdal.Dimension",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/gdal_dimension.cpp",
            "line": 62,
            "description": "A representation of a group with access methods."
        },
        "gdal.Driver": {
            "name": "gdal.Driver",
            "shortname": "gdal.Driver",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/gdal_driver.cpp",
            "line": 55,
            "description": "Format specific driver.\n\nAn instance of this class is created for each supported format, and\nmanages information about the format.\n\nThis roughly corresponds to a file format, though some drivers may\nbe gateways to many formats through a secondary multi-library."
        },
        "gdal.Feature": {
            "name": "gdal.Feature",
            "shortname": "gdal.Feature",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/gdal_feature.cpp",
            "line": 66,
            "description": "A simple feature, including geometry and attributes. Its fields and geometry\ntype is defined by the given definition.\n\n```\n//create layer and specify geometry type\nvar layer = dataset.layers.create('mylayer', null, gdal.Point);\n\n//setup fields for the given layer\nlayer.fields.add(new gdal.FieldDefn('elevation', gdal.OFTInteger));\nlayer.fields.add(new gdal.FieldDefn('name', gdal.OFTString));\n\n//create feature using layer definition and then add it to the layer\nvar feature = new gdal.Feature(layer);\nfeature.fields.set('elevation', 13775);\nfeature.fields.set('name', 'Grand Teton');\nfeature.setGeometry(new gdal.Point(43.741208, -110.802414));\nlayer.features.add(feature);```",
            "is_constructor": 1,
            "params": [
                {
                    "name": "definition",
                    "description": "",
                    "type": "gdal.Layer|gdal.FeatureDefn"
                }
            ]
        },
        "gdal.FeatureDefn": {
            "name": "gdal.FeatureDefn",
            "shortname": "gdal.FeatureDefn",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/gdal_feature_defn.cpp",
            "line": 48,
            "description": "Definition of a feature class or feature layer.",
            "is_constructor": 1
        },
        "gdal.FieldDefn": {
            "name": "gdal.FieldDefn",
            "shortname": "gdal.FieldDefn",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/gdal_field_defn.cpp",
            "line": 46,
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Field name",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "Data type (see {{#crossLink \"Constants (OFT)\"}}OFT\nconstants{{/crossLink}})",
                    "type": "String"
                }
            ]
        },
        "gdal.fs": {
            "name": "gdal.fs",
            "shortname": "gdal.fs",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/gdal_fs.cpp",
            "line": 5,
            "description": "GDAL VSI layer file operations"
        },
        "gdal.Group": {
            "name": "gdal.Group",
            "shortname": "gdal.Group",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/gdal_group.cpp",
            "line": 63,
            "description": "A representation of a group with access methods."
        },
        "gdal.Layer": {
            "name": "gdal.Layer",
            "shortname": "gdal.Layer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/gdal_layer.cpp",
            "line": 73,
            "description": "A representation of a layer of simple vector features, with access methods."
        },
        "gdal.MDArray": {
            "name": "gdal.MDArray",
            "shortname": "gdal.MDArray",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/gdal_mdarray.cpp",
            "line": 68,
            "description": "A representation of an array with access methods."
        },
        "gdal.vsimem": {
            "name": "gdal.vsimem",
            "shortname": "gdal.vsimem",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/gdal_memfile.cpp",
            "line": 5,
            "description": "File operations specific to in-memory `/vsimem/` files"
        },
        "gdal.RasterBand": {
            "name": "gdal.RasterBand",
            "shortname": "gdal.RasterBand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/gdal_rasterband.cpp",
            "line": 91,
            "description": "A single raster band (or channel)."
        },
        "gdal.SpatialReference": {
            "name": "gdal.SpatialReference",
            "shortname": "gdal.SpatialReference",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/gdal_spatial_reference.cpp",
            "line": 91,
            "description": "This class respresents a OpenGIS Spatial Reference System, and contains\nmethods for converting between this object organization and well known text\n(WKT) format.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "wkt",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ]
        },
        "Constants (DMD)": {
            "name": "Constants (DMD)",
            "shortname": "Constants (DMD)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/node_gdal.cpp",
            "line": 469
        },
        "Constants (CPL Error Levels)": {
            "name": "Constants (CPL Error Levels)",
            "shortname": "Constants (CPL Error Levels)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/node_gdal.cpp",
            "line": 514
        },
        "Constants (CPL Error Codes)": {
            "name": "Constants (CPL Error Codes)",
            "shortname": "Constants (CPL Error Codes)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/node_gdal.cpp",
            "line": 559
        },
        "Constants (DCAP)": {
            "name": "Constants (DCAP)",
            "shortname": "Constants (DCAP)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/node_gdal.cpp",
            "line": 630
        },
        "Constants (OLC)": {
            "name": "Constants (OLC)",
            "shortname": "Constants (OLC)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/node_gdal.cpp",
            "line": 653
        },
        "Constants (ODsC)": {
            "name": "Constants (ODsC)",
            "shortname": "Constants (ODsC)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/node_gdal.cpp",
            "line": 759
        },
        "Constants (GDT)": {
            "name": "Constants (GDT)",
            "shortname": "Constants (GDT)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/node_gdal.cpp",
            "line": 803,
            "description": "Pixel data types."
        },
        "Constants (OJ)": {
            "name": "Constants (OJ)",
            "shortname": "Constants (OJ)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/node_gdal.cpp",
            "line": 916
        },
        "Constants (GCI)": {
            "name": "Constants (GCI)",
            "shortname": "Constants (GCI)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/node_gdal.cpp",
            "line": 939
        },
        "Constants (GPI)": {
            "name": "Constants (GPI)",
            "shortname": "Constants (GPI)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/node_gdal.cpp",
            "line": 1094,
            "description": "Palette types."
        },
        "Constants (wkbVariant)": {
            "name": "Constants (wkbVariant)",
            "shortname": "Constants (wkbVariant)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/node_gdal.cpp",
            "line": 1132
        },
        "Constants (wkbByteOrder)": {
            "name": "Constants (wkbByteOrder)",
            "shortname": "Constants (wkbByteOrder)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/node_gdal.cpp",
            "line": 1165
        },
        "Constants (wkbGeometryType)": {
            "name": "Constants (wkbGeometryType)",
            "shortname": "Constants (wkbGeometryType)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/node_gdal.cpp",
            "line": 1182
        },
        "Constants (OFT)": {
            "name": "Constants (OFT)",
            "shortname": "Constants (OFT)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/node_gdal.cpp",
            "line": 1334
        },
        "Constants (GRA)": {
            "name": "Constants (GRA)",
            "shortname": "Constants (GRA)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/node_gdal.cpp",
            "line": 1434,
            "description": "Resampling options that can be used with the gdal.reprojectImage() and gdal.RasterBandPixels.read methods."
        },
        "Constants (DIM)": {
            "name": "Constants (DIM)",
            "shortname": "Constants (DIM)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/node_gdal.cpp",
            "line": 1484,
            "description": "Dimension types for gdal.Dimension (GDAL >= 3.3)"
        },
        "Constants (DIR)": {
            "name": "Constants (DIR)",
            "shortname": "Constants (DIR)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/node_gdal.cpp",
            "line": 1528,
            "description": "Direction types for gdal.Dimension (GDAL >= 3.3)"
        }
    },
    "elements": {
        "mapCb": {
            "name": "mapCb",
            "attributes": [],
            "file": "lib/default_iterators.js",
            "line": 12,
            "description": "map() callback type",
            "typedef": "mapCb<T,U> (obj: T, index: number) => U"
        },
        "callback": {
            "name": "callback",
            "attributes": [],
            "file": "lib/gdal.js",
            "line": 79,
            "description": "Callback using the standard Node.js error convention",
            "typedef": "callback<T> (err: Error, obj: T) => void"
        },
        "forEachCb": {
            "name": "forEachCb",
            "attributes": [],
            "file": "lib/iterators.js",
            "line": 3,
            "description": "forEach() callback type",
            "typedef": "forEachCb<T> (obj: T, idx: number) => boolean|void"
        }
    },
    "classitems": [
        {
            "file": "lib/calc.js",
            "line": 1,
            "description": "Compute a new output band as a pixel-wise function of given input bands\n\nThis is an alternative implementation of `gdal_calc.py`\n\nIt is fully async and reading and decoding of input and output bands happen\nin separate background threads for each band as long as they are in separate datasets.\n\nThe main bottleneck is the passed function `fn` which must always run on the main Node.js/V8 thread.\nThis is a fundamental Node.js/V8 limitation that is impossible to overcome.\n\nThis function is not to be used in server code that must remain responsive at all times.\nIt does not directly block the event loop, but it is very CPU-heavy and cannot\nrun parallel to other instances of itself. If multiple instances run in parallel, they\nwill all compete for the main thread, executing `fn` on the incoming data chunks on turn by turn basis.\n\nThere is no sync version",
            "itemtype": "method",
            "name": "calcAsync",
            "params": [
                {
                    "name": "inputs",
                    "description": "An object containing all the input bands",
                    "type": "Record<string, gdal.RasterBand>"
                },
                {
                    "name": "output",
                    "description": "Output raster band",
                    "type": "gdal.RasterBand"
                },
                {
                    "name": "fn",
                    "description": "Function to apply on all pixels, it must have the same number of arguments as there are input bands",
                    "type": "(...args: number[]) => number"
                },
                {
                    "name": "options",
                    "description": "Options",
                    "type": "CalcOptions",
                    "optional": true,
                    "props": [
                        {
                            "name": "convertNoData",
                            "description": "Input bands will have their NoData pixels converted to NaN and a NaN output value of the given function will be converted to a NoData pixel, provided that the output raster band has its `gdal.RasterBand.noDataValue` set",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<void>"
            },
            "static": 1,
            "example": [
                "\n```\nconst T2m = await gdal.openAsync('TEMP_2M.tiff'));\nconst D2m = await gdal.openAsync('DEWPOINT_2M.tiff'));\nconst size = await T2m.rasterSizeAsync\nconst cloudBase = await gdal.openAsync('CLOUDBASE.tiff', 'w', 'GTiff',\n   size.x, size.y, 1, gdal.GDT_Float64);\n\n(await cloudBase.bands.getAsync(1)).noDataValue = -1e38\n// Espy's estimation for cloud base height\nconst espyFn = (t, td) => 125 * (t - td);\n\nawait calcAsync({\n t: await T2m.bands.getAsync(1),\n td: await D2m.bands.getAsync(1)\n}, cloudBase.bands.getAsync(1), espyFn, { convertNoData: true });\n```"
            ],
            "class": "gdal"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 62,
            "description": "Iterates through all layers using a callback function.",
            "example": [
                "\n```\ndataset.layers.forEach(function(array, i) { ... });```"
            ],
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"Layer\"}}Layer{{/crossLink}}",
                    "type": "forEachCb<gdal.Layer>"
                }
            ],
            "class": "gdal.DatasetLayers"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 76,
            "description": "Iterates through layers using a callback function and builds\nan array of the returned values.",
            "example": [
                "\n```\nvar result = dataset.layers.map(function(array, i) {\n    return value;\n});```"
            ],
            "itemtype": "method",
            "name": "map<U>",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"Layer\"}}Layer{{/crossLink}}",
                    "type": "mapCb<gdal.Layer,U>"
                }
            ],
            "return": {
                "description": "",
                "type": "U[]"
            },
            "class": "gdal.DatasetLayers"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 94,
            "description": "Iterates through all layers using an iterator",
            "example": [
                "\n```\nfor (const array of dataset.layers) {\n}"
            ],
            "type": "{gdal.Layer}",
            "itemtype": "method",
            "name": "Symbol.iterator",
            "class": "gdal.DatasetLayers"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 109,
            "description": "Iterates through all layers using an async iterator",
            "example": [
                "\n```\nfor await (const array of dataset.layers) {\n}"
            ],
            "type": "{gdal.Layer}",
            "itemtype": "method",
            "name": "Symbol.asyncIterator",
            "class": "gdal.DatasetLayers"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 126,
            "description": "Iterates through raster bands using a callback function and builds\nan array of the returned values.",
            "example": [
                "\n```\nvar result = dataset.bands.map(function(array, i) {\n    return value;\n});```"
            ],
            "itemtype": "method",
            "name": "map<U>",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"RasterBand\"}}RasterBand{{/crossLink}}",
                    "type": "mapCb<gdal.RasterBand,U>"
                }
            ],
            "return": {
                "description": "",
                "type": "U[]"
            },
            "class": "gdal.DatasetBands"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 144,
            "description": "Iterates through all overviews using a callback function.",
            "example": [
                "\n```\nband.overviews.forEach(function(array, i) { ... });```"
            ],
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"RasterBand\"}}RasterBand{{/crossLink}}",
                    "type": "forEachCb<gdal.RasterBand>"
                }
            ],
            "class": "gdal.RasterBandOverviews"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 158,
            "description": "Iterates through overviews using a callback function and builds\nan array of the returned values.",
            "example": [
                "\n```\nvar result = band.overviews.map(function(array, i) {\n    return value;\n});```"
            ],
            "itemtype": "method",
            "name": "map<U>",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"RasterBand\"}}RasterBand{{/crossLink}}",
                    "type": "mapCb<gdal.RasterBand,U>"
                }
            ],
            "return": {
                "description": "",
                "type": "U[]"
            },
            "class": "gdal.RasterBandOverviews"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 176,
            "description": "Iterates through all overviews using an iterator",
            "example": [
                "\n```\nfor (const array of band.overviews) {\n}"
            ],
            "type": "{gdal.RasterBand}",
            "itemtype": "method",
            "name": "Symbol.iterator",
            "class": "gdal.RasterBandOverviews"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 191,
            "description": "Iterates through all overviews using an async iterator",
            "example": [
                "\n```\nfor await (const array of band.overviews) {\n}"
            ],
            "type": "{gdal.RasterBand}",
            "itemtype": "method",
            "name": "Symbol.asyncIterator",
            "class": "gdal.RasterBandOverviews"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 208,
            "description": "Iterates through all drivers using a callback function.",
            "example": [
                "\n```\ngdal.drivers.forEach(function(array, i) { ... });```"
            ],
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"Driver\"}}Driver{{/crossLink}}",
                    "type": "forEachCb<gdal.Driver>"
                }
            ],
            "class": "gdal.GDALDrivers"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 222,
            "description": "Iterates through drivers using a callback function and builds\nan array of the returned values.",
            "example": [
                "\n```\nvar result = gdal.drivers.map(function(array, i) {\n    return value;\n});```"
            ],
            "itemtype": "method",
            "name": "map<U>",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"Driver\"}}Driver{{/crossLink}}",
                    "type": "mapCb<gdal.Driver,U>"
                }
            ],
            "return": {
                "description": "",
                "type": "U[]"
            },
            "class": "gdal.GDALDrivers"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 240,
            "description": "Iterates through all drivers using an iterator",
            "example": [
                "\n```\nfor (const array of gdal.drivers) {\n}"
            ],
            "type": "{gdal.Driver}",
            "itemtype": "method",
            "name": "Symbol.iterator",
            "class": "gdal.GDALDrivers"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 255,
            "description": "Iterates through features using a callback function and builds\nan array of the returned values.",
            "example": [
                "\n```\nvar result = layer.features.map(function(array, i) {\n    return value;\n});```"
            ],
            "itemtype": "method",
            "name": "map<U>",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"Feature\"}}Feature{{/crossLink}}",
                    "type": "mapCb<gdal.Feature,U>"
                }
            ],
            "return": {
                "description": "",
                "type": "U[]"
            },
            "class": "gdal.LayerFeatures"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 273,
            "description": "Iterates through field definitions using a callback function and builds\nan array of the returned values.",
            "example": [
                "\n```\nvar result = layer.features.get(0).fields.map(function(array, i) {\n    return value;\n});```"
            ],
            "itemtype": "method",
            "name": "map<U>",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"any\"}}any{{/crossLink}}",
                    "type": "mapCb<gdal.any,U>"
                }
            ],
            "return": {
                "description": "",
                "type": "U[]"
            },
            "class": "gdal.FeatureFields"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 291,
            "description": "Iterates through all field definitions using a callback function.",
            "example": [
                "\n```\nlayer.fields.forEach(function(array, i) { ... });```"
            ],
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"FieldDefn\"}}FieldDefn{{/crossLink}}",
                    "type": "forEachCb<gdal.FieldDefn>"
                }
            ],
            "class": "gdal.LayerFields"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 305,
            "description": "Iterates through field definitions using a callback function and builds\nan array of the returned values.",
            "example": [
                "\n```\nvar result = layer.fields.map(function(array, i) {\n    return value;\n});```"
            ],
            "itemtype": "method",
            "name": "map<U>",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"FieldDefn\"}}FieldDefn{{/crossLink}}",
                    "type": "mapCb<gdal.FieldDefn,U>"
                }
            ],
            "return": {
                "description": "",
                "type": "U[]"
            },
            "class": "gdal.LayerFields"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 323,
            "description": "Iterates through all field definitions using an iterator",
            "example": [
                "\n```\nfor (const array of layer.fields) {\n}"
            ],
            "type": "{gdal.FieldDefn}",
            "itemtype": "method",
            "name": "Symbol.iterator",
            "class": "gdal.LayerFields"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 338,
            "description": "Iterates through all field definitions using an async iterator",
            "example": [
                "\n```\nfor await (const array of layer.fields) {\n}"
            ],
            "type": "{gdal.FieldDefn}",
            "itemtype": "method",
            "name": "Symbol.asyncIterator",
            "class": "gdal.LayerFields"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 355,
            "description": "Iterates through all field definitions using a callback function.",
            "example": [
                "\n```\nfeatureDefn.forEach(function(array, i) { ... });```"
            ],
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"FieldDefn\"}}FieldDefn{{/crossLink}}",
                    "type": "forEachCb<gdal.FieldDefn>"
                }
            ],
            "class": "gdal.FeatureDefnFields"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 369,
            "description": "Iterates through field definitions using a callback function and builds\nan array of the returned values.",
            "example": [
                "\n```\nvar result = featureDefn.map(function(array, i) {\n    return value;\n});```"
            ],
            "itemtype": "method",
            "name": "map<U>",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"FieldDefn\"}}FieldDefn{{/crossLink}}",
                    "type": "mapCb<gdal.FieldDefn,U>"
                }
            ],
            "return": {
                "description": "",
                "type": "U[]"
            },
            "class": "gdal.FeatureDefnFields"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 387,
            "description": "Iterates through all field definitions using an iterator",
            "example": [
                "\n```\nfor (const array of featureDefn) {\n}"
            ],
            "type": "{gdal.FieldDefn}",
            "itemtype": "method",
            "name": "Symbol.iterator",
            "class": "gdal.FeatureDefnFields"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 402,
            "description": "Iterates through all field definitions using an async iterator",
            "example": [
                "\n```\nfor await (const array of featureDefn) {\n}"
            ],
            "type": "{gdal.FieldDefn}",
            "itemtype": "method",
            "name": "Symbol.asyncIterator",
            "class": "gdal.FeatureDefnFields"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 419,
            "description": "Iterates through all points using a callback function.",
            "example": [
                "\n```\nlineString.points.forEach(function(array, i) { ... });```"
            ],
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"Point\"}}Point{{/crossLink}}",
                    "type": "forEachCb<gdal.Point>"
                }
            ],
            "class": "gdal.LineStringPoints"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 433,
            "description": "Iterates through points using a callback function and builds\nan array of the returned values.",
            "example": [
                "\n```\nvar result = lineString.points.map(function(array, i) {\n    return value;\n});```"
            ],
            "itemtype": "method",
            "name": "map<U>",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"Point\"}}Point{{/crossLink}}",
                    "type": "mapCb<gdal.Point,U>"
                }
            ],
            "return": {
                "description": "",
                "type": "U[]"
            },
            "class": "gdal.LineStringPoints"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 451,
            "description": "Iterates through all points using an iterator",
            "example": [
                "\n```\nfor (const array of lineString.points) {\n}"
            ],
            "type": "{gdal.Point}",
            "itemtype": "method",
            "name": "Symbol.iterator",
            "class": "gdal.LineStringPoints"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 466,
            "description": "Outputs all points as a regular javascript array.",
            "itemtype": "method",
            "name": "toArray",
            "return": {
                "description": "List of {{#crossLink \"Point\"}}Point{{/crossLink}} instances.",
                "type": "gdal.Point[]"
            },
            "class": "gdal.LineStringPoints"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 476,
            "description": "Iterates through all rings using a callback function.",
            "example": [
                "\n```\npolygon.rings.forEach(function(array, i) { ... });```"
            ],
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"LineString\"}}LineString{{/crossLink}}",
                    "type": "forEachCb<gdal.LineString>"
                }
            ],
            "class": "gdal.PolygonRings"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 490,
            "description": "Iterates through rings using a callback function and builds\nan array of the returned values.",
            "example": [
                "\n```\nvar result = polygon.rings.map(function(array, i) {\n    return value;\n});```"
            ],
            "itemtype": "method",
            "name": "map<U>",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"LineString\"}}LineString{{/crossLink}}",
                    "type": "mapCb<gdal.LineString,U>"
                }
            ],
            "return": {
                "description": "",
                "type": "U[]"
            },
            "class": "gdal.PolygonRings"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 508,
            "description": "Iterates through all rings using an iterator",
            "example": [
                "\n```\nfor (const array of polygon.rings) {\n}"
            ],
            "type": "{gdal.LineString}",
            "itemtype": "method",
            "name": "Symbol.iterator",
            "class": "gdal.PolygonRings"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 523,
            "description": "Outputs all rings as a regular javascript array.",
            "itemtype": "method",
            "name": "toArray",
            "return": {
                "description": "List of {{#crossLink \"LineString\"}}LineString{{/crossLink}} instances.",
                "type": "gdal.LineString[]"
            },
            "class": "gdal.PolygonRings"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 535,
            "description": "Iterates through all curves using a callback function.",
            "example": [
                "\n```\ncompoundCurves.curves.forEach(function(array, i) { ... });```"
            ],
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"SimpleCurve\"}}SimpleCurve{{/crossLink}}",
                    "type": "forEachCb<gdal.SimpleCurve>"
                }
            ],
            "class": "gdal.CompoundCurveCurves"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 549,
            "description": "Iterates through curves using a callback function and builds\nan array of the returned values.",
            "example": [
                "\n```\nvar result = compoundCurves.curves.map(function(array, i) {\n    return value;\n});```"
            ],
            "itemtype": "method",
            "name": "map<U>",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"SimpleCurve\"}}SimpleCurve{{/crossLink}}",
                    "type": "mapCb<gdal.SimpleCurve,U>"
                }
            ],
            "return": {
                "description": "",
                "type": "U[]"
            },
            "class": "gdal.CompoundCurveCurves"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 567,
            "description": "Iterates through all curves using an iterator",
            "example": [
                "\n```\nfor (const array of compoundCurves.curves) {\n}"
            ],
            "type": "{gdal.SimpleCurve}",
            "itemtype": "method",
            "name": "Symbol.iterator",
            "class": "gdal.CompoundCurveCurves"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 582,
            "description": "Iterates through all curves using an async iterator",
            "example": [
                "\n```\nfor await (const array of compoundCurves.curves) {\n}"
            ],
            "type": "{gdal.SimpleCurve}",
            "itemtype": "method",
            "name": "Symbol.asyncIterator",
            "class": "gdal.CompoundCurveCurves"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 599,
            "description": "Outputs all curves as a regular javascript array.",
            "itemtype": "method",
            "name": "toArray",
            "return": {
                "description": "List of {{#crossLink \"SimpleCurve\"}}SimpleCurve{{/crossLink}} instances.",
                "type": "gdal.SimpleCurve[]"
            },
            "class": "gdal.CompoundCurveCurves"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 611,
            "description": "Iterates through all child geometries using a callback function.",
            "example": [
                "\n```\ngeometryCollection.children.forEach(function(array, i) { ... });```"
            ],
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"Geometry\"}}Geometry{{/crossLink}}",
                    "type": "forEachCb<gdal.Geometry>"
                }
            ],
            "class": "gdal.GeometryCollectionChildren"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 625,
            "description": "Iterates through child geometries using a callback function and builds\nan array of the returned values.",
            "example": [
                "\n```\nvar result = geometryCollection.children.map(function(array, i) {\n    return value;\n});```"
            ],
            "itemtype": "method",
            "name": "map<U>",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"Geometry\"}}Geometry{{/crossLink}}",
                    "type": "mapCb<gdal.Geometry,U>"
                }
            ],
            "return": {
                "description": "",
                "type": "U[]"
            },
            "class": "gdal.GeometryCollectionChildren"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 643,
            "description": "Iterates through all child geometries using an iterator",
            "example": [
                "\n```\nfor (const array of geometryCollection.children) {\n}"
            ],
            "type": "{gdal.Geometry}",
            "itemtype": "method",
            "name": "Symbol.iterator",
            "class": "gdal.GeometryCollectionChildren"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 658,
            "description": "Iterates through all color entries using a callback function.",
            "example": [
                "\n```\nband.colorTable.forEach(function(array, i) { ... });```"
            ],
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"Color\"}}Color{{/crossLink}}",
                    "type": "forEachCb<gdal.Color>"
                }
            ],
            "class": "gdal.ColorTable"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 672,
            "description": "Iterates through color entries using a callback function and builds\nan array of the returned values.",
            "example": [
                "\n```\nvar result = band.colorTable.map(function(array, i) {\n    return value;\n});```"
            ],
            "itemtype": "method",
            "name": "map<U>",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"Color\"}}Color{{/crossLink}}",
                    "type": "mapCb<gdal.Color,U>"
                }
            ],
            "return": {
                "description": "",
                "type": "U[]"
            },
            "class": "gdal.ColorTable"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 690,
            "description": "Iterates through all color entries using an iterator",
            "example": [
                "\n```\nfor (const array of band.colorTable) {\n}"
            ],
            "type": "{gdal.Color}",
            "itemtype": "method",
            "name": "Symbol.iterator",
            "class": "gdal.ColorTable"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 708,
            "description": "Iterates through all arrays using a callback function.",
            "example": [
                "\n```\ngroup.arrays.forEach(function(array, i) { ... });```"
            ],
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"MDArray\"}}MDArray{{/crossLink}}",
                    "type": "forEachCb<gdal.MDArray>"
                }
            ],
            "class": "gdal.GroupArrays"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 722,
            "description": "Iterates through arrays using a callback function and builds\nan array of the returned values.",
            "example": [
                "\n```\nvar result = group.arrays.map(function(array, i) {\n    return value;\n});```"
            ],
            "itemtype": "method",
            "name": "map<U>",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"MDArray\"}}MDArray{{/crossLink}}",
                    "type": "mapCb<gdal.MDArray,U>"
                }
            ],
            "return": {
                "description": "",
                "type": "U[]"
            },
            "class": "gdal.GroupArrays"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 740,
            "description": "Iterates through all arrays using an iterator",
            "example": [
                "\n```\nfor (const array of group.arrays) {\n}"
            ],
            "type": "{gdal.MDArray}",
            "itemtype": "method",
            "name": "Symbol.iterator",
            "class": "gdal.GroupArrays"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 755,
            "description": "Iterates through all arrays using an async iterator",
            "example": [
                "\n```\nfor await (const array of group.arrays) {\n}"
            ],
            "type": "{gdal.MDArray}",
            "itemtype": "method",
            "name": "Symbol.asyncIterator",
            "class": "gdal.GroupArrays"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 772,
            "description": "Iterates through all groups using a callback function.",
            "example": [
                "\n```\ngroup.groups.forEach(function(array, i) { ... });```"
            ],
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"Group\"}}Group{{/crossLink}}",
                    "type": "forEachCb<gdal.Group>"
                }
            ],
            "class": "gdal.GroupGroups"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 786,
            "description": "Iterates through groups using a callback function and builds\nan array of the returned values.",
            "example": [
                "\n```\nvar result = group.groups.map(function(array, i) {\n    return value;\n});```"
            ],
            "itemtype": "method",
            "name": "map<U>",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"Group\"}}Group{{/crossLink}}",
                    "type": "mapCb<gdal.Group,U>"
                }
            ],
            "return": {
                "description": "",
                "type": "U[]"
            },
            "class": "gdal.GroupGroups"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 804,
            "description": "Iterates through all groups using an iterator",
            "example": [
                "\n```\nfor (const array of group.groups) {\n}"
            ],
            "type": "{gdal.Group}",
            "itemtype": "method",
            "name": "Symbol.iterator",
            "class": "gdal.GroupGroups"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 819,
            "description": "Iterates through all groups using an async iterator",
            "example": [
                "\n```\nfor await (const array of group.groups) {\n}"
            ],
            "type": "{gdal.Group}",
            "itemtype": "method",
            "name": "Symbol.asyncIterator",
            "class": "gdal.GroupGroups"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 836,
            "description": "Iterates through all dimensions using a callback function.",
            "example": [
                "\n```\ngroup.dimensions.forEach(function(array, i) { ... });```"
            ],
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"Dimension\"}}Dimension{{/crossLink}}",
                    "type": "forEachCb<gdal.Dimension>"
                }
            ],
            "class": "gdal.GroupDimensions"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 850,
            "description": "Iterates through dimensions using a callback function and builds\nan array of the returned values.",
            "example": [
                "\n```\nvar result = group.dimensions.map(function(array, i) {\n    return value;\n});```"
            ],
            "itemtype": "method",
            "name": "map<U>",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"Dimension\"}}Dimension{{/crossLink}}",
                    "type": "mapCb<gdal.Dimension,U>"
                }
            ],
            "return": {
                "description": "",
                "type": "U[]"
            },
            "class": "gdal.GroupDimensions"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 868,
            "description": "Iterates through all dimensions using an iterator",
            "example": [
                "\n```\nfor (const array of group.dimensions) {\n}"
            ],
            "type": "{gdal.Dimension}",
            "itemtype": "method",
            "name": "Symbol.iterator",
            "class": "gdal.GroupDimensions"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 883,
            "description": "Iterates through all dimensions using an async iterator",
            "example": [
                "\n```\nfor await (const array of group.dimensions) {\n}"
            ],
            "type": "{gdal.Dimension}",
            "itemtype": "method",
            "name": "Symbol.asyncIterator",
            "class": "gdal.GroupDimensions"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 900,
            "description": "Iterates through all attributes using a callback function.",
            "example": [
                "\n```\ngroup.attributes.forEach(function(array, i) { ... });```"
            ],
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"Attribute\"}}Attribute{{/crossLink}}",
                    "type": "forEachCb<gdal.Attribute>"
                }
            ],
            "class": "gdal.GroupAttributes"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 914,
            "description": "Iterates through attributes using a callback function and builds\nan array of the returned values.",
            "example": [
                "\n```\nvar result = group.attributes.map(function(array, i) {\n    return value;\n});```"
            ],
            "itemtype": "method",
            "name": "map<U>",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"Attribute\"}}Attribute{{/crossLink}}",
                    "type": "mapCb<gdal.Attribute,U>"
                }
            ],
            "return": {
                "description": "",
                "type": "U[]"
            },
            "class": "gdal.GroupAttributes"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 932,
            "description": "Iterates through all attributes using an iterator",
            "example": [
                "\n```\nfor (const array of group.attributes) {\n}"
            ],
            "type": "{gdal.Attribute}",
            "itemtype": "method",
            "name": "Symbol.iterator",
            "class": "gdal.GroupAttributes"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 947,
            "description": "Iterates through all attributes using an async iterator",
            "example": [
                "\n```\nfor await (const array of group.attributes) {\n}"
            ],
            "type": "{gdal.Attribute}",
            "itemtype": "method",
            "name": "Symbol.asyncIterator",
            "class": "gdal.GroupAttributes"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 964,
            "description": "Iterates through all dimensions using a callback function.",
            "example": [
                "\n```\narray.dimensions.forEach(function(array, i) { ... });```"
            ],
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"Dimension\"}}Dimension{{/crossLink}}",
                    "type": "forEachCb<gdal.Dimension>"
                }
            ],
            "class": "gdal.ArrayDimensions"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 978,
            "description": "Iterates through dimensions using a callback function and builds\nan array of the returned values.",
            "example": [
                "\n```\nvar result = array.dimensions.map(function(array, i) {\n    return value;\n});```"
            ],
            "itemtype": "method",
            "name": "map<U>",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"Dimension\"}}Dimension{{/crossLink}}",
                    "type": "mapCb<gdal.Dimension,U>"
                }
            ],
            "return": {
                "description": "",
                "type": "U[]"
            },
            "class": "gdal.ArrayDimensions"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 996,
            "description": "Iterates through all dimensions using an iterator",
            "example": [
                "\n```\nfor (const array of array.dimensions) {\n}"
            ],
            "type": "{gdal.Dimension}",
            "itemtype": "method",
            "name": "Symbol.iterator",
            "class": "gdal.ArrayDimensions"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 1011,
            "description": "Iterates through all dimensions using an async iterator",
            "example": [
                "\n```\nfor await (const array of array.dimensions) {\n}"
            ],
            "type": "{gdal.Dimension}",
            "itemtype": "method",
            "name": "Symbol.asyncIterator",
            "class": "gdal.ArrayDimensions"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 1028,
            "description": "Iterates through all attributes using a callback function.",
            "example": [
                "\n```\narray.attributes.forEach(function(array, i) { ... });```"
            ],
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"Attribute\"}}Attribute{{/crossLink}}",
                    "type": "forEachCb<gdal.Attribute>"
                }
            ],
            "class": "gdal.ArrayAttributes"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 1042,
            "description": "Iterates through attributes using a callback function and builds\nan array of the returned values.",
            "example": [
                "\n```\nvar result = array.attributes.map(function(array, i) {\n    return value;\n});```"
            ],
            "itemtype": "method",
            "name": "map<U>",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"Attribute\"}}Attribute{{/crossLink}}",
                    "type": "mapCb<gdal.Attribute,U>"
                }
            ],
            "return": {
                "description": "",
                "type": "U[]"
            },
            "class": "gdal.ArrayAttributes"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 1060,
            "description": "Iterates through all attributes using an iterator",
            "example": [
                "\n```\nfor (const array of array.attributes) {\n}"
            ],
            "type": "{gdal.Attribute}",
            "itemtype": "method",
            "name": "Symbol.iterator",
            "class": "gdal.ArrayAttributes"
        },
        {
            "file": "lib/default_iterators.js",
            "line": 1075,
            "description": "Iterates through all attributes using an async iterator",
            "example": [
                "\n```\nfor await (const array of array.attributes) {\n}"
            ],
            "type": "{gdal.Attribute}",
            "itemtype": "method",
            "name": "Symbol.asyncIterator",
            "class": "gdal.ArrayAttributes"
        },
        {
            "file": "lib/envelope.js",
            "line": 12,
            "itemtype": "property",
            "name": "minX",
            "type": "{number}",
            "class": "gdal.Envelope"
        },
        {
            "file": "lib/envelope.js",
            "line": 16,
            "itemtype": "property",
            "name": "maxX",
            "type": "{number}",
            "class": "gdal.Envelope"
        },
        {
            "file": "lib/envelope.js",
            "line": 20,
            "itemtype": "property",
            "name": "minY",
            "type": "{number}",
            "class": "gdal.Envelope"
        },
        {
            "file": "lib/envelope.js",
            "line": 24,
            "itemtype": "property",
            "name": "maxY",
            "type": "{number}",
            "class": "gdal.Envelope"
        },
        {
            "file": "lib/envelope.js",
            "line": 41,
            "description": "Determines if the envelope has not been set yet.",
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.Envelope"
        },
        {
            "file": "lib/envelope.js",
            "line": 51,
            "description": "Unions the provided envelope with the current envelope.",
            "itemtype": "method",
            "name": "merge",
            "params": [
                {
                    "name": "envelope",
                    "description": "",
                    "type": "Envelope"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "gdal.Envelope"
        },
        {
            "file": "lib/envelope.js",
            "line": 59,
            "description": "Unions the provided envelope with the x/y coordinates provided.",
            "itemtype": "method",
            "name": "merge",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "gdal.Envelope"
        },
        {
            "file": "lib/envelope.js",
            "line": 95,
            "description": "Determines if the provided envelope touches it.",
            "itemtype": "method",
            "name": "intersects",
            "params": [
                {
                    "name": "envelope",
                    "description": "",
                    "type": "Envelope"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.Envelope"
        },
        {
            "file": "lib/envelope.js",
            "line": 111,
            "description": "Updates the envelope to the intersection of the two envelopes.",
            "itemtype": "method",
            "name": "intersect",
            "params": [
                {
                    "name": "envelope",
                    "description": "",
                    "type": "Envelope"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "gdal.Envelope"
        },
        {
            "file": "lib/envelope.js",
            "line": 136,
            "description": "Determines if the provided envelope is wholly-contained by the current envelope.",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "envelope",
                    "description": "",
                    "type": "Envelope"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.Envelope"
        },
        {
            "file": "lib/envelope.js",
            "line": 152,
            "description": "Converts the envelope to a polygon.",
            "itemtype": "method",
            "name": "toPolygon",
            "return": {
                "description": "",
                "type": "Polygon"
            },
            "class": "gdal.Envelope"
        },
        {
            "file": "lib/envelope_3d.js",
            "line": 12,
            "itemtype": "property",
            "name": "minX",
            "type": "{number}",
            "class": "gdal.Envelope3D"
        },
        {
            "file": "lib/envelope_3d.js",
            "line": 16,
            "itemtype": "property",
            "name": "maxX",
            "type": "{number}",
            "class": "gdal.Envelope3D"
        },
        {
            "file": "lib/envelope_3d.js",
            "line": 20,
            "itemtype": "property",
            "name": "minY",
            "type": "{number}",
            "class": "gdal.Envelope3D"
        },
        {
            "file": "lib/envelope_3d.js",
            "line": 24,
            "itemtype": "property",
            "name": "maxY",
            "type": "{number}",
            "class": "gdal.Envelope3D"
        },
        {
            "file": "lib/envelope_3d.js",
            "line": 28,
            "itemtype": "property",
            "name": "minZ",
            "type": "{number}",
            "class": "gdal.Envelope3D"
        },
        {
            "file": "lib/envelope_3d.js",
            "line": 32,
            "itemtype": "property",
            "name": "maxZ",
            "type": "{number}",
            "class": "gdal.Envelope3D"
        },
        {
            "file": "lib/envelope_3d.js",
            "line": 53,
            "description": "Determines if the envelope has not been set yet.",
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.Envelope3D"
        },
        {
            "file": "lib/envelope_3d.js",
            "line": 70,
            "description": "Unions the provided envelope with the current envelope.",
            "itemtype": "method",
            "name": "merge",
            "params": [
                {
                    "name": "envelope",
                    "description": "",
                    "type": "Envelope3D"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "gdal.Envelope3D"
        },
        {
            "file": "lib/envelope_3d.js",
            "line": 78,
            "description": "Unions the provided envelope with the x/y/z coordinates provided.",
            "itemtype": "method",
            "name": "merge",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "gdal.Envelope3D"
        },
        {
            "file": "lib/envelope_3d.js",
            "line": 123,
            "description": "Determines if the provided envelope touches it.",
            "itemtype": "method",
            "name": "intersects",
            "params": [
                {
                    "name": "envelope",
                    "description": "",
                    "type": "Envelope3D"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.Envelope3D"
        },
        {
            "file": "lib/envelope_3d.js",
            "line": 141,
            "description": "Updates the envelope to the intersection of the two envelopes.",
            "itemtype": "method",
            "name": "intersect",
            "params": [
                {
                    "name": "envelope",
                    "description": "",
                    "type": "Envelope3D"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "gdal.Envelope3D"
        },
        {
            "file": "lib/envelope_3d.js",
            "line": 170,
            "description": "Determines if the provided envelope is wholly-contained by the current envelope.",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "envelope",
                    "description": "",
                    "type": "Envelope3D"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.Envelope3D"
        },
        {
            "file": "lib/gdal.js",
            "line": 43,
            "description": "Gets a GDAL configuration setting.",
            "example": [
                "\n```\ndata_path = gdal.config.get('GDAL_DATA');```"
            ],
            "static": 1,
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String|null"
            },
            "class": "gdal.config"
        },
        {
            "file": "lib/gdal.js",
            "line": 57,
            "description": "Sets a GDAL configuration setting.",
            "example": [
                "\n```\ngdal.config.set('GDAL_DATA', data_path);```"
            ],
            "static": 1,
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "String|null"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "gdal.config"
        },
        {
            "file": "lib/gdal.js",
            "line": 145,
            "description": "Returns a TypedArray (https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView#Typed_array_subclasses) constructor from a GDAL data type",
            "example": [
                "\n```\nconst array = new (gdal.fromDataType(band.dataType))(band.size.x * band.size.y)\n````"
            ],
            "itemtype": "method",
            "name": "fromDataType",
            "throws": {
                "description": "TypeError"
            },
            "params": [
                {
                    "name": "dataType",
                    "description": "",
                    "type": "String|null"
                }
            ],
            "return": {
                "description": "",
                "type": "New (len: number) => TypedArray"
            },
            "class": "gdal"
        },
        {
            "file": "lib/gdal.js",
            "line": 175,
            "description": "Returns a GDAL data type from a TypedArray (https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView#Typed_array_subclasses)",
            "example": [
                "\n```\nconst dataType = gdal.fromDataType(array)\n````"
            ],
            "itemtype": "method",
            "name": "toDataType",
            "throws": {
                "description": "TypeError"
            },
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "TypedArray"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "gdal"
        },
        {
            "file": "lib/gdal.js",
            "line": 205,
            "description": "Returns a {{#crossLink \"Envelope\"}}gdal.Envelope{{/crossLink}} object for the raster bands",
            "example": [
                "\n```\nconst extent = dataset.getEnvelope()\n````"
            ],
            "itemtype": "method",
            "name": "getEnvelope",
            "return": {
                "description": "",
                "type": "Envelope"
            },
            "class": "gdal.DatasetBands"
        },
        {
            "file": "lib/gdal.js",
            "line": 232,
            "description": "Creates or opens a dataset. Dataset should be explicitly closed with `dataset.close()` method if opened in `\"w\"` mode to flush any changes. Otherwise, datasets are closed when (and if) node decides to garbage collect them.",
            "example": [
                "\n```\nvar dataset = gdal.open('./data.shp');```",
                "\n```\nvar dataset = gdal.open(fs.readFileSync('./data.shp'));```"
            ],
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "open",
            "static": 1,
            "params": [
                {
                    "name": "path",
                    "description": "Path to dataset or in-memory Buffer to open",
                    "type": "String|Buffer"
                },
                {
                    "name": "mode",
                    "description": "The mode to use to open the file: `\"r\"`, `\"r+\"`, or `\"w\"`",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"r\""
                },
                {
                    "name": "drivers",
                    "description": "Driver name, or list of driver names to attempt to use.",
                    "type": "String|string[]",
                    "optional": true
                },
                {
                    "name": "x_size",
                    "description": "Used when creating a raster dataset with the `\"w\"` mode.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y_size",
                    "description": "Used when creating a raster dataset with the `\"w\"` mode.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "band_count",
                    "description": "Used when creating a raster dataset with the `\"w\"` mode.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "data_type",
                    "description": "Used when creating a raster dataset with the `\"w\"` mode.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "creation_options",
                    "description": "Used when creating a dataset with the `\"w\"` mode.",
                    "type": "String[]|object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Dataset"
            },
            "class": "gdal"
        },
        {
            "file": "lib/gdal.js",
            "line": 329,
            "description": "Asynchronously creates or opens a dataset. Dataset should be explicitly closed with `dataset.close()` method if opened in `\"w\"` mode to flush any changes. Otherwise, datasets are closed when (and if) node decides to garbage collect them.\nIf the last parameter is a callback, then this callback is called on completion and undefined is returned. Otherwise the function returns a Promise resolved with the result.",
            "example": [
                "\n```\nvar dataset = await gdal.openAsync('./data.shp');```",
                "\n```\nvar dataset = await gdal.openAsync(await fd.readFile('./data.shp'));```",
                "\n```\ngdal.openAsync('./data.shp', (err, ds) => {...});```"
            ],
            "itemtype": "method",
            "name": "openAsync",
            "static": 1,
            "params": [
                {
                    "name": "path",
                    "description": "Path to dataset or in-memory Buffer to open",
                    "type": "String|Buffer"
                },
                {
                    "name": "mode",
                    "description": "The mode to use to open the file: `\"r\"`, `\"r+\"`, or `\"w\"`",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"r\""
                },
                {
                    "name": "drivers",
                    "description": "Driver name, or list of driver names to attempt to use.",
                    "type": "String|string[]",
                    "optional": true
                },
                {
                    "name": "x_size",
                    "description": "Used when creating a raster dataset with the `\"w\"` mode.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y_size",
                    "description": "Used when creating a raster dataset with the `\"w\"` mode.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "band_count",
                    "description": "Used when creating a raster dataset with the `\"w\"` mode.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "data_type",
                    "description": "Used when creating a raster dataset with the `\"w\"` mode.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "creation_options",
                    "description": "Used when creating a dataset with the `\"w\"` mode.",
                    "type": "String[]|object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<Dataset>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<Dataset>"
            },
            "class": "gdal"
        },
        {
            "file": "lib/gdal.js",
            "line": 361,
            "description": "TypeScript shorthand version with callback and no optional arguments",
            "itemtype": "method",
            "name": "openAsync",
            "static": 1,
            "params": [
                {
                    "name": "path",
                    "description": "Path to dataset or in-memory Buffer to open",
                    "type": "String|Buffer"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<Dataset>"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "gdal"
        },
        {
            "file": "lib/gdal.js",
            "line": 498,
            "description": "Creates a LayerFields instance from an object of keys and values.",
            "itemtype": "method",
            "name": "fromJSON",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "approx_ok",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "gdal.LayerFields"
        },
        {
            "file": "lib/gdal.js",
            "line": 519,
            "description": "Creates a LayerFields instance from an object of keys and values.",
            "itemtype": "method",
            "name": "fromObject",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Record<string, any>"
                },
                {
                    "name": "approx_ok",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "gdal.LayerFields"
        },
        {
            "file": "lib/gdal.js",
            "line": 536,
            "itemtype": "property",
            "name": "wkbType",
            "final": 1,
            "static": 1,
            "type": "{number}",
            "class": "gdal.Geometry"
        },
        {
            "file": "lib/iterators.js",
            "line": 9,
            "description": "Iterates through all bands using a callback function.\nNote: GDAL band indexes start at 1, not 0.",
            "example": [
                "\n```\ndataset.bands.forEach(function(band, i) { ... });```"
            ],
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"RasterBand\"}}RasterBand{{/crossLink}}",
                    "type": "forEachCb<gdal.RasterBand>"
                }
            ],
            "class": "gdal.DatasetBands"
        },
        {
            "file": "lib/iterators.js",
            "line": 28,
            "description": "Iterates through all bands using an iterator",
            "example": [
                "\n```\nfor (const band of dataset.bands) {\n}```"
            ],
            "type": "{gdal.RasterBand}",
            "itemtype": "method",
            "name": "Symbol.iterator",
            "class": "gdal.DatasetBands"
        },
        {
            "file": "lib/iterators.js",
            "line": 54,
            "description": "Iterates through all bands using an async iterator",
            "example": [
                "\n```\nfor await (const band of dataset.bands) {\n}```"
            ],
            "type": "{gdal.RasterBand}",
            "itemtype": "method",
            "name": "Symbol.asyncIterator",
            "class": "gdal.DatasetBands"
        },
        {
            "file": "lib/iterators.js",
            "line": 82,
            "description": "Iterates through all features using a callback function.",
            "example": [
                "\n```\nlayer.features.forEach(function(feature, i) { ... });```"
            ],
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"Feature\"}}Feature{{/crossLink}}",
                    "type": "forEachCb<gdal.Feature>"
                }
            ],
            "class": "gdal.LayerFeatures"
        },
        {
            "file": "lib/iterators.js",
            "line": 102,
            "description": "Iterates through all features using an iterator",
            "example": [
                "\n```\nfor (const feature of layer.features) {\n}```"
            ],
            "type": "{gdal.Feature}",
            "itemtype": "method",
            "name": "Symbol.iterator",
            "class": "gdal.LayerFeatures"
        },
        {
            "file": "lib/iterators.js",
            "line": 128,
            "description": "Iterates through all features using an async iterator",
            "example": [
                "\n```\nfor await (const feature of layer.features) {\n}```"
            ],
            "type": "{gdal.Feature}",
            "itemtype": "method",
            "name": "Symbol.asyncIterator",
            "class": "gdal.LayerFeatures"
        },
        {
            "file": "lib/iterators.js",
            "line": 156,
            "description": "Iterates through all fields using a callback function.",
            "example": [
                "\n```\nlayer.features.get(0).fields.forEach(function(value, key) { ... });```"
            ],
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each feature `value` and `key`.",
                    "type": "ForEachCb<any>"
                }
            ],
            "class": "gdal.FeatureFields"
        },
        {
            "file": "lib/iterators.js",
            "line": 174,
            "description": "Outputs the fields as a serialized JSON string.",
            "itemtype": "method",
            "name": "toJSON",
            "return": {
                "description": "Serialized JSON",
                "type": "String"
            },
            "class": "gdal.FeatureFields"
        },
        {
            "file": "lib/iterators.js",
            "line": 185,
            "description": "Converts the geometry to a GeoJSON object representation.",
            "itemtype": "method",
            "name": "toObject",
            "return": {
                "description": "GeoJSON",
                "type": "Object"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "lib/readable.js",
            "line": 7,
            "description": "create a Readable stream from a raster band",
            "itemtype": "method",
            "name": "createReadStream",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "RasterReadableOptions",
                    "optional": true,
                    "props": [
                        {
                            "name": "blockOptimize",
                            "description": "Read by file blocks when possible (when `rasterSize.x == blockSize.x`)",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "convertNoData",
                            "description": "Automatically convert `gdal.RasterBand.noDataValue` to `NaN`",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "readAs",
                            "description": "Data type to convert to, must be a `TypedArray` constructor",
                            "type": "New (len: number) => TypedArray",
                            "optional": true,
                            "optdefault": "undefined"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "RasterReadStream"
            },
            "class": "gdal.RasterBandPixels"
        },
        {
            "file": "lib/writable.js",
            "line": 7,
            "description": "create a Writable stream from a raster band",
            "itemtype": "method",
            "name": "createWriteStream",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "RasterWritableOptions",
                    "optional": true,
                    "props": [
                        {
                            "name": "blockOptimize",
                            "description": "Write by file blocks when possible (when rasterSize.x == blockSize.x)",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "convertNoData",
                            "description": "Automatically convert `NaN` to `gdal.RasterBand.noDataValue` if it is set",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "RasterWriteStream"
            },
            "class": "gdal.RasterBandPixels"
        },
        {
            "file": "src/collections/array_attributes.cpp",
            "line": 44,
            "description": "Returns the attribute with the given name/index.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String|number"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Attribute"
            },
            "class": "gdal.ArrayAttributes"
        },
        {
            "file": "src/collections/array_attributes.cpp",
            "line": 52,
            "description": "Returns the attribute with the given name/index.\n{{{async}}}",
            "itemtype": "method",
            "name": "getAsync",
            "params": [
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String|number"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Attribute>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Attribute>"
            },
            "class": "gdal.ArrayAttributes"
        },
        {
            "file": "src/collections/array_attributes.cpp",
            "line": 63,
            "description": "Returns the number of attributes in the collection.",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.ArrayAttributes"
        },
        {
            "file": "src/collections/array_attributes.cpp",
            "line": 70,
            "description": "Returns the number of attributes in the collection.\n{{{async}}}",
            "itemtype": "method",
            "name": "countAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<number>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<number>"
            },
            "class": "gdal.ArrayAttributes"
        },
        {
            "file": "src/collections/array_attributes.cpp",
            "line": 80,
            "readonly": "",
            "itemtype": "attribute",
            "name": "names",
            "type": "{string[]}",
            "class": "gdal.ArrayAttributes"
        },
        {
            "file": "src/collections/array_attributes.cpp",
            "line": 86,
            "description": "Parent dataset",
            "readonly": "",
            "itemtype": "attribute",
            "name": "ds",
            "type": "{gdal.Dataset}",
            "class": "gdal.ArrayAttributes"
        },
        {
            "file": "src/collections/array_dimensions.cpp",
            "line": 58,
            "description": "Returns the array with the given name/index.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "String|number"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Dimension"
            },
            "class": "gdal.ArrayDimensions"
        },
        {
            "file": "src/collections/array_dimensions.cpp",
            "line": 66,
            "description": "Returns the array with the given name/index.\n{{{async}}}",
            "itemtype": "method",
            "name": "getAsync",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "String|number"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Dimension>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Dimension>"
            },
            "class": "gdal.ArrayDimensions"
        },
        {
            "file": "src/collections/array_dimensions.cpp",
            "line": 77,
            "description": "Returns the number of dimensions in the collection.",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.ArrayDimensions"
        },
        {
            "file": "src/collections/array_dimensions.cpp",
            "line": 84,
            "description": "Returns the number of dimensions in the collection.\n{{{async}}}",
            "itemtype": "method",
            "name": "countAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<number>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<number>"
            },
            "class": "gdal.ArrayDimensions"
        },
        {
            "file": "src/collections/array_dimensions.cpp",
            "line": 94,
            "readonly": "",
            "itemtype": "attribute",
            "name": "names",
            "type": "{string[]}",
            "class": "gdal.ArrayDimensions"
        },
        {
            "file": "src/collections/array_dimensions.cpp",
            "line": 100,
            "description": "Parent group",
            "readonly": "",
            "itemtype": "attribute",
            "name": "ds",
            "type": "{gdal.Group}",
            "class": "gdal.ArrayDimensions"
        },
        {
            "file": "src/collections/array_dimensions.cpp",
            "line": 108,
            "description": "Parent dataset",
            "readonly": "",
            "itemtype": "attribute",
            "name": "ds",
            "type": "{gdal.Dataset}",
            "class": "gdal.ArrayDimensions"
        },
        {
            "file": "src/collections/colortable.cpp",
            "line": 143,
            "description": "Clones the instance.\nThe newly created ColorTable is not owned by any RasterBand.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "",
                "type": "gdal.ColorTable"
            },
            "class": "gdal.ColorTable"
        },
        {
            "file": "src/collections/colortable.cpp",
            "line": 155,
            "description": "Compares two ColorTable objects for equality",
            "itemtype": "method",
            "name": "isSame",
            "params": [
                {
                    "name": "other",
                    "description": "",
                    "type": "gdal.ColorTable"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.ColorTable"
        },
        {
            "file": "src/collections/colortable.cpp",
            "line": 176,
            "description": "Returns the color with the given ID.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "Color"
            },
            "class": "gdal.ColorTable"
        },
        {
            "file": "src/collections/colortable.cpp",
            "line": 219,
            "description": "Sets the color entry with the given ID.",
            "itemtype": "method",
            "name": "set",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "color",
                    "description": "",
                    "type": "Color"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "gdal.ColorTable"
        },
        {
            "file": "src/collections/colortable.cpp",
            "line": 253,
            "description": "Creates a color ramp from one color entry to another.",
            "itemtype": "method",
            "name": "ramp",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "start_index",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "start_color",
                    "description": "",
                    "type": "Color"
                },
                {
                    "name": "end_index",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "end_color",
                    "description": "",
                    "type": "Color"
                }
            ],
            "return": {
                "description": "total number of color entries",
                "type": "Number"
            },
            "class": "gdal.ColorTable"
        },
        {
            "file": "src/collections/colortable.cpp",
            "line": 301,
            "description": "Returns the number of color entries.",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.ColorTable"
        },
        {
            "file": "src/collections/colortable.cpp",
            "line": 322,
            "description": "Color interpretation of the palette",
            "readonly": "",
            "itemtype": "attribute",
            "name": "interpretation",
            "type": "{string}",
            "class": "gdal.ColorTable"
        },
        {
            "file": "src/collections/colortable.cpp",
            "line": 353,
            "description": "Parent band",
            "readonly": "",
            "itemtype": "attribute",
            "name": "band",
            "type": "{gdal.RasterBand|undefined}",
            "class": "gdal.ColorTable"
        },
        {
            "file": "src/collections/compound_curves.cpp",
            "line": 78,
            "description": "Returns the number of curves that exist in the collection.",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.CompoundCurveCurves"
        },
        {
            "file": "src/collections/compound_curves.cpp",
            "line": 93,
            "description": "Returns the curve at the specified index.",
            "example": [
                "\n```\nvar curve0 = compound.curves.get(0);\nvar curve1 = compound.curves.get(1);```"
            ],
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "gdal.CompoundCurve|gdal.SimpleCurve"
            },
            "class": "gdal.CompoundCurveCurves"
        },
        {
            "file": "src/collections/compound_curves.cpp",
            "line": 121,
            "description": "Adds a curve to the collection.",
            "example": [
                "\n```\nvar ring1 = new gdal.CircularString();\nring1.points.add(0,0);\nring1.points.add(1,0);\nring1.points.add(1,1);\nring1.points.add(0,1);\nring1.points.add(0,0);\n\n// one at a time:\ncompound.curves.add(ring1);\n\n// many at once:\ncompound.curves.add([ring1, ...]);```"
            ],
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "curves",
                    "description": "",
                    "type": "gdal.SimpleCurve|gdal.SimpleCurve[]"
                }
            ],
            "class": "gdal.CompoundCurveCurves"
        },
        {
            "file": "src/collections/dataset_bands.cpp",
            "line": 82,
            "description": "Returns the band with the given ID.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "Number"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "gdal.RasterBand"
            },
            "class": "gdal.DatasetBands"
        },
        {
            "file": "src/collections/dataset_bands.cpp",
            "line": 91,
            "description": "Returns the band with the given ID.\n{{{async}}}",
            "itemtype": "method",
            "name": "getAsync",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.RasterBand>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "Promise<gdal.RasterBand>"
            },
            "class": "gdal.DatasetBands"
        },
        {
            "file": "src/collections/dataset_bands.cpp",
            "line": 129,
            "description": "Adds a new band.",
            "itemtype": "method",
            "name": "create",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "dataType",
                    "description": "Type of band ({{#crossLink \"Constants (GDT)\"}}see GDT constants{{/crossLink}}).",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Creation options",
                    "type": "Object|string[]",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.RasterBand"
            },
            "class": "gdal.DatasetBands"
        },
        {
            "file": "src/collections/dataset_bands.cpp",
            "line": 139,
            "description": "Adds a new band.\n{{{async}}}",
            "itemtype": "method",
            "name": "createAsync",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "dataType",
                    "description": "Type of band ({{#crossLink \"Constants (GDT)\"}}see GDT constants{{/crossLink}}).",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Creation options",
                    "type": "Object|string[]",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.RasterBand>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.RasterBand>"
            },
            "class": "gdal.DatasetBands"
        },
        {
            "file": "src/collections/dataset_bands.cpp",
            "line": 197,
            "description": "Returns the number of bands.",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.DatasetBands"
        },
        {
            "file": "src/collections/dataset_bands.cpp",
            "line": 204,
            "description": "Returns the number of bands.\n {{{async}}}",
            "itemtype": "method",
            "name": "countAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<number>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<number>"
            },
            "class": "gdal.DatasetBands"
        },
        {
            "file": "src/collections/dataset_bands.cpp",
            "line": 236,
            "description": "Parent dataset",
            "readonly": "",
            "itemtype": "attribute",
            "name": "ds",
            "type": "{gdal.Dataset}",
            "class": "gdal.DatasetBands"
        },
        {
            "file": "src/collections/dataset_layers.cpp",
            "line": 86,
            "description": "Returns the layer with the given name or identifier.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "Layer name or ID.",
                    "type": "String|number"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "gdal.Layer"
            },
            "class": "gdal.DatasetLayers"
        },
        {
            "file": "src/collections/dataset_layers.cpp",
            "line": 95,
            "description": "Returns the layer with the given name or identifier.\n{{{async}}}",
            "itemtype": "method",
            "name": "getAsync",
            "params": [
                {
                    "name": "key",
                    "description": "Layer name or ID.",
                    "type": "String|number"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Layer>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "Promise<gdal.Layer>"
            },
            "class": "gdal.DatasetLayers"
        },
        {
            "file": "src/collections/dataset_layers.cpp",
            "line": 152,
            "description": "Adds a new layer.",
            "example": [
                "\n```\ndataset.layers.create('layername', null, gdal.Point);\n```"
            ],
            "itemtype": "method",
            "name": "create",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "name",
                    "description": "Layer name",
                    "type": "String"
                },
                {
                    "name": "srs",
                    "description": "Layer projection",
                    "type": "gdal.SpatialReference|null",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "geomType",
                    "description": "Geometry type or constructor ({{#crossLink\n\"Constants (wkbGeometryType)\"}}see geometry types{{/crossLink}})",
                    "type": "Number|Function|null",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "creation_options",
                    "description": "driver-specific layer creation\noptions",
                    "type": "String[]|object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Layer"
            },
            "class": "gdal.DatasetLayers"
        },
        {
            "file": "src/collections/dataset_layers.cpp",
            "line": 171,
            "description": "Adds a new layer.\n{{{async}}}",
            "example": [
                "\n```\nawait dataset.layers.createAsync('layername', null, gdal.Point);\ndataset.layers.createAsync('layername', null, gdal.Point, (e, r) => console.log(e, r));\n```"
            ],
            "itemtype": "method",
            "name": "createAsync",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "name",
                    "description": "Layer name",
                    "type": "String"
                },
                {
                    "name": "srs",
                    "description": "Layer projection",
                    "type": "gdal.SpatialReference|null",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "geomType",
                    "description": "Geometry type or constructor ({{#crossLink\n\"Constants (wkbGeometryType)\"}}see geometry types{{/crossLink}})",
                    "type": "Number|Function|null",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "creation_options",
                    "description": "driver-specific layer creation\noptions",
                    "type": "String[]|object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Layer>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Layer>"
            },
            "class": "gdal.DatasetLayers"
        },
        {
            "file": "src/collections/dataset_layers.cpp",
            "line": 237,
            "description": "Returns the number of layers.",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.DatasetLayers"
        },
        {
            "file": "src/collections/dataset_layers.cpp",
            "line": 244,
            "description": "Returns the number of layers.\n{{{async}}}",
            "itemtype": "method",
            "name": "countAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<number>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<number>"
            },
            "class": "gdal.DatasetLayers"
        },
        {
            "file": "src/collections/dataset_layers.cpp",
            "line": 277,
            "description": "Copies a layer.",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "src_lyr_name",
                    "description": "",
                    "type": "gdal.Layer"
                },
                {
                    "name": "dst_lyr_name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "layer creation options",
                    "type": "Object|string[]",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Layer"
            },
            "class": "gdal.DatasetLayers"
        },
        {
            "file": "src/collections/dataset_layers.cpp",
            "line": 287,
            "description": "Copies a layer.\n{{{async}}}",
            "itemtype": "method",
            "name": "copyAsync",
            "params": [
                {
                    "name": "src_lyr_name",
                    "description": "",
                    "type": "gdal.Layer"
                },
                {
                    "name": "dst_lyr_name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "layer creation options",
                    "type": "Object|string[]",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Layer>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Layer>"
            },
            "class": "gdal.DatasetLayers"
        },
        {
            "file": "src/collections/dataset_layers.cpp",
            "line": 337,
            "description": "Removes a layer.",
            "itemtype": "method",
            "name": "remove",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "gdal.DatasetLayers"
        },
        {
            "file": "src/collections/dataset_layers.cpp",
            "line": 345,
            "description": "Removes a layer.\n{{{async}}}",
            "itemtype": "method",
            "name": "removeAsync",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<void>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<void>"
            },
            "class": "gdal.DatasetLayers"
        },
        {
            "file": "src/collections/dataset_layers.cpp",
            "line": 383,
            "description": "Parent dataset",
            "readonly": "",
            "itemtype": "attribute",
            "name": "ds",
            "type": "{gdal.Dataset}",
            "class": "gdal.DatasetLayers"
        },
        {
            "file": "src/collections/feature_defn_fields.cpp",
            "line": 83,
            "description": "Returns the number of fields.",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.FeatureDefnFields"
        },
        {
            "file": "src/collections/feature_defn_fields.cpp",
            "line": 102,
            "description": "Returns the index of field definition.",
            "itemtype": "method",
            "name": "indexOf",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Index or `-1` if not found.",
                "type": "Number"
            },
            "class": "gdal.FeatureDefnFields"
        },
        {
            "file": "src/collections/feature_defn_fields.cpp",
            "line": 125,
            "description": "Returns a field definition.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "Field name or index",
                    "type": "String|number"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "gdal.FieldDefn"
            },
            "class": "gdal.FeatureDefnFields"
        },
        {
            "file": "src/collections/feature_defn_fields.cpp",
            "line": 157,
            "description": "Returns a list of field names.",
            "itemtype": "method",
            "name": "getNames",
            "return": {
                "description": "List of field names.",
                "type": "String[]"
            },
            "class": "gdal.FeatureDefnFields"
        },
        {
            "file": "src/collections/feature_defn_fields.cpp",
            "line": 184,
            "description": "Removes a field definition.",
            "itemtype": "method",
            "name": "remove",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "key",
                    "description": "Field name or index",
                    "type": "String|number"
                }
            ],
            "class": "gdal.FeatureDefnFields"
        },
        {
            "file": "src/collections/feature_defn_fields.cpp",
            "line": 218,
            "description": "Adds field definition(s).",
            "itemtype": "method",
            "name": "add",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "fields",
                    "description": "",
                    "type": "gdal.FieldDefn|gdal.FieldDefn[]"
                }
            ],
            "class": "gdal.FeatureDefnFields"
        },
        {
            "file": "src/collections/feature_defn_fields.cpp",
            "line": 265,
            "description": "Reorders the fields.",
            "example": [
                "\n```\n// reverse fields:\nfeatureDef.fields.reorder([2, 1, 0]);```"
            ],
            "itemtype": "method",
            "name": "reorder",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "map",
                    "description": "An array representing the new field order.",
                    "type": "Number[]"
                }
            ],
            "class": "gdal.FeatureDefnFields"
        },
        {
            "file": "src/collections/feature_defn_fields.cpp",
            "line": 329,
            "description": "Parent feature definition.",
            "readonly": "",
            "itemtype": "attribute",
            "name": "featureDefn",
            "type": "{gdal.FeatureDefn}",
            "class": "gdal.FeatureDefnFields"
        },
        {
            "file": "src/collections/feature_fields.cpp",
            "line": 97,
            "description": "Sets feature field(s).",
            "example": [
                "\n```\n// most-efficient, least flexible. requires you to know the ordering of the\nfields: feature.fields.set(['Something']); feature.fields.set(0,\n'Something');\n\n// most flexible.\nfeature.fields.set({name: 'Something'});\nfeature.fields.set('name', 'Something');\n```"
            ],
            "itemtype": "method",
            "name": "set",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "key",
                    "description": "Field name or index",
                    "type": "String|number"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Any"
                }
            ],
            "class": "gdal.FeatureFields"
        },
        {
            "file": "src/collections/feature_fields.cpp",
            "line": 117,
            "itemtype": "method",
            "name": "set",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "fields",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "gdal.FeatureFields"
        },
        {
            "file": "src/collections/feature_fields.cpp",
            "line": 209,
            "description": "Resets all fields.",
            "example": [
                "\n```\nfeature.fields.reset();```"
            ],
            "itemtype": "method",
            "name": "reset",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "values",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "gdal.FeatureFields"
        },
        {
            "file": "src/collections/feature_fields.cpp",
            "line": 269,
            "description": "Returns the number of fields.",
            "example": [
                "\n```\nfeature.fields.count();```"
            ],
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.FeatureFields"
        },
        {
            "file": "src/collections/feature_fields.cpp",
            "line": 292,
            "description": "Returns the index of a field, given its name.",
            "example": [
                "\n```\nvar index = feature.fields.indexOf('field');```"
            ],
            "itemtype": "method",
            "name": "indexOf",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Index or, `-1` if it cannot be found.",
                "type": "Number"
            },
            "class": "gdal.FeatureFields"
        },
        {
            "file": "src/collections/feature_fields.cpp",
            "line": 319,
            "description": "Outputs the field data as a pure JS object.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "toObject",
            "return": {
                "description": "",
                "type": "Any"
            },
            "class": "gdal.FeatureFields"
        },
        {
            "file": "src/collections/feature_fields.cpp",
            "line": 361,
            "description": "Outputs the field values as a pure JS array.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "toArray",
            "return": {
                "description": "",
                "type": "Any[]"
            },
            "class": "gdal.FeatureFields"
        },
        {
            "file": "src/collections/feature_fields.cpp",
            "line": 419,
            "description": "Returns a field's value.",
            "example": [
                "\n```\nvalue = feature.fields.get(0);\nvalue = feature.fields.get('field');```"
            ],
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "Feature name or index.",
                    "type": "String|number"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "Any"
            },
            "class": "gdal.FeatureFields"
        },
        {
            "file": "src/collections/feature_fields.cpp",
            "line": 456,
            "description": "Returns a list of field name.",
            "itemtype": "method",
            "name": "getNames",
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "List of field names.",
                "type": "String[]"
            },
            "class": "gdal.FeatureFields"
        },
        {
            "file": "src/collections/feature_fields.cpp",
            "line": 599,
            "description": "Parent feature",
            "readonly": "",
            "itemtype": "attribute",
            "name": "feature",
            "type": "{gdal.Feature}",
            "class": "gdal.FeatureFields"
        },
        {
            "file": "src/collections/gdal_drivers.cpp",
            "line": 75,
            "description": "Returns a driver with the specified name.\n\nNote: Prior to GDAL2.x there is a separate driver for vector VRTs and raster\nVRTs. Use `\"VRT:vector\"` to fetch the vector VRT driver and `\"VRT:raster\"` to\nfetch the raster VRT driver.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "index",
                    "description": "0-based index or driver name",
                    "type": "Number|string"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "gdal.Driver"
            },
            "class": "gdal.GDALDrivers"
        },
        {
            "file": "src/collections/gdal_drivers.cpp",
            "line": 128,
            "description": "Returns an array with the names of all the drivers registered with GDAL.",
            "itemtype": "method",
            "name": "getNames",
            "return": {
                "description": "",
                "type": "String[]"
            },
            "class": "gdal.GDALDrivers"
        },
        {
            "file": "src/collections/gdal_drivers.cpp",
            "line": 152,
            "description": "Returns the number of drivers registered with GDAL.",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.GDALDrivers"
        },
        {
            "file": "src/collections/geometry_collection_children.cpp",
            "line": 77,
            "description": "Returns the number of items.",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.GeometryCollectionChildren"
        },
        {
            "file": "src/collections/geometry_collection_children.cpp",
            "line": 92,
            "description": "Returns the geometry at the specified index.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "index",
                    "description": "0-based index",
                    "type": "Number"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.GeometryCollectionChildren"
        },
        {
            "file": "src/collections/geometry_collection_children.cpp",
            "line": 117,
            "description": "Removes the geometry at the specified index.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "index",
                    "description": "0-based index, -1 for all geometries",
                    "type": "Number"
                }
            ],
            "class": "gdal.GeometryCollectionChildren"
        },
        {
            "file": "src/collections/geometry_collection_children.cpp",
            "line": 141,
            "description": "Adds geometry(s) to the collection.",
            "example": [
                "\n```\n// one at a time:\ngeometryCollection.children.add(new Point(0,0,0));\n\n// add many at once:\ngeometryCollection.children.add([\n    new Point(1,0,0),\n    new Point(1,0,0)\n]);```"
            ],
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry|gdal.Geometry[]"
                }
            ],
            "class": "gdal.GeometryCollectionChildren"
        },
        {
            "file": "src/collections/group_arrays.cpp",
            "line": 41,
            "description": "Returns the array with the given name/index.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "String|number"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.MDArray"
            },
            "class": "gdal.GroupArrays"
        },
        {
            "file": "src/collections/group_arrays.cpp",
            "line": 49,
            "description": "Returns the array with the given name/index.\n{{{async}}}",
            "itemtype": "method",
            "name": "getAsync",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "String|number"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.MDArray>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.MDArray>"
            },
            "class": "gdal.GroupArrays"
        },
        {
            "file": "src/collections/group_arrays.cpp",
            "line": 60,
            "description": "Returns the number of arrays in the collection.",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.GroupArrays"
        },
        {
            "file": "src/collections/group_arrays.cpp",
            "line": 67,
            "description": "Returns the number of arrays in the collection.\n{{{async}}}",
            "itemtype": "method",
            "name": "countAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<number>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<number>"
            },
            "class": "gdal.GroupArrays"
        },
        {
            "file": "src/collections/group_arrays.cpp",
            "line": 77,
            "readonly": "",
            "itemtype": "attribute",
            "name": "names",
            "type": "{string[]}",
            "class": "gdal.GroupArrays"
        },
        {
            "file": "src/collections/group_arrays.cpp",
            "line": 83,
            "description": "Parent dataset",
            "readonly": "",
            "itemtype": "attribute",
            "name": "ds",
            "type": "{gdal.Dataset}",
            "class": "gdal.GroupArrays"
        },
        {
            "file": "src/collections/group_attributes.cpp",
            "line": 44,
            "description": "Returns the attribute with the given name/index.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String|number"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Attribute"
            },
            "class": "gdal.GroupAttributes"
        },
        {
            "file": "src/collections/group_attributes.cpp",
            "line": 52,
            "description": "Returns the attribute with the given name/index.\n{{{async}}}",
            "itemtype": "method",
            "name": "getAsync",
            "params": [
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String|number"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Attribute>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Attribute>"
            },
            "class": "gdal.GroupAttributes"
        },
        {
            "file": "src/collections/group_attributes.cpp",
            "line": 63,
            "description": "Returns the number of attributes in the collection.",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.GroupAttributes"
        },
        {
            "file": "src/collections/group_attributes.cpp",
            "line": 70,
            "description": "Returns the number of attributes in the collection.\n{{{async}}}",
            "itemtype": "method",
            "name": "countAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<number>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<number>"
            },
            "class": "gdal.GroupAttributes"
        },
        {
            "file": "src/collections/group_attributes.cpp",
            "line": 80,
            "readonly": "",
            "itemtype": "attribute",
            "name": "names",
            "type": "{string[]}",
            "class": "gdal.GroupAttributes"
        },
        {
            "file": "src/collections/group_attributes.cpp",
            "line": 86,
            "description": "Parent dataset",
            "readonly": "",
            "itemtype": "attribute",
            "name": "ds",
            "type": "{gdal.Dataset}",
            "class": "gdal.GroupAttributes"
        },
        {
            "file": "src/collections/group_dimensions.cpp",
            "line": 50,
            "description": "Returns the array with the given name/index.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "String|number"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Dimension"
            },
            "class": "gdal.GroupDimensions"
        },
        {
            "file": "src/collections/group_dimensions.cpp",
            "line": 58,
            "description": "Returns the array with the given name/index.\n{{{async}}}",
            "itemtype": "method",
            "name": "getAsync",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "String|number"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Dimension>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Dimension>"
            },
            "class": "gdal.GroupDimensions"
        },
        {
            "file": "src/collections/group_dimensions.cpp",
            "line": 69,
            "description": "Returns the number of dimensions in the collection.",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.GroupDimensions"
        },
        {
            "file": "src/collections/group_dimensions.cpp",
            "line": 76,
            "description": "Returns the number of dimensions in the collection.\n{{{async}}}",
            "itemtype": "method",
            "name": "countAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<number>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<number>"
            },
            "class": "gdal.GroupDimensions"
        },
        {
            "file": "src/collections/group_dimensions.cpp",
            "line": 86,
            "readonly": "",
            "itemtype": "attribute",
            "name": "names",
            "type": "{string[]}",
            "class": "gdal.GroupDimensions"
        },
        {
            "file": "src/collections/group_dimensions.cpp",
            "line": 92,
            "description": "Parent dataset",
            "readonly": "",
            "itemtype": "attribute",
            "name": "ds",
            "type": "{gdal.Dataset}",
            "class": "gdal.GroupDimensions"
        },
        {
            "file": "src/collections/group_groups.cpp",
            "line": 41,
            "description": "Returns the group with the given name/index.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "group",
                    "description": "",
                    "type": "String|number"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Group"
            },
            "class": "gdal.GroupGroups"
        },
        {
            "file": "src/collections/group_groups.cpp",
            "line": 49,
            "description": "Returns the group with the given name/index.\n{{{async}}}",
            "itemtype": "method",
            "name": "getAsync",
            "params": [
                {
                    "name": "group",
                    "description": "",
                    "type": "String|number"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Group>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Group>"
            },
            "class": "gdal.GroupGroups"
        },
        {
            "file": "src/collections/group_groups.cpp",
            "line": 60,
            "description": "Returns the number of groups in the collection.",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.GroupGroups"
        },
        {
            "file": "src/collections/group_groups.cpp",
            "line": 67,
            "description": "Returns the number of groups in the collection.\n{{{async}}}",
            "itemtype": "method",
            "name": "countAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<number>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<number>"
            },
            "class": "gdal.GroupGroups"
        },
        {
            "file": "src/collections/group_groups.cpp",
            "line": 77,
            "readonly": "",
            "itemtype": "attribute",
            "name": "names",
            "type": "{string[]}",
            "class": "gdal.GroupGroups"
        },
        {
            "file": "src/collections/group_groups.cpp",
            "line": 83,
            "description": "Parent dataset",
            "readonly": "",
            "itemtype": "attribute",
            "name": "ds",
            "type": "{gdal.Dataset}",
            "class": "gdal.GroupGroups"
        },
        {
            "file": "src/collections/layer_features.cpp",
            "line": 81,
            "description": "Fetch a feature by its identifier.\n\n**Important:** The `id` argument is not an index. In most cases it will be\nzero-based, but in some cases it will not. If iterating, it's best to use the\n`next()` method.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "id",
                    "description": "The feature ID of the feature to read.",
                    "type": "Number"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "gdal.Feature"
            },
            "class": "gdal.LayerFeatures"
        },
        {
            "file": "src/collections/layer_features.cpp",
            "line": 94,
            "description": "Fetch a feature by its identifier.\n\n**Important:** The `id` argument is not an index. In most cases it will be\nzero-based, but in some cases it will not. If iterating, it's best to use the\n`next()` method.\n{{{async}}}",
            "itemtype": "method",
            "name": "getAsync",
            "params": [
                {
                    "name": "id",
                    "description": "The feature ID of the feature to read.",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Feature>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "Promise<gdal.Feature>"
            },
            "class": "gdal.LayerFeatures"
        },
        {
            "file": "src/collections/layer_features.cpp",
            "line": 133,
            "description": "Resets the feature pointer used by `next()` and\nreturns the first feature in the layer.",
            "itemtype": "method",
            "name": "first",
            "return": {
                "description": "",
                "type": "gdal.Feature"
            },
            "class": "gdal.LayerFeatures"
        },
        {
            "file": "src/collections/layer_features.cpp",
            "line": 141,
            "description": "Resets the feature pointer used by `next()` and\nreturns the first feature in the layer.\n{{{async}}}",
            "itemtype": "method",
            "name": "firstAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Feature>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Feature>"
            },
            "class": "gdal.LayerFeatures"
        },
        {
            "file": "src/collections/layer_features.cpp",
            "line": 172,
            "description": "Returns the next feature in the layer. Returns null if no more features.",
            "example": [
                "\n```\nwhile (feature = layer.features.next()) { ... }```"
            ],
            "itemtype": "method",
            "name": "next",
            "return": {
                "description": "",
                "type": "gdal.Feature"
            },
            "class": "gdal.LayerFeatures"
        },
        {
            "file": "src/collections/layer_features.cpp",
            "line": 183,
            "description": "Returns the next feature in the layer. Returns null if no more features.\n{{{async}}}",
            "example": [
                "\n```\nwhile (feature = await layer.features.nextAsync()) { ... }```"
            ],
            "itemtype": "method",
            "name": "nextAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Feature>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Feature>"
            },
            "class": "gdal.LayerFeatures"
        },
        {
            "file": "src/collections/layer_features.cpp",
            "line": 216,
            "description": "Adds a feature to the layer. The feature should be created using the current\nlayer as the definition.",
            "example": [
                "\n```\nvar feature = new gdal.Feature(layer);\nfeature.setGeometry(new gdal.Point(0, 1));\nfeature.fields.set('name', 'somestring');\nlayer.features.add(feature);```"
            ],
            "itemtype": "method",
            "name": "add",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "feature",
                    "description": "",
                    "type": "gdal.Feature"
                }
            ],
            "class": "gdal.LayerFeatures"
        },
        {
            "file": "src/collections/layer_features.cpp",
            "line": 232,
            "description": "Adds a feature to the layer. The feature should be created using the current\nlayer as the definition.\n{{{async}}}",
            "example": [
                "\n```\nvar feature = new gdal.Feature(layer);\nfeature.setGeometry(new gdal.Point(0, 1));\nfeature.fields.set('name', 'somestring');\nawait layer.features.addAsync(feature);```"
            ],
            "itemtype": "method",
            "name": "addAsync",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "feature",
                    "description": "",
                    "type": "gdal.Feature"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<void>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<void>"
            },
            "class": "gdal.LayerFeatures"
        },
        {
            "file": "src/collections/layer_features.cpp",
            "line": 277,
            "description": "Returns the number of features in the layer.",
            "itemtype": "method",
            "name": "count",
            "params": [
                {
                    "name": "force",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "number of features in the layer.",
                "type": "Number"
            },
            "class": "gdal.LayerFeatures"
        },
        {
            "file": "src/collections/layer_features.cpp",
            "line": 285,
            "description": "Returns the number of features in the layer.\n{{{async}}}",
            "itemtype": "method",
            "name": "countAsync",
            "params": [
                {
                    "name": "force",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<number>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "number of features in the layer.",
                "type": "Promise<number>"
            },
            "class": "gdal.LayerFeatures"
        },
        {
            "file": "src/collections/layer_features.cpp",
            "line": 327,
            "description": "Sets a feature in the layer.",
            "itemtype": "method",
            "name": "set",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "feature",
                    "description": "",
                    "type": "gdal.Feature"
                }
            ],
            "class": "gdal.LayerFeatures"
        },
        {
            "file": "src/collections/layer_features.cpp",
            "line": 335,
            "description": "Sets a feature in the layer.",
            "itemtype": "method",
            "name": "set",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "feature",
                    "description": "",
                    "type": "gdal.Feature"
                }
            ],
            "class": "gdal.LayerFeatures"
        },
        {
            "file": "src/collections/layer_features.cpp",
            "line": 344,
            "description": "Sets a feature in the layer.\n{{{async}}}",
            "itemtype": "method",
            "name": "setAsync",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "feature",
                    "description": "",
                    "type": "gdal.Feature"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Feature>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Feature>"
            },
            "class": "gdal.LayerFeatures"
        },
        {
            "file": "src/collections/layer_features.cpp",
            "line": 413,
            "description": "Removes a feature from the layer.",
            "itemtype": "method",
            "name": "remove",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "gdal.LayerFeatures"
        },
        {
            "file": "src/collections/layer_features.cpp",
            "line": 421,
            "description": "Removes a feature from the layer.\n{{{async}}}",
            "itemtype": "method",
            "name": "removeAsync",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<void>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<void>"
            },
            "class": "gdal.LayerFeatures"
        },
        {
            "file": "src/collections/layer_features.cpp",
            "line": 459,
            "description": "Parent layer",
            "itemtype": "attribute",
            "name": "layer",
            "type": "{gdal.Layer}",
            "class": "gdal.LayerFeatures"
        },
        {
            "file": "src/collections/layer_fields.cpp",
            "line": 79,
            "description": "Returns the number of fields.",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.LayerFields"
        },
        {
            "file": "src/collections/layer_fields.cpp",
            "line": 104,
            "description": "Find the index of field in the layer.",
            "itemtype": "method",
            "name": "indexOf",
            "params": [
                {
                    "name": "field",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Field index, or -1 if the field doesn't exist",
                "type": "Number"
            },
            "class": "gdal.LayerFields"
        },
        {
            "file": "src/collections/layer_fields.cpp",
            "line": 133,
            "description": "Returns a field definition.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "field",
                    "description": "Field name or index (0-based)",
                    "type": "String|number"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.FieldDefn"
            },
            "class": "gdal.LayerFields"
        },
        {
            "file": "src/collections/layer_fields.cpp",
            "line": 173,
            "description": "Returns a list of field names.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "getNames",
            "return": {
                "description": "List of strings.",
                "type": "String[]"
            },
            "class": "gdal.LayerFields"
        },
        {
            "file": "src/collections/layer_fields.cpp",
            "line": 207,
            "description": "Removes a field.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "field",
                    "description": "Field name or index (0-based)",
                    "type": "String|number"
                }
            ],
            "class": "gdal.LayerFields"
        },
        {
            "file": "src/collections/layer_fields.cpp",
            "line": 247,
            "description": "Adds field(s).",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "defs",
                    "description": "A field definition, or array of field\ndefinitions.",
                    "type": "gdal.FieldDefn|gdal.FieldDefn[]"
                },
                {
                    "name": "approx",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "class": "gdal.LayerFields"
        },
        {
            "file": "src/collections/layer_fields.cpp",
            "line": 307,
            "description": "Reorders fields.",
            "example": [
                "\n```\n// reverse field order\nlayer.fields.reorder([2,1,0]);```"
            ],
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "reorder",
            "params": [
                {
                    "name": "map",
                    "description": "An array of new indexes (integers)",
                    "type": "Number[]"
                }
            ],
            "class": "gdal.LayerFields"
        },
        {
            "file": "src/collections/layer_fields.cpp",
            "line": 377,
            "description": "Parent layer",
            "readonly": "",
            "itemtype": "attribute",
            "name": "layer",
            "type": "{gdal.Layer}",
            "class": "gdal.LayerFields"
        },
        {
            "file": "src/collections/linestring_points.cpp",
            "line": 80,
            "description": "Returns the number of points that are part of the line string.",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.LineStringPoints"
        },
        {
            "file": "src/collections/linestring_points.cpp",
            "line": 95,
            "description": "Reverses the order of all the points.",
            "itemtype": "method",
            "name": "reverse",
            "class": "gdal.LineStringPoints"
        },
        {
            "file": "src/collections/linestring_points.cpp",
            "line": 111,
            "description": "Adjusts the number of points that make up the line string.",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "count",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "gdal.LineStringPoints"
        },
        {
            "file": "src/collections/linestring_points.cpp",
            "line": 130,
            "description": "Returns the point at the specified index.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "index",
                    "description": "0-based index",
                    "type": "Number"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "gdal.Point"
            },
            "class": "gdal.LineStringPoints"
        },
        {
            "file": "src/collections/linestring_points.cpp",
            "line": 159,
            "description": "Sets the point at the specified index.",
            "example": [
                "\n```\nlineString.points.set(0, new gdal.Point(1, 2));```"
            ],
            "itemtype": "method",
            "name": "set",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "index",
                    "description": "0-based index",
                    "type": "Number"
                },
                {
                    "name": "point",
                    "description": "",
                    "type": "gdal.Point|xyz"
                }
            ],
            "class": "gdal.LineStringPoints"
        },
        {
            "file": "src/collections/linestring_points.cpp",
            "line": 172,
            "itemtype": "method",
            "name": "set",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "index",
                    "description": "0-based index",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "gdal.LineStringPoints"
        },
        {
            "file": "src/collections/linestring_points.cpp",
            "line": 255,
            "description": "Adds point(s) to the line string. Also accepts any object with an x and y\nproperty.",
            "example": [
                "\n```\nlineString.points.add(new gdal.Point(1, 2));\nlineString.points.add([\n    new gdal.Point(1, 2)\n    new gdal.Point(3, 4)\n]);```"
            ],
            "itemtype": "method",
            "name": "add",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "points",
                    "description": "",
                    "type": "gdal.Point|xyz|(gdal.Point|xyz)[]"
                }
            ],
            "class": "gdal.LineStringPoints"
        },
        {
            "file": "src/collections/linestring_points.cpp",
            "line": 272,
            "itemtype": "method",
            "name": "add",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "gdal.LineStringPoints"
        },
        {
            "file": "src/collections/polygon_rings.cpp",
            "line": 76,
            "description": "Returns the number of rings that exist in the collection.",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.PolygonRings"
        },
        {
            "file": "src/collections/polygon_rings.cpp",
            "line": 94,
            "description": "Returns the ring at the specified index. The ring\nat index `0` will always be the polygon's exterior ring.",
            "example": [
                "\n```\nvar exterior = polygon.rings.get(0);\nvar interior = polygon.rings.get(1);```"
            ],
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "gdal.LinearRing"
            },
            "class": "gdal.PolygonRings"
        },
        {
            "file": "src/collections/polygon_rings.cpp",
            "line": 130,
            "description": "Adds a ring to the collection.",
            "example": [
                "\n```\nvar ring1 = new gdal.LinearRing();\nring1.points.add(0,0);\nring1.points.add(1,0);\nring1.points.add(1,1);\nring1.points.add(0,1);\nring1.points.add(0,0);\n\n// one at a time:\npolygon.rings.add(ring1);\n\n// many at once:\npolygon.rings.add([ring1, ...]);```"
            ],
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "rings",
                    "description": "",
                    "type": "gdal.LinearRing|gdal.LinearRing[]"
                }
            ],
            "class": "gdal.PolygonRings"
        },
        {
            "file": "src/collections/rasterband_overviews.cpp",
            "line": 75,
            "description": "Fetches the overview at the provided index.",
            "itemtype": "method",
            "name": "get",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "index",
                    "description": "0-based index",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.RasterBand"
            },
            "class": "gdal.RasterBandOverviews"
        },
        {
            "file": "src/collections/rasterband_overviews.cpp",
            "line": 84,
            "description": "Fetches the overview at the provided index.\n{{{async}}}",
            "itemtype": "method",
            "name": "getAsync",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "index",
                    "description": "0-based index",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.RasterBand>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.RasterBand>"
            },
            "class": "gdal.RasterBandOverviews"
        },
        {
            "file": "src/collections/rasterband_overviews.cpp",
            "line": 118,
            "description": "Fetch best sampling overview.\n\nReturns the most reduced overview of the given band that still satisfies the\ndesired number of samples. This function can be used with zero as the number\nof desired samples to fetch the most reduced overview. The same band as was\npassed in will be returned if it has not overviews, or if none of the\noverviews have enough samples.",
            "itemtype": "method",
            "name": "getBySampleCount",
            "params": [
                {
                    "name": "samples",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.RasterBand"
            },
            "class": "gdal.RasterBandOverviews"
        },
        {
            "file": "src/collections/rasterband_overviews.cpp",
            "line": 132,
            "description": "Fetch best sampling overview.\n{{{async}}}\n\nReturns the most reduced overview of the given band that still satisfies the\ndesired number of samples. This function can be used with zero as the number\nof desired samples to fetch the most reduced overview. The same band as was\npassed in will be returned if it has not overviews, or if none of the\noverviews have enough samples.",
            "itemtype": "method",
            "name": "getBySampleCountAsync",
            "params": [
                {
                    "name": "samples",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.RasterBand>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.RasterBand>"
            },
            "class": "gdal.RasterBandOverviews"
        },
        {
            "file": "src/collections/rasterband_overviews.cpp",
            "line": 170,
            "description": "Returns the number of overviews.",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.RasterBandOverviews"
        },
        {
            "file": "src/collections/rasterband_overviews.cpp",
            "line": 177,
            "description": "Returns the number of overviews.\n{{{async}}}",
            "itemtype": "method",
            "name": "countAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<number>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<number>"
            },
            "class": "gdal.RasterBandOverviews"
        },
        {
            "file": "src/collections/rasterband_pixels.cpp",
            "line": 105,
            "description": "Returns the value at the x, y coordinate.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.RasterBandPixels"
        },
        {
            "file": "src/collections/rasterband_pixels.cpp",
            "line": 115,
            "description": "Returns the value at the x, y coordinate.\n{{{async}}}",
            "itemtype": "method",
            "name": "getAsync",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<number>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<number>"
            },
            "class": "gdal.RasterBandPixels"
        },
        {
            "file": "src/collections/rasterband_pixels.cpp",
            "line": 151,
            "description": "Sets the value at the x, y coordinate.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "gdal.RasterBandPixels"
        },
        {
            "file": "src/collections/rasterband_pixels.cpp",
            "line": 160,
            "description": "Sets the value at the x, y coordinate.\n{{{async}}}",
            "itemtype": "method",
            "name": "setAsync",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<void>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<void>"
            },
            "class": "gdal.RasterBandPixels"
        },
        {
            "file": "src/collections/rasterband_pixels.cpp",
            "line": 250,
            "description": "Reads a region of pixels.",
            "itemtype": "method",
            "name": "read",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "The TypedArray (https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView#Typed_array_subclasses) to put the data in. A new array is created if not given.",
                    "type": "TypedArray",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "ReadOptions",
                    "optional": true,
                    "props": [
                        {
                            "name": "buffer_width",
                            "description": "",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "x_size"
                        },
                        {
                            "name": "buffer_height",
                            "description": "",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "y_size"
                        },
                        {
                            "name": "data_type",
                            "description": "See {{#crossLink \"Constants (GDT)\"}}GDT constants{{/crossLink}}.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "pixel_space",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "line_space",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "resampling",
                            "description": "Resampling algorithm ({{#crossLink \"Constants (GRA)\"}}available options{{/crossLink}})",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "progress_cb",
                            "description": "{{{progress_cb}}}",
                            "type": "ProgressCb",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "A TypedArray (https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView#Typed_array_subclasses) of values.",
                "type": "TypedArray"
            },
            "class": "gdal.RasterBandPixels"
        },
        {
            "file": "src/collections/rasterband_pixels.cpp",
            "line": 271,
            "description": "Asynchronously reads a region of pixels.\n{{{async}}}",
            "itemtype": "method",
            "name": "readAsync",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "the width",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "The TypedArray (https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView#Typed_array_subclasses) to put the data in. A new array is created if not given.",
                    "type": "TypedArray",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "ReadOptions",
                    "optional": true,
                    "props": [
                        {
                            "name": "buffer_width",
                            "description": "",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "x_size"
                        },
                        {
                            "name": "buffer_height",
                            "description": "",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "y_size"
                        },
                        {
                            "name": "data_type",
                            "description": "See {{#crossLink \"Constants (GDT)\"}}GDT constants{{/crossLink}}.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "pixel_space",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "line_space",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "resampling",
                            "description": "Resampling algorithm ({{#crossLink \"Constants (GRA)\"}}available options{{/crossLink}})",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "progress_cb",
                            "description": "{{{progress_cb}}}",
                            "type": "ProgressCb",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<TypedArray>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "A TypedArray (https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView#Typed_array_subclasses) of values.",
                "type": "Promise<TypedArray>"
            },
            "class": "gdal.RasterBandPixels"
        },
        {
            "file": "src/collections/rasterband_pixels.cpp",
            "line": 399,
            "description": "Writes a region of pixels.",
            "itemtype": "method",
            "name": "write",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "The TypedArray (https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView#Typed_array_subclasses) to write to the band.",
                    "type": "TypedArray",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "WriteOptions",
                    "optional": true,
                    "props": [
                        {
                            "name": "buffer_width",
                            "description": "",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "x_size"
                        },
                        {
                            "name": "buffer_height",
                            "description": "",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "y_size"
                        },
                        {
                            "name": "pixel_space",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "line_space",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "progress_cb",
                            "description": "{{{progress_cb}}}",
                            "type": "ProgressCb",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "gdal.RasterBandPixels"
        },
        {
            "file": "src/collections/rasterband_pixels.cpp",
            "line": 417,
            "description": "Asynchronously writes a region of pixels.\n{{{async}}}",
            "itemtype": "method",
            "name": "writeAsync",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "The TypedArray (https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView#Typed_array_subclasses) to write to the band.",
                    "type": "TypedArray",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "WriteOptions",
                    "optional": true,
                    "props": [
                        {
                            "name": "buffer_width",
                            "description": "",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "x_size"
                        },
                        {
                            "name": "buffer_height",
                            "description": "",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "y_size"
                        },
                        {
                            "name": "pixel_space",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "line_space",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "progress_cb",
                            "description": "{{{progress_cb}}}",
                            "type": "ProgressCb",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<void>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<void>"
            },
            "class": "gdal.RasterBandPixels"
        },
        {
            "file": "src/collections/rasterband_pixels.cpp",
            "line": 520,
            "description": "Reads a block of pixels.",
            "itemtype": "method",
            "name": "readBlock",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "The TypedArray (https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView#Typed_array_subclasses) to put the data in. A new array is created if not given.",
                    "type": "TypedArray",
                    "optional": true
                }
            ],
            "return": {
                "description": "A TypedArray (https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView#Typed_array_subclasses) of values.",
                "type": "TypedArray"
            },
            "class": "gdal.RasterBandPixels"
        },
        {
            "file": "src/collections/rasterband_pixels.cpp",
            "line": 531,
            "description": "Reads a block of pixels.\n{{{async}}}",
            "itemtype": "method",
            "name": "readBlockAsync",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "The TypedArray (https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView#Typed_array_subclasses) to put the data in. A new array is created if not given.",
                    "type": "TypedArray",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<TypedArray>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "A TypedArray (https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView#Typed_array_subclasses) of values.",
                "type": "Promise<TypedArray>"
            },
            "class": "gdal.RasterBandPixels"
        },
        {
            "file": "src/collections/rasterband_pixels.cpp",
            "line": 591,
            "description": "Writes a block of pixels.",
            "itemtype": "method",
            "name": "writeBlock",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "The TypedArray (https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView#Typed_array_subclasses) of values to write to the band.",
                    "type": "TypedArray"
                }
            ],
            "class": "gdal.RasterBandPixels"
        },
        {
            "file": "src/collections/rasterband_pixels.cpp",
            "line": 601,
            "description": "Writes a block of pixels.\n{{{async}}}",
            "itemtype": "method",
            "name": "writeBlockAsync",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "The TypedArray (https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView#Typed_array_subclasses) of values to write to the band.",
                    "type": "TypedArray"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<void>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<void>"
            },
            "class": "gdal.RasterBandPixels"
        },
        {
            "file": "src/collections/rasterband_pixels.cpp",
            "line": 648,
            "description": "Clamp the block size for a given block offset.\nHandles partial blocks at the edges of the raster and returns the true number of pixels.",
            "itemtype": "method",
            "name": "clampBlock",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A size object.",
                "type": "Xyz"
            },
            "class": "gdal.RasterBandPixels"
        },
        {
            "file": "src/collections/rasterband_pixels.cpp",
            "line": 659,
            "description": "Clamp the block size for a given block offset.\nHandles partial blocks at the edges of the raster and returns the true number of pixels.\n{{{async}}}",
            "itemtype": "method",
            "name": "clampBlockAsync",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<xyz>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "A size object.",
                "type": "Promise<xyz>"
            },
            "class": "gdal.RasterBandPixels"
        },
        {
            "file": "src/collections/rasterband_pixels.cpp",
            "line": 704,
            "description": "Parent raster band",
            "readonly": "",
            "itemtype": "attribute",
            "name": "band",
            "type": "{gdal.RasterBand}",
            "class": "gdal.RasterBandPixels"
        },
        {
            "file": "src/geometry/gdal_compoundcurve.cpp",
            "line": 53,
            "description": "Points that make up the compound curve.",
            "itemtype": "attribute",
            "name": "curves",
            "type": "{gdal.CompoundCurveCurves}",
            "class": "gdal.CompoundCurve"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 177,
            "description": "Closes any un-closed rings.",
            "itemtype": "method",
            "name": "closeRings",
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 183,
            "description": "Closes any un-closed rings.\n{{{async}}}",
            "itemtype": "method",
            "name": "closeRingsAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<void>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<void>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 194,
            "description": "Clears the geometry.",
            "itemtype": "method",
            "name": "empty",
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 200,
            "description": "Clears the geometry.\n{{{async}}}",
            "itemtype": "method",
            "name": "emptyAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<void>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<void>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 211,
            "description": "Swaps x, y coordinates.",
            "itemtype": "method",
            "name": "swapXY",
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 217,
            "description": "Swaps x, y coordinates.\n{{{async}}}",
            "itemtype": "method",
            "name": "swapXYAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<void>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<void>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 228,
            "description": "Determines if the geometry is empty.",
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 235,
            "description": "Determines if the geometry is empty.\n{{{async}}}",
            "itemtype": "method",
            "name": "isEmptyAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<boolean>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<boolean>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 246,
            "description": "Determines if the geometry is valid.",
            "itemtype": "method",
            "name": "isValid",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 253,
            "description": "Determines if the geometry is valid.\n{{{async}}}",
            "itemtype": "method",
            "name": "isValidAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<boolean>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<boolean>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 264,
            "description": "Determines if the geometry is simple.",
            "itemtype": "method",
            "name": "isSimple",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 271,
            "description": "Determines if the geometry is simple.\n{{{async}}}",
            "itemtype": "method",
            "name": "isSimpleAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<boolean>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<boolean>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 282,
            "description": "Determines if the geometry is a ring.",
            "itemtype": "method",
            "name": "isRing",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 289,
            "description": "Determines if the geometry is a ring.\n{{{async}}}",
            "itemtype": "method",
            "name": "isRingAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<boolean>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<boolean>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 300,
            "description": "Determines if the two geometries intersect.",
            "itemtype": "method",
            "name": "intersects",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 308,
            "description": "Determines if the two geometries intersect.\n{{{async}}}",
            "itemtype": "method",
            "name": "intersectsAsync",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<boolean>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<boolean>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 321,
            "description": "Determines if the two geometries equal each other.",
            "itemtype": "method",
            "name": "equals",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 329,
            "description": "Determines if the two geometries equal each other.\n{{{async}}}",
            "itemtype": "method",
            "name": "equalsAsync",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<boolean>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<boolean>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 342,
            "description": "Determines if the two geometries are disjoint.",
            "itemtype": "method",
            "name": "disjoint",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 350,
            "description": "Determines if the two geometries are disjoint.\n{{{async}}}",
            "itemtype": "method",
            "name": "disjointAsync",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<boolean>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<boolean>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 363,
            "description": "Determines if the two geometries touch.",
            "itemtype": "method",
            "name": "touches",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 371,
            "description": "Determines if the two geometries touch.\n{{{async}}}",
            "itemtype": "method",
            "name": "touchesAsync",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<boolean>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<boolean>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 384,
            "description": "Determines if the two geometries cross.",
            "itemtype": "method",
            "name": "crosses",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 392,
            "description": "Determines if the two geometries cross.\n{{{async}}}",
            "itemtype": "method",
            "name": "crossesAsync",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<boolean>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<boolean>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 405,
            "description": "Determines if the current geometry is within the provided geometry.",
            "itemtype": "method",
            "name": "within",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 413,
            "description": "Determines if the current geometry is within the provided geometry.\n{{{async}}}",
            "itemtype": "method",
            "name": "withinAsync",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<boolean>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<boolean>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 426,
            "description": "Determines if the current geometry contains the provided geometry.",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 434,
            "description": "Determines if the current geometry contains the provided geometry.\n{{{async}}}",
            "itemtype": "method",
            "name": "containsAsync",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<boolean>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<boolean>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 447,
            "description": "Determines if the current geometry overlaps the provided geometry.",
            "itemtype": "method",
            "name": "overlaps",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 455,
            "description": "Determines if the current geometry overlaps the provided geometry.\n{{{async}}}",
            "itemtype": "method",
            "name": "overlapsAsync",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<boolean>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<boolean>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 468,
            "description": "Computes the distance between the two geometries.",
            "itemtype": "method",
            "name": "distance",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 476,
            "description": "Computes the distance between the two geometries.\n{{{async}}}",
            "itemtype": "method",
            "name": "distanceAsync",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<number>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<number>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 489,
            "description": "Modify the geometry such it has no segment longer then the given distance.",
            "itemtype": "method",
            "name": "segmentize",
            "params": [
                {
                    "name": "segment_length",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 498,
            "description": "Apply arbitrary coordinate transformation to the geometry.\n\nThis method will transform the coordinates of a geometry from their current\nspatial reference system to a new target spatial reference system. Normally\nthis means reprojecting the vectors, but it could include datum shifts,\nand changes of units.\n\nNote that this method does not require that the geometry already have a\nspatial reference system. It will be assumed that they can be treated as\nhaving the source spatial reference system of the {{#crossLink\n\"gdal.CoordinateTransformation\"}}CoordinateTransformation{{/crossLink}}\nobject, and the actual SRS of the geometry will be ignored.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "transform",
            "params": [
                {
                    "name": "transformation",
                    "description": "",
                    "type": "gdal.CoordinateTransformation"
                }
            ],
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 517,
            "description": "Apply arbitrary coordinate transformation to the geometry.\n{{{async}}}",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "transformAsync",
            "params": [
                {
                    "name": "transformation",
                    "description": "",
                    "type": "gdal.CoordinateTransformation"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<void>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<void>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 531,
            "description": "Transforms the geometry to match the provided {{#crossLink\n\"gdal.SpatialReference\"}}SpatialReference{{/crossLink}}.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "transformTo",
            "params": [
                {
                    "name": "srs",
                    "description": "",
                    "type": "gdal.SpatialReference"
                }
            ],
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 540,
            "description": "Transforms the geometry to match the provided {{#crossLink\n\"gdal.SpatialReference\"}}SpatialReference{{/crossLink}}.\n{{{async}}}",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "transformToAsync",
            "params": [
                {
                    "name": "srs",
                    "description": "",
                    "type": "gdal.SpatialReference"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<void>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<void>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 555,
            "description": "Clones the instance.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 566,
            "description": "Compute convex hull.",
            "itemtype": "method",
            "name": "convexHull",
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 574,
            "description": "Compute convex hull.\n{{{async}}}",
            "itemtype": "method",
            "name": "convexHullAsync",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Geometry>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Geometry>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 598,
            "description": "Compute boundary.",
            "itemtype": "method",
            "name": "boundary",
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 606,
            "description": "Compute boundary.\n{{{async}}}",
            "itemtype": "method",
            "name": "boundaryAsync",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Geometry>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Geometry>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 630,
            "description": "Compute intersection with another geometry.",
            "itemtype": "method",
            "name": "intersection",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 639,
            "description": "Compute intersection with another geometry.\n{{{async}}}",
            "itemtype": "method",
            "name": "intersectionAsync",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Geometry>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "Promise<gdal.Geometry>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 670,
            "description": "Compute the union of this geometry with another.",
            "itemtype": "method",
            "name": "union",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 679,
            "description": "Compute the union of this geometry with another.\n{{{async}}}",
            "itemtype": "method",
            "name": "unionAsync",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Geometry>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "Promise<gdal.Geometry>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 710,
            "description": "Compute the difference of this geometry with another.",
            "itemtype": "method",
            "name": "difference",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 719,
            "description": "Compute the difference of this geometry with another.\n{{{async}}}",
            "itemtype": "method",
            "name": "differenceAsync",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Geometry>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "Promise<gdal.Geometry>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 750,
            "description": "Computes the symmetric difference of this geometry and the second geometry.",
            "itemtype": "method",
            "name": "symDifference",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 759,
            "description": "Computes the symmetric difference of this geometry and the second geometry.\n{{{async}}}",
            "itemtype": "method",
            "name": "symDifferenceAsync",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Geometry>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "Promise<gdal.Geometry>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 790,
            "description": "Reduces the geometry complexity.",
            "itemtype": "method",
            "name": "simplify",
            "params": [
                {
                    "name": "tolerance",
                    "description": "",
                    "type": "Number"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 799,
            "description": "Reduces the geometry complexity.\n{{{async}}}",
            "itemtype": "method",
            "name": "simplifyAsync",
            "params": [
                {
                    "name": "tolerance",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Geometry>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "Promise<gdal.Geometry>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 829,
            "description": "Reduces the geometry complexity while preserving the topology.",
            "itemtype": "method",
            "name": "simplifyPreserveTopology",
            "params": [
                {
                    "name": "tolerance",
                    "description": "",
                    "type": "Number"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 838,
            "description": "Reduces the geometry complexity while preserving the topology.\n{{{async}}}",
            "itemtype": "method",
            "name": "simplifyPreserveTopologyAsync",
            "params": [
                {
                    "name": "tolerance",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Geometry>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "Promise<gdal.Geometry>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 868,
            "description": "Buffers the geometry by the given distance.",
            "itemtype": "method",
            "name": "buffer",
            "params": [
                {
                    "name": "distance",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "segments",
                    "description": "",
                    "type": "Number"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 878,
            "description": "Buffers the geometry by the given distance.\n{{{async}}}",
            "itemtype": "method",
            "name": "bufferAsync",
            "params": [
                {
                    "name": "distance",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "segments",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Geometry>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "Promise<gdal.Geometry>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 914,
            "description": "Attempts to make an invalid geometry valid without losing vertices.\nRequires GDAL 3.0",
            "itemtype": "method",
            "name": "makeValid",
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 923,
            "description": "Attempts to make an invalid geometry valid without losing vertices.\nRequires GDAL 3.0\n{{{async}}}",
            "itemtype": "method",
            "name": "makeValidAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Geometry>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Geometry>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 949,
            "description": "Convert a geometry into well known text format.",
            "itemtype": "method",
            "name": "toWKT",
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 957,
            "description": "Convert a geometry into well known text format.\n{{{async}}}",
            "itemtype": "method",
            "name": "toWKTAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<string>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "Promise<string>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 995,
            "description": "Convert a geometry into well known binary format.",
            "itemtype": "method",
            "name": "toWKB",
            "params": [
                {
                    "name": "byte_order",
                    "description": "({{#crossLink \"Constants\n(wkbByteOrder)\"}}see options{{/crossLink}})",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"MSB\""
                },
                {
                    "name": "variant",
                    "description": "({{#crossLink \"Constants (wkbVariant)\"}}see\noptions{{/crossLink}})",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"OGC\""
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "Buffer"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1007,
            "description": "Convert a geometry into well known binary format.\n{{{async}}}",
            "itemtype": "method",
            "name": "toWKBAsync",
            "params": [
                {
                    "name": "byte_order",
                    "description": "({{#crossLink \"Constants\n(wkbByteOrder)\"}}see options{{/crossLink}})",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"MSB\""
                },
                {
                    "name": "variant",
                    "description": "({{#crossLink \"Constants (wkbVariant)\"}}see\noptions{{/crossLink}})",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"OGC\""
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<Buffer>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "Promise<Buffer>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1094,
            "description": "Convert a geometry into KML format.",
            "itemtype": "method",
            "name": "toKML",
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1102,
            "description": "Convert a geometry into KML format.\n{{{async}}}",
            "itemtype": "method",
            "name": "toKMLAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<string>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "Promise<string>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1138,
            "description": "Convert a geometry into GML format.",
            "itemtype": "method",
            "name": "toGML",
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1146,
            "description": "Convert a geometry into GML format.\n{{{async}}}",
            "itemtype": "method",
            "name": "toGMLAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<string>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "Promise<string>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1182,
            "description": "Convert a geometry into JSON format.",
            "itemtype": "method",
            "name": "toJSON",
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1190,
            "description": "Convert a geometry into JSON format.\n{{{async}}}",
            "itemtype": "method",
            "name": "toJSONAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<string>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "Promise<string>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1226,
            "description": "Compute the centroid of the geometry.",
            "itemtype": "method",
            "name": "centroid",
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "gdal.Point"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1234,
            "description": "Compute the centroid of the geometry.\n{{{async}}}",
            "itemtype": "method",
            "name": "centroidAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Geometry>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "Promise<gdal.Geometry>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1270,
            "description": "Computes the bounding box (envelope).",
            "itemtype": "method",
            "name": "getEnvelope",
            "return": {
                "description": "Bounding envelope",
                "type": "gdal.Envelope"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1277,
            "description": "Computes the bounding box (envelope).\n{{{async}}}",
            "itemtype": "method",
            "name": "getEnvelopeAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Envelope>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Envelope>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1317,
            "description": "Computes the 3D bounding box (envelope).",
            "itemtype": "method",
            "name": "getEnvelope3D",
            "return": {
                "description": "Bounding envelope",
                "type": "gdal.Envelope3D"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1324,
            "description": "Computes the 3D bounding box (envelope).\n{{{async}}}",
            "itemtype": "method",
            "name": "getEnvelope3DAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Geometry>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Geometry>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1367,
            "description": "Convert geometry to strictly 2D",
            "itemtype": "method",
            "name": "flattenTo2D",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1374,
            "description": "Convert geometry to strictly 2D\n{{{async}}}",
            "itemtype": "method",
            "name": "flattenTo2DAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<void>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<void>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1387,
            "description": "Creates a Geometry from a WKT string.",
            "static": 1,
            "itemtype": "method",
            "name": "fromWKT",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "wkt",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "srs",
                    "description": "",
                    "type": "gdal.SpatialReference",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1398,
            "description": "Creates a Geometry from a WKT string.\n{{{async}}}",
            "static": 1,
            "itemtype": "method",
            "name": "fromWKTAsync",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "wkt",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "srs",
                    "description": "",
                    "type": "gdal.SpatialReference",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Geometry>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Geometry>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1435,
            "description": "Creates a Geometry from a WKB buffer.",
            "static": 1,
            "itemtype": "method",
            "name": "fromWKB",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "wkb",
                    "description": "",
                    "type": "Buffer"
                },
                {
                    "name": "srs",
                    "description": "",
                    "type": "gdal.SpatialReference",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1446,
            "description": "Creates a Geometry from a WKB buffer.\n{{{async}}}",
            "static": 1,
            "itemtype": "method",
            "name": "fromWKBAsync",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "wkb",
                    "description": "",
                    "type": "Buffer"
                },
                {
                    "name": "srs",
                    "description": "",
                    "type": "gdal.SpatialReference",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Geometry>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Geometry>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1492,
            "description": "Creates a Geometry from a GeoJSON object fragment.\nThe async version depends on V8 for object serialization and this part is not parallelizable.\nV8 objects cannot be accessed outside of the main thread. This function should not be used\nfor importing objects of more than few tens of Kbytes when low latency is needed. If you need\nto import very large GeoJSON geometries in server code, use the much faster and completely\nparallel fromGeoJonBuffer(Async)",
            "static": 1,
            "itemtype": "method",
            "name": "fromGeoJson",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "geojson",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1507,
            "description": "Creates a Geometry from a GeoJSON object fragment.\nThe async version depends on V8 for object serialization and this part is not parallelizable.\nV8 objects cannot be accessed outside of the main thread. This function should not be used\nfor importing objects of more than few tens of Kbytes when low latency is needed. If you need\nto import very large GeoJSON geometries in server code, use the much faster and completely\nparallel fromGeoJonBuffer(Async)\n{{{async}}}",
            "static": 1,
            "itemtype": "method",
            "name": "fromGeoJsonAsync",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "geojson",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Geometry>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Geometry>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1556,
            "description": "Creates a Geometry from a buffer containing a GeoJSON fragment in UT8 format.",
            "static": 1,
            "itemtype": "method",
            "name": "fromGeoJsonBuffer",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "geojson",
                    "description": "",
                    "type": "Buffer"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1566,
            "description": "Creates a Geometry from a buffer containing a GeoJSON fragment in UT8 format.\n{{{async}}}",
            "static": 1,
            "itemtype": "method",
            "name": "fromGeoJsonBufferAsync",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "geojson",
                    "description": "",
                    "type": "Buffer"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Geometry>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Geometry>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1615,
            "description": "Creates an empty Geometry from a WKB type.",
            "static": 1,
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "type",
                    "description": "WKB geometry type ({{#crossLink \"Constants\n(wkbGeometryType)\"}}available options{{/crossLink}})",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1632,
            "itemtype": "attribute",
            "name": "srs",
            "type": "{gdal.SpatialReference|null}",
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1656,
            "readonly": "",
            "itemtype": "attribute",
            "name": "name",
            "type": "{string}",
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1666,
            "description": "See {{#crossLink \"Constants\n(wkbGeometryType)\"}}wkbGeometryTypes{{/crossLink}}.",
            "readonly": "",
            "itemtype": "attribute",
            "name": "wkbType",
            "type": "{number}",
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1678,
            "readonly": "",
            "itemtype": "attribute",
            "name": "wkbSize",
            "type": "{number}",
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1688,
            "readonly": "",
            "itemtype": "attribute",
            "name": "dimension",
            "type": "{number}",
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1698,
            "itemtype": "attribute",
            "name": "coordinateDimension",
            "type": "{number}",
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1746,
            "description": "Returns the Geometry subclass that matches the\ngiven WKB geometry type.",
            "static": 1,
            "itemtype": "method",
            "name": "getConstructor",
            "params": [
                {
                    "name": "type",
                    "description": "WKB geometry type ({{#crossLink \"Constants\n(wkbGeometryType)\"}}available options{{/crossLink}})",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1762,
            "description": "Returns the Geometry subclass name that matches the\ngiven WKB geometry type.",
            "static": 1,
            "itemtype": "method",
            "name": "getName",
            "params": [
                {
                    "name": "type",
                    "description": "WKB geometry type ({{#crossLink \"Constants\n(wkbGeometryType)\"}}available options{{/crossLink}})",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometrycollection.cpp",
            "line": 43,
            "description": "Computes the combined area of the geometries.",
            "itemtype": "method",
            "name": "getArea",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.GeometryCollection"
        },
        {
            "file": "src/geometry/gdal_geometrycollection.cpp",
            "line": 51,
            "description": "Compute the length of a multicurve.",
            "itemtype": "method",
            "name": "getLength",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.GeometryCollection"
        },
        {
            "file": "src/geometry/gdal_geometrycollection.cpp",
            "line": 59,
            "description": "All geometries represented by this collection.",
            "itemtype": "attribute",
            "name": "children",
            "type": "{gdal.GeometryCollectionChildren}",
            "class": "gdal.GeometryCollection"
        },
        {
            "file": "src/geometry/gdal_linearring.cpp",
            "line": 66,
            "description": "Computes the area enclosed by the ring.",
            "itemtype": "method",
            "name": "getArea",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.LinearRing"
        },
        {
            "file": "src/geometry/gdal_multicurve.cpp",
            "line": 40,
            "description": "Converts it to a polygon.",
            "itemtype": "method",
            "name": "polygonize",
            "return": {
                "description": "",
                "type": "gdal.Polygon"
            },
            "class": "gdal.MultiCurve"
        },
        {
            "file": "src/geometry/gdal_multilinestring.cpp",
            "line": 41,
            "description": "Converts it to a polygon.",
            "itemtype": "method",
            "name": "polygonize",
            "return": {
                "description": "",
                "type": "gdal.Polygon"
            },
            "class": "gdal.MultiLineString"
        },
        {
            "file": "src/geometry/gdal_multipolygon.cpp",
            "line": 41,
            "description": "Unions all the geometries and returns the result.",
            "itemtype": "method",
            "name": "unionCascaded",
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.MultiPolygon"
        },
        {
            "file": "src/geometry/gdal_multipolygon.cpp",
            "line": 59,
            "description": "Computes the combined area of the collection.",
            "itemtype": "method",
            "name": "getArea",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.MultiPolygon"
        },
        {
            "file": "src/geometry/gdal_point.cpp",
            "line": 83,
            "itemtype": "attribute",
            "name": "x",
            "type": "{number}",
            "class": "gdal.Point"
        },
        {
            "file": "src/geometry/gdal_point.cpp",
            "line": 104,
            "itemtype": "attribute",
            "name": "y",
            "type": "{number}",
            "class": "gdal.Point"
        },
        {
            "file": "src/geometry/gdal_point.cpp",
            "line": 125,
            "itemtype": "attribute",
            "name": "z",
            "type": "{number}",
            "class": "gdal.Point"
        },
        {
            "file": "src/geometry/gdal_polygon.cpp",
            "line": 47,
            "description": "Computes the area of the polygon.",
            "itemtype": "method",
            "name": "getArea",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.Polygon"
        },
        {
            "file": "src/geometry/gdal_polygon.cpp",
            "line": 55,
            "description": "The rings that make up the polygon geometry.",
            "itemtype": "attribute",
            "name": "rings",
            "type": "{gdal.PolygonRings}",
            "class": "gdal.Polygon"
        },
        {
            "file": "src/geometry/gdal_simplecurve.cpp",
            "line": 50,
            "description": "Returns the point at the specified distance along the SimpleCurve.",
            "itemtype": "method",
            "name": "value",
            "params": [
                {
                    "name": "distance",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Point"
            },
            "class": "gdal.SimpleCurve"
        },
        {
            "file": "src/geometry/gdal_simplecurve.cpp",
            "line": 71,
            "description": "Compute the length of a multiSimpleCurve.",
            "itemtype": "method",
            "name": "getLength",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.SimpleCurve"
        },
        {
            "file": "src/geometry/gdal_simplecurve.cpp",
            "line": 79,
            "description": "The points that make up the SimpleCurve geometry.",
            "itemtype": "attribute",
            "name": "points",
            "type": "{gdal.LineStringPoints}",
            "class": "gdal.SimpleCurve"
        },
        {
            "file": "src/geometry/gdal_simplecurve.cpp",
            "line": 89,
            "description": "Add a segment of another LineString to this SimpleCurve subtype.\n\nAdds the request range of vertices to the end of this compound curve in an\nefficient manner. If the start index is larger than the end index then the\nvertices will be reversed as they are copied.",
            "itemtype": "method",
            "name": "addSubLineString",
            "params": [
                {
                    "name": "LineString",
                    "description": "to be added",
                    "type": "gdal.LineString"
                },
                {
                    "name": "start",
                    "description": "the first vertex to copy, defaults to 0 to start with\nthe first vertex in the other LineString",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "end",
                    "description": "the last vertex to copy, defaults to -1 indicating the\nlast vertex of the other LineString",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "-1"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "gdal.SimpleCurve"
        },
        {
            "file": "src/gdal_algorithms.cpp",
            "line": 19,
            "description": "Fill raster regions by interpolation from edges.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "fillNodata",
            "static": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "FillOptions",
                    "props": [
                        {
                            "name": "src",
                            "description": "This band to be updated in-place.",
                            "type": "gdal.RasterBand"
                        },
                        {
                            "name": "mask",
                            "description": "Mask band",
                            "type": "gdal.RasterBand",
                            "optional": true
                        },
                        {
                            "name": "searchDist",
                            "description": "The maximum distance (in pixels) that the algorithm will search out for values to interpolate.",
                            "type": "Number"
                        },
                        {
                            "name": "smoothingIterations",
                            "description": "The number of 3x3 average filter smoothing iterations to run after the interpolation to dampen artifacts.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        }
                    ]
                }
            ],
            "class": "gdal"
        },
        {
            "file": "src/gdal_algorithms.cpp",
            "line": 33,
            "description": "Fill raster regions by interpolation from edges.\n{{{async}}}",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "fillNodataAsync",
            "static": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "FillOptions",
                    "props": [
                        {
                            "name": "src",
                            "description": "This band to be updated in-place.",
                            "type": "gdal.RasterBand"
                        },
                        {
                            "name": "mask",
                            "description": "Mask band",
                            "type": "gdal.RasterBand",
                            "optional": true
                        },
                        {
                            "name": "searchDist",
                            "description": "The maximum distance (in pixels) that the algorithm will search out for values to interpolate.",
                            "type": "Number"
                        },
                        {
                            "name": "smoothingIterations",
                            "description": "The number of 3x3 average filter smoothing iterations to run after the interpolation to dampen artifacts.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<void>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<void>"
            },
            "class": "gdal"
        },
        {
            "file": "src/gdal_algorithms.cpp",
            "line": 83,
            "description": "Create vector contours from raster DEM.\n\nThis algorithm will generate contour vectors for the input raster band on the\nrequested set of contour levels. The vector contours are written to the\npassed in vector layer. Also, a NODATA value may be specified to identify\npixels that should not be considered in contour line generation.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "contourGenerate",
            "static": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "ContourOptions",
                    "props": [
                        {
                            "name": "src",
                            "description": "",
                            "type": "gdal.RasterBand"
                        },
                        {
                            "name": "dst",
                            "description": "",
                            "type": "gdal.Layer"
                        },
                        {
                            "name": "offset",
                            "description": "The \"offset\" relative to which contour intervals are applied. This is normally zero, but could be different. To generate 10m contours at 5, 15, 25, ... the offset would be 5.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "interval",
                            "description": "The elevation interval between contours generated.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "100"
                        },
                        {
                            "name": "fixedLevels",
                            "description": "A list of fixed contour levels at which contours should be generated. Overrides interval/base options if set.",
                            "type": "Number[]",
                            "optional": true
                        },
                        {
                            "name": "nodata",
                            "description": "The value to use as a \"nodata\" value. That is, a pixel value which should be ignored in generating contours as if the value of the pixel were not known.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "idField",
                            "description": "A field index to indicate where a unique id should be written for each feature (contour) written.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "elevField",
                            "description": "A field index to indicate where the elevation value of the contour should be written.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "progress_cb",
                            "description": "{{{progress_cb}}}",
                            "type": "ProgressCb",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "gdal"
        },
        {
            "file": "src/gdal_algorithms.cpp",
            "line": 107,
            "description": "Create vector contours from raster DEM.\n{{{async}}}\n\nThis algorithm will generate contour vectors for the input raster band on the\nrequested set of contour levels. The vector contours are written to the\npassed in vector layer. Also, a NODATA value may be specified to identify\npixels that should not be considered in contour line generation.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "contourGenerateAsync",
            "static": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "ContourOptions",
                    "props": [
                        {
                            "name": "src",
                            "description": "",
                            "type": "gdal.RasterBand"
                        },
                        {
                            "name": "dst",
                            "description": "",
                            "type": "gdal.Layer"
                        },
                        {
                            "name": "offset",
                            "description": "The \"offset\" relative to which contour intervals are applied. This is normally zero, but could be different. To generate 10m contours at 5, 15, 25, ... the offset would be 5.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "interval",
                            "description": "The elevation interval between contours generated.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "100"
                        },
                        {
                            "name": "fixedLevels",
                            "description": "A list of fixed contour levels at which contours should be generated. Overrides interval/base options if set.",
                            "type": "Number[]",
                            "optional": true
                        },
                        {
                            "name": "nodata",
                            "description": "The value to use as a \"nodata\" value. That is, a pixel value which should be ignored in generating contours as if the value of the pixel were not known.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "idField",
                            "description": "A field index to indicate where a unique id should be written for each feature (contour) written.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "elevField",
                            "description": "A field index to indicate where the elevation value of the contour should be written.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "progress_cb",
                            "description": "{{{progress_cb}}}",
                            "type": "ProgressCb",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<void>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<void>"
            },
            "class": "gdal"
        },
        {
            "file": "src/gdal_algorithms.cpp",
            "line": 214,
            "description": "Removes small raster polygons.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "sieveFilter",
            "static": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "SieveOptions",
                    "props": [
                        {
                            "name": "src",
                            "description": "",
                            "type": "gdal.RasterBand"
                        },
                        {
                            "name": "dst",
                            "description": "Output raster band. It may be the same as src band to update the source in place.",
                            "type": "gdal.RasterBand"
                        },
                        {
                            "name": "mask",
                            "description": "All pixels in the mask band with a value other than zero will be considered suitable for inclusion in polygons.",
                            "type": "gdal.RasterBand",
                            "optional": true
                        },
                        {
                            "name": "threshold",
                            "description": "Raster polygons with sizes smaller than this will be merged into their largest neighbour.",
                            "type": "Number"
                        },
                        {
                            "name": "connectedness",
                            "description": "Either 4 indicating that diagonal pixels are not considered directly adjacent for polygon membership purposes or 8 indicating they are.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "4"
                        },
                        {
                            "name": "progress_cb",
                            "description": "{{{progress_cb}}}",
                            "type": "ProgressCb",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "gdal"
        },
        {
            "file": "src/gdal_algorithms.cpp",
            "line": 230,
            "description": "Removes small raster polygons.\n{{{async}}}",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "sieveFilterAsync",
            "static": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "SieveOptions",
                    "props": [
                        {
                            "name": "src",
                            "description": "",
                            "type": "gdal.RasterBand"
                        },
                        {
                            "name": "dst",
                            "description": "Output raster band. It may be the same as src band to update the source in place.",
                            "type": "gdal.RasterBand"
                        },
                        {
                            "name": "mask",
                            "description": "All pixels in the mask band with a value other than zero will be considered suitable for inclusion in polygons.",
                            "type": "gdal.RasterBand",
                            "optional": true
                        },
                        {
                            "name": "threshold",
                            "description": "Raster polygons with sizes smaller than this will be merged into their largest neighbour.",
                            "type": "Number"
                        },
                        {
                            "name": "connectedness",
                            "description": "Either 4 indicating that diagonal pixels are not considered directly adjacent for polygon membership purposes or 8 indicating they are.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "4"
                        },
                        {
                            "name": "progress_cb",
                            "description": "{{{progress_cb}}}",
                            "type": "ProgressCb",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<void>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<void>"
            },
            "class": "gdal"
        },
        {
            "file": "src/gdal_algorithms.cpp",
            "line": 299,
            "description": "Compute checksum for image region.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "checksumImage",
            "static": 1,
            "params": [
                {
                    "name": "src",
                    "description": "",
                    "type": "gdal.RasterBand"
                },
                {
                    "name": "x",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "w",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "src.width"
                },
                {
                    "name": "h",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "src.height"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal"
        },
        {
            "file": "src/gdal_algorithms.cpp",
            "line": 314,
            "description": "Compute checksum for image region.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "checksumImageAsync",
            "static": 1,
            "params": [
                {
                    "name": "src",
                    "description": "",
                    "type": "gdal.RasterBand"
                },
                {
                    "name": "x",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "w",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "src.width"
                },
                {
                    "name": "h",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "src.height"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<number>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<number>"
            },
            "class": "gdal"
        },
        {
            "file": "src/gdal_algorithms.cpp",
            "line": 373,
            "description": "Creates vector polygons for all connected regions of pixels in the raster\nsharing a common pixel value. Each polygon is created with an attribute\nindicating the pixel value of that polygon. A raster mask may also be\nprovided to determine which pixels are eligible for processing.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "polygonize",
            "static": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "PolygonizeOptions",
                    "props": [
                        {
                            "name": "src",
                            "description": "",
                            "type": "gdal.RasterBand"
                        },
                        {
                            "name": "dst",
                            "description": "",
                            "type": "gdal.Layer"
                        },
                        {
                            "name": "mask",
                            "description": "",
                            "type": "gdal.RasterBand",
                            "optional": true
                        },
                        {
                            "name": "pixValField",
                            "description": "The attribute field index indicating the feature attribute into which the pixel value of the polygon should be written.",
                            "type": "Number"
                        },
                        {
                            "name": "connectedness",
                            "description": "Either 4 indicating that diagonal pixels are not considered directly adjacent for polygon membership purposes or 8 indicating they are.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "4"
                        },
                        {
                            "name": "useFloats",
                            "description": "Use floating point buffers instead of int buffers.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "progress_cb",
                            "description": "{{{progress_cb}}}",
                            "type": "ProgressCb",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "gdal"
        },
        {
            "file": "src/gdal_algorithms.cpp",
            "line": 393,
            "description": "Creates vector polygons for all connected regions of pixels in the raster\nsharing a common pixel value. Each polygon is created with an attribute\nindicating the pixel value of that polygon. A raster mask may also be\nprovided to determine which pixels are eligible for processing.\n{{{async}}}",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "polygonizeAsync",
            "static": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "PolygonizeOptions",
                    "props": [
                        {
                            "name": "src",
                            "description": "",
                            "type": "gdal.RasterBand"
                        },
                        {
                            "name": "dst",
                            "description": "",
                            "type": "gdal.Layer"
                        },
                        {
                            "name": "mask",
                            "description": "",
                            "type": "gdal.RasterBand",
                            "optional": true
                        },
                        {
                            "name": "pixValField",
                            "description": "The attribute field index indicating the feature attribute into which the pixel value of the polygon should be written.",
                            "type": "Number"
                        },
                        {
                            "name": "connectedness",
                            "description": "Either 4 indicating that diagonal pixels are not considered directly adjacent for polygon membership purposes or 8 indicating they are.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "4"
                        },
                        {
                            "name": "useFloats",
                            "description": "Use floating point buffers instead of int buffers.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "progress_cb",
                            "description": "{{{progress_cb}}}",
                            "type": "ProgressCb",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<void>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<void>"
            },
            "class": "gdal"
        },
        {
            "file": "src/gdal_attribute.cpp",
            "line": 124,
            "description": "Complex GDAL data types introduced in 3.1 are not yet supported",
            "readonly": "",
            "itemtype": "attribute",
            "name": "value",
            "throws": {
                "description": "Error"
            },
            "type": "{string|number}",
            "class": "gdal.Attribute"
        },
        {
            "file": "src/gdal_attribute.cpp",
            "line": 146,
            "readonly": "",
            "itemtype": "attribute",
            "name": "dataType",
            "type": "{string}",
            "class": "gdal.Attribute"
        },
        {
            "file": "src/gdal_coordinate_transformation.cpp",
            "line": 152,
            "description": "Transform point from source to destination space.",
            "example": [
                "\n```\npt = transform.transformPoint(0, 0, 0);"
            ],
            "itemtype": "method",
            "name": "transformPoint",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "A regular object containing `x`, `y`, `z` properties.",
                "type": "Xyz"
            },
            "class": "gdal.CoordinateTransformation"
        },
        {
            "file": "src/gdal_coordinate_transformation.cpp",
            "line": 166,
            "description": "Transform point from source to destination space.",
            "example": [
                "\n```\npt = transform.transformPoint({x: 0, y: 0, z: 0});```"
            ],
            "itemtype": "method",
            "name": "transformPoint",
            "params": [
                {
                    "name": "point",
                    "description": "",
                    "type": "Xyz"
                }
            ],
            "return": {
                "description": "A regular object containing `x`, `y`, `z` properties.",
                "type": "Xyz"
            },
            "class": "gdal.CoordinateTransformation"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 157,
            "description": "Fetch metadata.",
            "itemtype": "method",
            "name": "getMetadata",
            "params": [
                {
                    "name": "domain",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Any"
            },
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 165,
            "description": "Fetch metadata.\n{{{async}}}",
            "itemtype": "method",
            "name": "getMetadataAsync",
            "params": [
                {
                    "name": "domain",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<void>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<any>"
            },
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 189,
            "description": "Set metadata. Can return a warning (false) for formats not supporting persistent metadata.",
            "itemtype": "method",
            "name": "setMetadata",
            "params": [
                {
                    "name": "metadata",
                    "description": "",
                    "type": "Object|string[]"
                },
                {
                    "name": "domain",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 198,
            "description": "Set metadata. Can return a warning (false) for formats not supporting persistent metadata.\n{{{async}}}",
            "itemtype": "method",
            "name": "setMetadataAsync",
            "params": [
                {
                    "name": "metadata",
                    "description": "",
                    "type": "Object|string[]"
                },
                {
                    "name": "domain",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<boolean>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<boolean>"
            },
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 231,
            "description": "Determines if the dataset supports the indicated operation.",
            "itemtype": "method",
            "name": "testCapability",
            "params": [
                {
                    "name": "capability",
                    "description": "(see {{#crossLink \"Constants (ODsC)\"}}capability\nlist{{/crossLink}})",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 256,
            "description": "Get output projection for GCPs.",
            "itemtype": "method",
            "name": "getGCPProjection",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 275,
            "description": "Closes the dataset to further operations. It releases all memory and ressources held\nby the dataset.\nThis is normally an instantenous atomic operation that won't block the event loop\nexcept if there is an operation running on this dataset in asynchronous context - in this case\nthis call will block until that operation finishes.\n\nIf this could potentially be the case and blocking the event loop is not possible (server code),\nthen the best option is to simply dereference it (ds = null) and leave\nthe garbage collector to expire it.\n\nImplementing an asynchronous delete is difficult since all V8 object creation/deletion\nmust take place on the main thread.\n\nflush[Async]() ensures that, when writing, all data has been written.",
            "itemtype": "method",
            "name": "close",
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 306,
            "description": "Flushes all changes to disk.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "flush",
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 313,
            "description": "Flushes all changes to disk.\n{{{async}}}",
            "itemtype": "method",
            "name": "flushAsync",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<void>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<void>"
            },
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 336,
            "description": "Execute an SQL statement against the data store.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "executeSQL",
            "params": [
                {
                    "name": "statement",
                    "description": "SQL statement to execute.",
                    "type": "String"
                },
                {
                    "name": "spatial_filter",
                    "description": "Geometry which represents a\nspatial filter.",
                    "type": "gdal.Geometry",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "dialect",
                    "description": "Allows control of the statement dialect. If\nset to `null`, the OGR SQL engine will be used, except for RDBMS drivers that\nwill use their dedicated SQL engine, unless `\"OGRSQL\"` is explicitely passed\nas the dialect. Starting with OGR 1.10, the `\"SQLITE\"` dialect can also be\nused.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Layer"
            },
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 352,
            "description": "Execute an SQL statement against the data store.\n{{{async}}}",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "executeSQLAsync",
            "params": [
                {
                    "name": "statement",
                    "description": "SQL statement to execute.",
                    "type": "String"
                },
                {
                    "name": "spatial_filter",
                    "description": "Geometry which represents a\nspatial filter.",
                    "type": "gdal.Geometry",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "dialect",
                    "description": "Allows control of the statement dialect. If\nset to `null`, the OGR SQL engine will be used, except for RDBMS drivers that\nwill use their dedicated SQL engine, unless `\"OGRSQL\"` is explicitely passed\nas the dialect. Starting with OGR 1.10, the `\"SQLITE\"` dialect can also be\nused.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Layer>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Layer>"
            },
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 400,
            "description": "Fetch files forming dataset.\n\nReturns a list of files believed to be part of this dataset. If it returns an\nempty list of files it means there is believed to be no local file system\nfiles associated with the dataset (for instance a virtual dataset).\n\nReturns an empty array for vector datasets if GDAL version is below 2.0",
            "itemtype": "method",
            "name": "getFileList",
            "return": {
                "description": "",
                "type": "String[]"
            },
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 446,
            "description": "Fetches GCPs.",
            "itemtype": "method",
            "name": "getGCPs",
            "return": {
                "description": "",
                "type": "Any[]"
            },
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 493,
            "description": "Sets GCPs.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "setGCPs",
            "params": [
                {
                    "name": "gcps",
                    "description": "",
                    "type": "Object[]"
                },
                {
                    "name": "projection",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 557,
            "description": "Builds dataset overviews.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "buildOverviews",
            "params": [
                {
                    "name": "resampling",
                    "description": "`\"NEAREST\"`, `\"GAUSS\"`, `\"CUBIC\"`, `\"AVERAGE\"`,\n`\"MODE\"`, `\"AVERAGE_MAGPHASE\"` or `\"NONE\"`",
                    "type": "String"
                },
                {
                    "name": "overviews",
                    "description": "",
                    "type": "Number[]"
                },
                {
                    "name": "bands",
                    "description": "Note: Generation of overviews in external TIFF currently only supported when operating on all bands.",
                    "type": "Number[]",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "options",
                    "type": "ProgressOptions",
                    "optional": true,
                    "props": [
                        {
                            "name": "progress_cb",
                            "description": "{{{progress_cb}}}",
                            "type": "ProgressCb",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 570,
            "description": "Builds dataset overviews.\n{{{async}}}",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "buildOverviewsAsync",
            "params": [
                {
                    "name": "resampling",
                    "description": "`\"NEAREST\"`, `\"GAUSS\"`, `\"CUBIC\"`, `\"AVERAGE\"`,\n`\"MODE\"`, `\"AVERAGE_MAGPHASE\"` or `\"NONE\"`",
                    "type": "String"
                },
                {
                    "name": "overviews",
                    "description": "",
                    "type": "Number[]"
                },
                {
                    "name": "bands",
                    "description": "Note: Generation of overviews in external TIFF currently only supported when operating on all bands.",
                    "type": "Number[]",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "options",
                    "type": "ProgressOptions",
                    "optional": true,
                    "props": [
                        {
                            "name": "progress_cb",
                            "description": "{{{progress_cb}}}",
                            "type": "ProgressCb",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<void>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<void>"
            },
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 658,
            "readonly": "",
            "itemtype": "attribute",
            "name": "description",
            "type": "{string}",
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 680,
            "description": "Raster dimensions. An object containing `x` and `y` properties.",
            "readonly": "",
            "itemtype": "attribute",
            "name": "rasterSize",
            "type": "{xyz}",
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 688,
            "description": "Raster dimensions. An object containing `x` and `y` properties.\n{{async_getter}}",
            "readonly": "",
            "itemtype": "attribute",
            "name": "rasterSizeAsync",
            "type": "{Promise<xyz>}",
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 739,
            "description": "Spatial reference associated with raster dataset",
            "throws": {
                "description": "Error"
            },
            "itemtype": "attribute",
            "name": "srs",
            "type": "{gdal.SpatialReference|null}",
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 747,
            "description": "Spatial reference associated with raster dataset\n{{async_getter}}",
            "throws": {
                "description": "Error"
            },
            "itemtype": "attribute",
            "name": "srsAsync",
            "readonly": "",
            "type": "{Promise<gdal.SpatialReference|null>}",
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 791,
            "description": "An affine transform which maps pixel/line coordinates into georeferenced\nspace using the following relationship:",
            "example": [
                "\n```\nvar GT = dataset.geoTransform;\nvar Xgeo = GT[0] + Xpixel*GT[1] + Yline*GT[2];\nvar Ygeo = GT[3] + Xpixel*GT[4] + Yline*GT[5];```"
            ],
            "itemtype": "attribute",
            "name": "geoTransform",
            "type": "{number[]|null}",
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 805,
            "description": "An affine transform which maps pixel/line coordinates into georeferenced\nspace using the following relationship:",
            "example": [
                "\n```\nvar GT = dataset.geoTransform;\nvar Xgeo = GT[0] + Xpixel*GT[1] + Yline*GT[2];\nvar Ygeo = GT[3] + Xpixel*GT[4] + Yline*GT[5];```\n\n{{async_getter}}"
            ],
            "readonly": "",
            "itemtype": "attribute",
            "name": "geoTransformAsync",
            "type": "{Promise<number[]|null>}",
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 856,
            "readonly": "",
            "itemtype": "attribute",
            "name": "driver",
            "type": "{gdal.Driver}",
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 944,
            "readonly": "",
            "itemtype": "attribute",
            "name": "bands",
            "type": "{gdal.DatasetBands}",
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 953,
            "readonly": "",
            "itemtype": "attribute",
            "name": "layers",
            "type": "{gdal.DatasetLayers}",
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 962,
            "readonly": "",
            "itemtype": "attribute",
            "name": "root",
            "type": "{gdal.Group}",
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dimension.cpp",
            "line": 127,
            "readonly": "",
            "itemtype": "attribute",
            "name": "size",
            "type": "{number}",
            "class": "gdal.Dimension"
        },
        {
            "file": "src/gdal_dimension.cpp",
            "line": 134,
            "readonly": "",
            "itemtype": "attribute",
            "name": "description",
            "type": "{string}",
            "class": "gdal.Dimension"
        },
        {
            "file": "src/gdal_dimension.cpp",
            "line": 141,
            "readonly": "",
            "itemtype": "attribute",
            "name": "direction",
            "type": "{string}",
            "class": "gdal.Dimension"
        },
        {
            "file": "src/gdal_dimension.cpp",
            "line": 148,
            "readonly": "",
            "itemtype": "attribute",
            "name": "type",
            "type": "{string}",
            "class": "gdal.Dimension"
        },
        {
            "file": "src/gdal_driver.cpp",
            "line": 109,
            "readonly": "",
            "itemtype": "attribute",
            "name": "description",
            "type": "{string}",
            "class": "gdal.Driver"
        },
        {
            "file": "src/gdal_driver.cpp",
            "line": 120,
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "deleteDataset",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "gdal.Driver"
        },
        {
            "file": "src/gdal_driver.cpp",
            "line": 143,
            "description": "Create a new dataset with this driver.",
            "throws": {
                "description": ""
            },
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "x_size",
                    "description": "raster width in pixels (ignored for vector\ndatasets)",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "y_size",
                    "description": "raster height in pixels (ignored for vector\ndatasets)",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "band_count",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "data_type",
                    "description": "pixel data type (ignored for\nvector datasets) (see {{#crossLink \"Constants (GDT)\"}}data\ntypes{{/crossLink}})",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "gdal.GDT_Byte"
                },
                {
                    "name": "creation_options",
                    "description": "An array or object containing\ndriver-specific dataset creation options",
                    "type": "String[]|object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Dataset"
            },
            "class": "gdal.Driver"
        },
        {
            "file": "src/gdal_driver.cpp",
            "line": 163,
            "description": "Asynchronously create a new dataset with this driver.",
            "throws": {
                "description": ""
            },
            "itemtype": "method",
            "name": "createAsync",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "x_size",
                    "description": "raster width in pixels (ignored for vector\ndatasets)",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "y_size",
                    "description": "raster height in pixels (ignored for vector\ndatasets)",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "band_count",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "data_type",
                    "description": "pixel data type (ignored for\nvector datasets) (see {{#crossLink \"Constants (GDT)\"}}data\ntypes{{/crossLink}})",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "gdal.GDT_Byte"
                },
                {
                    "name": "creation_options",
                    "description": "An array or object containing\ndriver-specific dataset creation options",
                    "type": "String[]|object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Dataset>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Dataset>"
            },
            "class": "gdal.Driver"
        },
        {
            "file": "src/gdal_driver.cpp",
            "line": 228,
            "description": "Create a copy of a dataset.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "createCopy",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "src",
                    "description": "",
                    "type": "gdal.Dataset"
                },
                {
                    "name": "options",
                    "description": "An array or object containing driver-specific dataset creation options",
                    "type": "String[]|object",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "strict",
                    "description": "strict mode",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "jsoptions",
                    "description": "additional options",
                    "type": "CreateOptions",
                    "optional": true,
                    "props": [
                        {
                            "name": "progress_cb",
                            "description": "{{{progress_cb}}}",
                            "type": "ProgressCb",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Dataset"
            },
            "class": "gdal.Driver"
        },
        {
            "file": "src/gdal_driver.cpp",
            "line": 242,
            "description": "Asynchronously create a copy of a dataset.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "createCopyAsync",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "src",
                    "description": "",
                    "type": "gdal.Dataset"
                },
                {
                    "name": "options",
                    "description": "An array or object containing driver-specific dataset creation options",
                    "type": "String[]|object",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "strict",
                    "description": "strict mode",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "jsoptions",
                    "description": "additional options",
                    "type": "CreateOptions",
                    "optional": true,
                    "props": [
                        {
                            "name": "progress_cb",
                            "description": "{{{progress_cb}}}",
                            "type": "ProgressCb",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Dataset>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Dataset>"
            },
            "class": "gdal.Driver"
        },
        {
            "file": "src/gdal_driver.cpp",
            "line": 313,
            "description": "Copy the files of a dataset.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "copyFiles",
            "params": [
                {
                    "name": "name_old",
                    "description": "New name for the dataset.",
                    "type": "String"
                },
                {
                    "name": "name_new",
                    "description": "Old name of the dataset.",
                    "type": "String"
                }
            ],
            "class": "gdal.Driver"
        },
        {
            "file": "src/gdal_driver.cpp",
            "line": 338,
            "description": "Renames the dataset.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "rename",
            "params": [
                {
                    "name": "new_name",
                    "description": "New name for the dataset.",
                    "type": "String"
                },
                {
                    "name": "old_name",
                    "description": "Old name of the dataset.",
                    "type": "String"
                }
            ],
            "class": "gdal.Driver"
        },
        {
            "file": "src/gdal_driver.cpp",
            "line": 363,
            "description": "Returns metadata about the driver.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "getMetadata",
            "params": [
                {
                    "name": "domain",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Any"
            },
            "class": "gdal.Driver"
        },
        {
            "file": "src/gdal_driver.cpp",
            "line": 385,
            "description": "Opens a dataset.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "open",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "mode",
                    "description": "The mode to use to open the file: `\"r\"` or\n`\"r+\"`",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"r\""
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Dataset"
            },
            "class": "gdal.Driver"
        },
        {
            "file": "src/gdal_driver.cpp",
            "line": 396,
            "description": "Opens a dataset.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "openAsync",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "mode",
                    "description": "The mode to use to open the file: `\"r\"` or\n`\"r+\"`",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"r\""
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Dataset>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Dataset>"
            },
            "class": "gdal.Driver"
        },
        {
            "file": "src/gdal_feature.cpp",
            "line": 163,
            "description": "Returns the geometry of the feature.",
            "itemtype": "method",
            "name": "getGeometry",
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.Feature"
        },
        {
            "file": "src/gdal_feature.cpp",
            "line": 187,
            "description": "Returns the definition of a particular field at an index.\n\n_method getFieldDefn\n_param {number} index Field index (0-based)\n_return {gdal.FieldDefn}",
            "class": "gdal.Feature"
        },
        {
            "file": "src/gdal_feature.cpp",
            "line": 216,
            "description": "Sets the feature's geometry.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "setGeometry",
            "params": [
                {
                    "name": "geometry",
                    "description": "new geometry or null to clear the field",
                    "type": "gdal.Geometry|null"
                }
            ],
            "class": "gdal.Feature"
        },
        {
            "file": "src/gdal_feature.cpp",
            "line": 240,
            "description": "Determines if the features are the same.",
            "itemtype": "method",
            "name": "equals",
            "params": [
                {
                    "name": "feature",
                    "description": "",
                    "type": "gdal.Feature"
                }
            ],
            "return": {
                "description": "`true` if the features are the same, `false` if different",
                "type": "Boolean"
            },
            "class": "gdal.Feature"
        },
        {
            "file": "src/gdal_feature.cpp",
            "line": 249,
            "description": "Clones the feature.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "",
                "type": "gdal.Feature"
            },
            "class": "gdal.Feature"
        },
        {
            "file": "src/gdal_feature.cpp",
            "line": 264,
            "description": "Releases the feature from memory.",
            "itemtype": "method",
            "name": "destroy",
            "class": "gdal.Feature"
        },
        {
            "file": "src/gdal_feature.cpp",
            "line": 279,
            "description": "Set one feature from another. Overwrites the contents of this feature\nfrom the geometry and attributes of another.",
            "example": [
                "\n```\nvar feature1 = new gdal.Feature(defn);\nvar feature2 = new gdal.Feature(defn);\nfeature1.setGeometry(new gdal.Point(5, 10));\nfeature1.fields.set([5, 'test', 3.14]);\nfeature2.setFrom(feature1);```"
            ],
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "setFrom",
            "params": [
                {
                    "name": "feature",
                    "description": "",
                    "type": "gdal.Feature"
                },
                {
                    "name": "index_map",
                    "description": "Array mapping each field from the source feature\nto the given index in the destination feature. -1 ignores the source field.\nThe field types must still match otherwise the behavior is undefined.",
                    "type": "Number[]",
                    "optional": true
                },
                {
                    "name": "forgiving",
                    "description": "`true` if the operation should continue\ndespite lacking output fields matching some of the source fields.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "class": "gdal.Feature"
        },
        {
            "file": "src/gdal_feature.cpp",
            "line": 356,
            "readonly": "",
            "itemtype": "attribute",
            "name": "fields",
            "type": "{gdal.FeatureFields}",
            "class": "gdal.Feature"
        },
        {
            "file": "src/gdal_feature.cpp",
            "line": 365,
            "itemtype": "attribute",
            "name": "fid",
            "type": "{number}",
            "class": "gdal.Feature"
        },
        {
            "file": "src/gdal_feature.cpp",
            "line": 378,
            "readonly": "",
            "itemtype": "attribute",
            "name": "defn",
            "type": "{gdal.FeatureDefn}",
            "class": "gdal.Feature"
        },
        {
            "file": "src/gdal_feature_defn.cpp",
            "line": 118,
            "description": "Clones the feature definition.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "",
                "type": "gdal.FeatureDefn"
            },
            "class": "gdal.FeatureDefn"
        },
        {
            "file": "src/gdal_feature_defn.cpp",
            "line": 129,
            "readonly": "",
            "itemtype": "attribute",
            "name": "name",
            "type": "{string}",
            "class": "gdal.FeatureDefn"
        },
        {
            "file": "src/gdal_feature_defn.cpp",
            "line": 139,
            "description": "WKB geometry type ({{#crossLink \"Constants (wkbGeometryType)\"}}see\ntable{{/crossLink}})",
            "itemtype": "attribute",
            "name": "geomType",
            "type": "{number}",
            "class": "gdal.FeatureDefn"
        },
        {
            "file": "src/gdal_feature_defn.cpp",
            "line": 151,
            "itemtype": "attribute",
            "name": "geomIgnored",
            "type": "{boolean}",
            "class": "gdal.FeatureDefn"
        },
        {
            "file": "src/gdal_feature_defn.cpp",
            "line": 160,
            "itemtype": "attribute",
            "name": "styleIgnored",
            "type": "{boolean}",
            "class": "gdal.FeatureDefn"
        },
        {
            "file": "src/gdal_feature_defn.cpp",
            "line": 169,
            "readonly": "",
            "itemtype": "attribute",
            "name": "fields",
            "type": "{gdal.FeatureDefnFields}",
            "class": "gdal.FeatureDefn"
        },
        {
            "file": "src/gdal_field_defn.cpp",
            "line": 120,
            "itemtype": "attribute",
            "name": "name",
            "type": "{string}",
            "class": "gdal.FieldDefn"
        },
        {
            "file": "src/gdal_field_defn.cpp",
            "line": 129,
            "description": "Data type (see {{#crossLink \"Constants (OFT)\"}}OFT constants{{/crossLink}})",
            "itemtype": "attribute",
            "name": "type",
            "type": "{string}",
            "class": "gdal.FieldDefn"
        },
        {
            "file": "src/gdal_field_defn.cpp",
            "line": 140,
            "itemtype": "attribute",
            "name": "ignored",
            "type": "{boolean}",
            "class": "gdal.FieldDefn"
        },
        {
            "file": "src/gdal_field_defn.cpp",
            "line": 149,
            "description": "Field justification (see {{#crossLink \"Constants (OJ)\"}}OJ\nconstants{{/crossLink}})",
            "itemtype": "attribute",
            "name": "justification",
            "type": "{string}",
            "class": "gdal.FieldDefn"
        },
        {
            "file": "src/gdal_field_defn.cpp",
            "line": 170,
            "itemtype": "attribute",
            "name": "width",
            "type": "{number}",
            "class": "gdal.FieldDefn"
        },
        {
            "file": "src/gdal_field_defn.cpp",
            "line": 179,
            "itemtype": "attribute",
            "name": "precision",
            "type": "{number}",
            "class": "gdal.FieldDefn"
        },
        {
            "file": "src/gdal_fs.cpp",
            "line": 18,
            "description": "Get VSI file info.",
            "example": [
                "\n```\nconst gdalStats = gdal.fs.stat('/vsis3/noaa-gfs-bdp-pds/gfs.20210918/06/atmos/gfs.t06z.pgrb2.0p25.f010')\nif ((gdalStats.mode & fs.constants.S_IFREG) === fs.constants.S_IFREG) console.log('is regular file')\n\n// convert to Node.js fs.Stats\nconst fsStats = new (Function.prototype.bind.apply(fs.Stats, [null, ...Object.keys(s).map(k => s[k])]))\nif (fsStats.isFile) console.log('is regular file')\n```"
            ],
            "static": 1,
            "itemtype": "method",
            "name": "stat",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "bigint",
                    "description": "Return BigInt numbers. JavaScript numbers are safe for integers up to 2^53.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "gdal.VSIStat"
            },
            "class": "gdal.fs"
        },
        {
            "file": "src/gdal_fs.cpp",
            "line": 39,
            "description": "Get VSI file info.",
            "static": 1,
            "itemtype": "method",
            "name": "stat",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "True",
                    "description": "Return BigInt numbers. JavaScript numbers are safe for integers up to 2^53.",
                    "type": "True"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "gdal.VSIStat64"
            },
            "class": "gdal.fs"
        },
        {
            "file": "src/gdal_fs.cpp",
            "line": 50,
            "description": "Get VSI file info.\n{{{async}}}",
            "static": 1,
            "itemtype": "method",
            "name": "statAsync",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "bigint",
                    "description": "Return BigInt numbers. JavaScript numbers are safe for integers up to 2^53.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.VSIStat>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "Promise<gdal.VSIStat>"
            },
            "class": "gdal.fs"
        },
        {
            "file": "src/gdal_fs.cpp",
            "line": 63,
            "description": "Get VSI file info.\n{{{async}}}",
            "static": 1,
            "itemtype": "method",
            "name": "statAsync",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "True",
                    "description": "Return BigInt numbers. JavaScript numbers are safe for integers up to 2^53.",
                    "type": "True"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.VSIStat>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "Promise<gdal.VSIStat>"
            },
            "class": "gdal.fs"
        },
        {
            "file": "src/gdal_fs.cpp",
            "line": 161,
            "description": "Read file names in a directory.",
            "static": 1,
            "itemtype": "method",
            "name": "readDir",
            "params": [
                {
                    "name": "directory",
                    "description": "",
                    "type": "String"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "String[]"
            },
            "class": "gdal.fs"
        },
        {
            "file": "src/gdal_fs.cpp",
            "line": 171,
            "description": "Read file names in a directory.\n{{{async_}}}",
            "static": 1,
            "itemtype": "method",
            "name": "readDirAsync",
            "params": [
                {
                    "name": "directory",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<string[]>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "Promise<string[]>"
            },
            "class": "gdal.fs"
        },
        {
            "file": "src/gdal_group.cpp",
            "line": 145,
            "readonly": "",
            "itemtype": "attribute",
            "name": "description",
            "type": "{string}",
            "class": "gdal.Group"
        },
        {
            "file": "src/gdal_group.cpp",
            "line": 152,
            "readonly": "",
            "itemtype": "attribute",
            "name": "groups",
            "type": "{gdal.GroupGroups}",
            "class": "gdal.Group"
        },
        {
            "file": "src/gdal_group.cpp",
            "line": 161,
            "readonly": "",
            "itemtype": "attribute",
            "name": "arrays",
            "type": "{gdal.GroupArrays}",
            "class": "gdal.Group"
        },
        {
            "file": "src/gdal_group.cpp",
            "line": 170,
            "readonly": "",
            "itemtype": "attribute",
            "name": "dimensions",
            "type": "{gdal.GroupDimensions}",
            "class": "gdal.Group"
        },
        {
            "file": "src/gdal_group.cpp",
            "line": 179,
            "readonly": "",
            "itemtype": "attribute",
            "name": "attributes",
            "type": "{gdal.GroupAttributes}",
            "class": "gdal.Group"
        },
        {
            "file": "src/gdal_layer.cpp",
            "line": 162,
            "description": "Flush pending changes to disk.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "flush",
            "class": "gdal.Layer"
        },
        {
            "file": "src/gdal_layer.cpp",
            "line": 169,
            "description": "Flush pending changes to disk.\n{{{async}}}",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "flushAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<void>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<void>"
            },
            "class": "gdal.Layer"
        },
        {
            "file": "src/gdal_layer.cpp",
            "line": 181,
            "description": "Determines if the dataset supports the indicated operation.",
            "itemtype": "method",
            "name": "testCapability",
            "params": [
                {
                    "name": "capability",
                    "description": "(see {{#crossLink \"Constants (OLC)\"}}capability\nlist{{/crossLink}})",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.Layer"
        },
        {
            "file": "src/gdal_layer.cpp",
            "line": 191,
            "description": "Fetch the extent of this layer.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "getExtent",
            "params": [
                {
                    "name": "force",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "Bounding envelope",
                "type": "gdal.Envelope"
            },
            "class": "gdal.Layer"
        },
        {
            "file": "src/gdal_layer.cpp",
            "line": 228,
            "description": "This method returns the current spatial filter for this layer.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "getSpatialFilter",
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.Layer"
        },
        {
            "file": "src/gdal_layer.cpp",
            "line": 249,
            "description": "This method sets the geometry to be used as a spatial filter when fetching\nfeatures via the `layer.features.next()` method. Only features that\ngeometrically intersect the filter geometry will be returned.\n\nAlernatively you can pass it envelope bounds as individual arguments.",
            "example": [
                "\n```\nlayer.setSpatialFilter(geometry);```"
            ],
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "setSpatialFilter",
            "params": [
                {
                    "name": "filter",
                    "description": "",
                    "type": "gdal.Geometry|null"
                }
            ],
            "class": "gdal.Layer"
        },
        {
            "file": "src/gdal_layer.cpp",
            "line": 265,
            "description": "This method sets the geometry to be used as a spatial filter when fetching\nfeatures via the `layer.features.next()` method. Only features that\ngeometrically intersect the filter geometry will be returned.\n\nAlernatively you can pass it envelope bounds as individual arguments.",
            "example": [
                "\n```\nlayer.setSpatialFilter(minX, minY, maxX, maxY);```"
            ],
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "setSpatialFilter",
            "params": [
                {
                    "name": "minxX",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "minyY",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "maxX",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "maxY",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "gdal.Layer"
        },
        {
            "file": "src/gdal_layer.cpp",
            "line": 318,
            "description": "Sets the attribute query string to be used when fetching features via the\n`layer.features.next()` method. Only features for which the query evaluates\nas `true` will be returned.\n\nThe query string should be in the format of an SQL WHERE clause. For instance\n\"population > 1000000 and population < 5000000\" where `population` is an\nattribute in the layer. The query format is normally a restricted form of\nSQL WHERE clause as described in the \"WHERE\" section of the [OGR SQL\ntutorial](https://gdal.org/user/ogr_sql_dialect.html). In some cases (RDBMS backed\ndrivers) the native capabilities of the database may be used to interprete\nthe WHERE clause in which case the capabilities will be broader than those\nof OGR SQL.",
            "example": [
                "\n```\nlayer.setAttributeFilter('population > 1000000 and population < 5000000');```"
            ],
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "setAttributeFilter",
            "params": [
                {
                    "name": "filter",
                    "description": "",
                    "type": "String|null",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "class": "gdal.Layer"
        },
        {
            "file": "src/gdal_layer.cpp",
            "line": 381,
            "readonly": "",
            "itemtype": "attribute",
            "name": "ds",
            "type": "{gdal.Dataset}",
            "class": "gdal.Layer"
        },
        {
            "file": "src/gdal_layer.cpp",
            "line": 390,
            "readonly": "",
            "itemtype": "attribute",
            "name": "srs",
            "type": "{gdal.SpatialReference}",
            "class": "gdal.Layer"
        },
        {
            "file": "src/gdal_layer.cpp",
            "line": 406,
            "readonly": "",
            "itemtype": "attribute",
            "name": "name",
            "type": "{string}",
            "class": "gdal.Layer"
        },
        {
            "file": "src/gdal_layer.cpp",
            "line": 422,
            "readonly": "",
            "itemtype": "attribute",
            "name": "geomColumn",
            "type": "{string}",
            "class": "gdal.Layer"
        },
        {
            "file": "src/gdal_layer.cpp",
            "line": 438,
            "readonly": "",
            "itemtype": "attribute",
            "name": "fidColumn",
            "type": "{string}",
            "class": "gdal.Layer"
        },
        {
            "file": "src/gdal_layer.cpp",
            "line": 454,
            "readonly": "",
            "itemtype": "attribute",
            "name": "geomType",
            "type": "{number} (see {{#crossLink \"Constants (wkb)\"}}geometry\ntypes{{/crossLink}})",
            "class": "gdal.Layer"
        },
        {
            "file": "src/gdal_layer.cpp",
            "line": 471,
            "readonly": "",
            "itemtype": "attribute",
            "name": "features",
            "type": "{gdal.LayerFeatures}",
            "class": "gdal.Layer"
        },
        {
            "file": "src/gdal_layer.cpp",
            "line": 480,
            "readonly": "",
            "itemtype": "attribute",
            "name": "fields",
            "type": "{gdal.LayerFields}",
            "class": "gdal.Layer"
        },
        {
            "file": "src/gdal_mdarray.cpp",
            "line": 198,
            "description": "Read data from the MDArray\n\nThis will extract the context of a (hyper-)rectangle from the array into a buffer.\nIf the buffer can be passed as an argument or it can be allocated by the function.\nGeneralized n-dimensional strides are supported.\n\nAlthough this method can be used in its raw form, it works best when used with the ndarray plugin.",
            "itemtype": "method",
            "name": "read",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "MDArrayOptions",
                    "props": [
                        {
                            "name": "origin",
                            "description": "An array of the starting indices",
                            "type": "Number[]"
                        },
                        {
                            "name": "span",
                            "description": "An array specifying the number of elements to read in each dimension",
                            "type": "Number[]"
                        },
                        {
                            "name": "stride",
                            "description": "An array of strides for the output array, mandatory if the array is specified",
                            "type": "Number[]",
                            "optional": true
                        },
                        {
                            "name": "data_type",
                            "description": "See {{#crossLink \"Constants (GDT)\"}}GDT constants{{/crossLink}}.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "data",
                            "description": "The TypedArray (https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView#Typed_array_subclasses) to put the data in. A new array is created if not given.",
                            "type": "TypedArray",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "TypedArray"
            },
            "class": "gdal.MDArray"
        },
        {
            "file": "src/gdal_mdarray.cpp",
            "line": 218,
            "description": "Read data from the MDArray.\n{{{async}}}\n\nThis will extract the context of a (hyper-)rectangle from the array into a buffer.\nIf the buffer can be passed as an argument or it can be allocated by the function.\nGeneralized n-dimensional strides are supported.\n\nAlthough this method can be used in its raw form, it works best when used with the ndarray plugin.",
            "itemtype": "method",
            "name": "readAsync",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "MDArrayOptions",
                    "props": [
                        {
                            "name": "origin",
                            "description": "An array of the starting indices",
                            "type": "Number[]"
                        },
                        {
                            "name": "span",
                            "description": "An array specifying the number of elements to read in each dimension",
                            "type": "Number[]"
                        },
                        {
                            "name": "stride",
                            "description": "An array of strides for the output array, mandatory if the array is specified",
                            "type": "Number[]",
                            "optional": true
                        },
                        {
                            "name": "data_type",
                            "description": "See {{#crossLink \"Constants (GDT)\"}}GDT constants{{/crossLink}}.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "data",
                            "description": "The TypedArray (https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView#Typed_array_subclasses) to put the data in. A new array is created if not given.",
                            "type": "TypedArray",
                            "optional": true
                        },
                        {
                            "name": "progress_cb",
                            "description": "{{{progress_cb}}}",
                            "type": "ProgressCb",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<TypedArray>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "A TypedArray (https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView#Typed_array_subclasses) of values.",
                "type": "Promise<TypedArray>"
            },
            "class": "gdal.MDArray"
        },
        {
            "file": "src/gdal_mdarray.cpp",
            "line": 343,
            "description": "Get a partial view of the MDArray\n\nThe slice expression uses the same syntax as NumPy basic slicing and indexing. See (https://www.numpy.org/devdocs/reference/arrays.indexing.html#basic-slicing-and-indexing). Or it can use field access by name. See (https://www.numpy.org/devdocs/reference/arrays.indexing.html#field-access).",
            "itemtype": "method",
            "name": "getView",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "view",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.MDArray"
            },
            "class": "gdal.MDArray"
        },
        {
            "file": "src/gdal_mdarray.cpp",
            "line": 370,
            "description": "Return an array that is a mask for the current array.\n\nThis array will be of type Byte, with values set to 0 to indicate invalid pixels of the current array, and values set to 1 to indicate valid pixels.\n\nThe generic implementation honours the NoDataValue, as well as various netCDF CF attributes: missing_value, _FillValue, valid_min, valid_max and valid_range.",
            "itemtype": "method",
            "name": "getMask",
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "gdal.MDArray"
            },
            "class": "gdal.MDArray"
        },
        {
            "file": "src/gdal_mdarray.cpp",
            "line": 396,
            "description": "Return a view of this array as a gdal.Dataset (ie 2D)\n\nIn the case of > 2D arrays, additional dimensions will be represented as raster bands.",
            "itemtype": "method",
            "name": "asDataset",
            "params": [
                {
                    "name": "x",
                    "description": "dimension to be used as X axis",
                    "type": "Number|string"
                },
                {
                    "name": "y",
                    "description": "dimension to be used as Y axis",
                    "type": "Number|string"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "",
                "type": "gdal.Dataset"
            },
            "class": "gdal.MDArray"
        },
        {
            "file": "src/gdal_mdarray.cpp",
            "line": 429,
            "description": "Spatial reference associated with MDArray",
            "throws": {
                "description": "Error"
            },
            "itemtype": "attribute",
            "name": "srs",
            "type": "{gdal.SpatialReference}",
            "class": "gdal.MDArray"
        },
        {
            "file": "src/gdal_mdarray.cpp",
            "line": 449,
            "description": "Raster value offset.",
            "itemtype": "attribute",
            "name": "offset",
            "type": "{number}",
            "class": "gdal.MDArray"
        },
        {
            "file": "src/gdal_mdarray.cpp",
            "line": 466,
            "description": "Raster value scale.",
            "itemtype": "attribute",
            "name": "scale",
            "type": "{number}",
            "class": "gdal.MDArray"
        },
        {
            "file": "src/gdal_mdarray.cpp",
            "line": 483,
            "description": "No data value for this array.",
            "itemtype": "attribute",
            "name": "noDataValue",
            "type": "{number|null}",
            "class": "gdal.MDArray"
        },
        {
            "file": "src/gdal_mdarray.cpp",
            "line": 504,
            "description": "Raster unit type (name for the units of this raster's values).\nFor instance, it might be `\"m\"` for an elevation model in meters,\nor `\"ft\"` for feet. If no units are available, a value of `\"\"`\nwill be returned.",
            "itemtype": "attribute",
            "name": "unitType",
            "type": "{string}",
            "class": "gdal.MDArray"
        },
        {
            "file": "src/gdal_mdarray.cpp",
            "line": 520,
            "readonly": "",
            "itemtype": "attribute",
            "name": "dataType",
            "type": "{string}",
            "class": "gdal.MDArray"
        },
        {
            "file": "src/gdal_mdarray.cpp",
            "line": 540,
            "readonly": "",
            "itemtype": "attribute",
            "name": "dimensions",
            "type": "{gdal.GroupDimensions}",
            "class": "gdal.MDArray"
        },
        {
            "file": "src/gdal_mdarray.cpp",
            "line": 549,
            "readonly": "",
            "itemtype": "attribute",
            "name": "attributes",
            "type": "{gdal.ArrayAttributes}",
            "class": "gdal.MDArray"
        },
        {
            "file": "src/gdal_mdarray.cpp",
            "line": 558,
            "readonly": "",
            "itemtype": "attribute",
            "name": "description",
            "type": "{string}",
            "class": "gdal.MDArray"
        },
        {
            "file": "src/gdal_mdarray.cpp",
            "line": 571,
            "description": "The flattened length of the array",
            "readonly": "",
            "itemtype": "attribute",
            "name": "length",
            "type": "{number}",
            "class": "gdal.MDArray"
        },
        {
            "file": "src/gdal_memfile.cpp",
            "line": 108,
            "description": "Create an in-memory `/vsimem/` file from a `Buffer`.\nThis is a zero-copy operation - GDAL will read from the Buffer which will be\nprotected by the GC even if it goes out of scope.\n\nThe file will stay in memory until it is deleted with `gdal.vsimem.release`.\n\nThe file will be in read-write mode, but GDAL won't\nbe able to extend it as the allocated memory will be tied to the `Buffer` object.\nUse `gdal.vsimem.copy` to create an extendable copy.",
            "static": 1,
            "itemtype": "method",
            "name": "set",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "data",
                    "description": "A binary buffer containing the file data",
                    "type": "Buffer"
                },
                {
                    "name": "filename",
                    "description": "A file name beginning with `/vsimem/`",
                    "type": "String"
                }
            ],
            "class": "gdal.vsimem"
        },
        {
            "file": "src/gdal_memfile.cpp",
            "line": 136,
            "description": "Create an in-memory `/vsimem/` file copying a `Buffer`.\nThis method copies the `Buffer` into GDAL's own memory heap\ncreating an in-memory file that can be freely extended by GDAL.\n`gdal.vsimem.set` is the better choice unless the file needs to be extended.\n\nThe file will stay in memory until it is deleted with `gdal.vsimem.release`.",
            "static": 1,
            "itemtype": "method",
            "name": "copy",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "data",
                    "description": "A binary buffer containing the file data",
                    "type": "Buffer"
                },
                {
                    "name": "filename",
                    "description": "A file name beginning with `/vsimem/`",
                    "type": "String"
                }
            ],
            "class": "gdal.vsimem"
        },
        {
            "file": "src/gdal_memfile.cpp",
            "line": 177,
            "description": "Delete and retrieve the contents of an in-memory `/vsimem/` file.\nThis is a very fast zero-copy operation.\nIt does not block the event loop.\nIf the file was created by `vsimem.set`, it will return a reference\nto the same `Buffer` that was used to create it.\nOtherwise it will construct a new `Buffer` object with the GDAL\nallocated buffer as its backing store.\n\n***WARNING***!\n\nThe file must not be open or random memory corruption is possible with GDAL <= 3.3.1.\nGDAL >= 3.3.2 will gracefully fail further operations and this function will always be safe.",
            "static": 1,
            "itemtype": "method",
            "name": "release",
            "params": [
                {
                    "name": "filename",
                    "description": "A file name beginning with `/vsimem/`",
                    "type": "String"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "A binary buffer containing all the data",
                "type": "Buffer"
            },
            "class": "gdal.vsimem"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 163,
            "description": "Saves changes to disk.",
            "itemtype": "method",
            "name": "flush",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 168,
            "description": "Saves changes to disk.\n{{{async}}}",
            "itemtype": "method",
            "name": "flushAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<void>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<void>"
            },
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 179,
            "description": "Return the status flags of the mask band associated with the band.\n\nThe result will be a bitwise OR-ed set of status flags with the following\navailable definitions that may be extended in the future:\n\n  - `GMF_ALL_VALID` (`0x01`): There are no invalid pixels, all mask values\nwill be 255. When used this will normally be the only flag set.\n  - `GMF_PER_DATASET` (`0x02`): The mask band is shared between all bands on\nthe dataset.\n  - `GMF_ALPHA` (`0x04`): The mask band is actually an alpha band and may\nhave values other than 0 and 255.\n  - `GMF_NODATA` (`0x08`): Indicates the mask is actually being generated\nfrom nodata values. (mutually exclusive of `GMF_ALPHA`)",
            "itemtype": "method",
            "name": "getMaskFlags",
            "return": {
                "description": "Mask flags",
                "type": "Number"
            },
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 201,
            "description": "Adds a mask band to the current band.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "createMaskBand",
            "params": [
                {
                    "name": "flags",
                    "description": "Mask flags",
                    "type": "Number"
                }
            ],
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 212,
            "description": "Return the mask band associated with the band.",
            "itemtype": "method",
            "name": "getMaskBand",
            "return": {
                "description": "",
                "type": "gdal.RasterBand"
            },
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 231,
            "description": "Fill this band with a constant value.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "fill",
            "params": [
                {
                    "name": "real_value",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "imaginary_value",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 241,
            "description": "Fill this band with a constant value.\n{{{async}}}",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "fillAsync",
            "params": [
                {
                    "name": "real_value",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "imaginary_value",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<void>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<void>"
            },
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 292,
            "description": "Return a view of this raster band as a 2D multidimensional GDALMDArray.\n\nThe band must be linked to a GDALDataset.\n\nIf the dataset has a geotransform attached, the X and Y dimensions of the returned array will have an associated indexing variable.\n\nRequires GDAL>=3.3 with MDArray support, won't be defined otherwise",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "asMDArray",
            "return": {
                "description": "",
                "type": "gdal.MDArray"
            },
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 321,
            "description": "Fetch image statistics.\n\nReturns the minimum, maximum, mean and standard deviation of all pixel values\nin this band. If approximate statistics are sufficient, the\n`allow_approximation` argument can be set to `true` in which case overviews,\nor a subset of image tiles may be used in computing the statistics.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "getStatistics",
            "params": [
                {
                    "name": "allow_approximation",
                    "description": "If `true` statistics may be computed\nbased on overviews or a subset of all tiles.",
                    "type": "Boolean"
                },
                {
                    "name": "force",
                    "description": "If `false` statistics will only be returned if it can\nbe done without rescanning the image.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Statistics containing `\"min\"`, `\"max\"`, `\"mean\"`,\n`\"std_dev\"` properties.",
                "type": "Object"
            },
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 368,
            "description": "Computes image statistics.\n\nReturns the minimum, maximum, mean and standard deviation of all pixel values\nin this band. If approximate statistics are sufficient, the\n`allow_approximation` argument can be set to `true` in which case overviews,\nor a subset of image tiles may be used in computing the statistics.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "computeStatistics",
            "params": [
                {
                    "name": "allow_approximation",
                    "description": "If `true` statistics may be computed\nbased on overviews or a subset of all tiles.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Statistics containing `\"min\"`, `\"max\"`, `\"mean\"`,\n`\"std_dev\"` properties.",
                "type": "Stats"
            },
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 384,
            "description": "Computes image statistics.\n{{async}}\n\nReturns the minimum, maximum, mean and standard deviation of all pixel values\nin this band. If approximate statistics are sufficient, the\n`allow_approximation` argument can be set to `true` in which case overviews,\nor a subset of image tiles may be used in computing the statistics.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "computeStatisticsAsync",
            "params": [
                {
                    "name": "allow_approximation",
                    "description": "If `true` statistics may be computed\nbased on overviews or a subset of all tiles.",
                    "type": "Boolean"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<stats>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "Statistics containing `\"min\"`, `\"max\"`, `\"mean\"`,\n`\"std_dev\"` properties.",
                "type": "Promise<stats>"
            },
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 443,
            "description": "Set statistics on the band. This method can be used to store\nmin/max/mean/standard deviation statistics.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "setStatistics",
            "params": [
                {
                    "name": "min",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "mean",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "std_dev",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 472,
            "description": "Returns band metadata",
            "itemtype": "method",
            "name": "getMetadata",
            "params": [
                {
                    "name": "domain",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Any"
            },
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 480,
            "description": "Returns band metadata.\n{{{async}}}",
            "itemtype": "method",
            "name": "getMetadataAsync",
            "params": [
                {
                    "name": "domain",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<any>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<any>"
            },
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 504,
            "description": "Set metadata. Can return a warning (false) for formats not supporting persistent metadata.",
            "itemtype": "method",
            "name": "setMetadata",
            "params": [
                {
                    "name": "metadata",
                    "description": "",
                    "type": "Object|string[]"
                },
                {
                    "name": "domain",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 513,
            "description": "Set metadata. Can return a warning (false) for formats not supporting persistent metadata.\n{{{async}}}",
            "itemtype": "method",
            "name": "setMetadataAsync",
            "params": [
                {
                    "name": "metadata",
                    "description": "",
                    "type": "Object|string[]"
                },
                {
                    "name": "domain",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<boolean>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<boolean>"
            },
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 546,
            "readonly": "",
            "itemtype": "attribute",
            "name": "ds",
            "type": "{gdal.Dataset}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 555,
            "readonly": "",
            "itemtype": "attribute",
            "name": "overviews",
            "type": "{gdal.RasterBandOverviews}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 564,
            "readonly": "",
            "itemtype": "attribute",
            "name": "pixels",
            "type": "{gdal.RasterBandPixels}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 573,
            "readonly": "",
            "itemtype": "attribute",
            "name": "id",
            "type": "{number|null}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 579,
            "readonly": "",
            "itemtype": "attribute",
            "name": "idAsync",
            "type": "{Promise<number|null>}\n{{{async_getter}}}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 602,
            "description": "Name of of band.",
            "readonly": "",
            "itemtype": "attribute",
            "name": "description",
            "type": "{string}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 610,
            "description": "Name of of band.\n{{{async_getter}}}",
            "readonly": "",
            "itemtype": "attribute",
            "name": "descriptionAsync",
            "type": "{Promise<string>}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 628,
            "description": "Size object containing `\"x\"` and `\"y\"` properties.",
            "readonly": "",
            "itemtype": "attribute",
            "name": "size",
            "type": "{xyz}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 636,
            "description": "Size object containing `\"x\"` and `\"y\"` properties.\n{{{async_getter}}}",
            "readonly": "",
            "itemtype": "attribute",
            "name": "sizeAsync",
            "type": "{Promise<xyz>}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 668,
            "description": "Size object containing `\"x\"` and `\"y\"` properties.",
            "readonly": "",
            "itemtype": "attribute",
            "name": "blockSize",
            "type": "{xyz}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 676,
            "description": "Size object containing `\"x\"` and `\"y\"` properties.\n{{{async_getter}}}",
            "readonly": "",
            "itemtype": "attribute",
            "name": "blockSizeAsync",
            "type": "{Promise<xyz>}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 712,
            "description": "Minimum value for this band.",
            "readonly": "",
            "itemtype": "attribute",
            "name": "minimum",
            "type": "{number|null}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 720,
            "description": "Minimum value for this band.\n{{{async_getter}}}",
            "readonly": "",
            "itemtype": "attribute",
            "name": "minimumAsync",
            "type": "{Promise<number|null>}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 746,
            "description": "Maximum value for this band.",
            "readonly": "",
            "itemtype": "attribute",
            "name": "maximum",
            "type": "{number|null}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 754,
            "description": "Maximum value for this band.\n{{{async_getter}}}",
            "readonly": "",
            "itemtype": "attribute",
            "name": "maximumAsync",
            "type": "{Promise<number|null>}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 780,
            "description": "Raster value offset.",
            "itemtype": "attribute",
            "name": "offset",
            "type": "{number|null}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 787,
            "description": "Raster value offset.\n{{{async_getter}}}",
            "itemtype": "attribute",
            "name": "offsetAsync",
            "readonly": "",
            "type": "{Promise<number|null>}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 813,
            "description": "Raster value scale.",
            "itemtype": "attribute",
            "name": "scale",
            "type": "{number|null}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 820,
            "description": "Raster value scale.\n{{{async_getter}}}",
            "itemtype": "attribute",
            "name": "scaleAsync",
            "readonly": "",
            "type": "{Promise<number|null>}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 846,
            "description": "No data value for this band.",
            "itemtype": "attribute",
            "name": "noDataValue",
            "type": "{number|null}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 853,
            "description": "No data value for this band.\n{{{async_getter}}}",
            "itemtype": "attribute",
            "name": "noDataValueAsync",
            "readonly": "",
            "type": "{Promise<number|null>}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 881,
            "description": "Raster unit type (name for the units of this raster's values).\nFor instance, it might be `\"m\"` for an elevation model in meters,\nor `\"ft\"` for feet. If no units are available, a value of `\"\"`\nwill be returned.",
            "itemtype": "attribute",
            "name": "unitType",
            "type": "{string|null}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 891,
            "description": "Raster unit type (name for the units of this raster's values).\nFor instance, it might be `\"m\"` for an elevation model in meters,\nor `\"ft\"` for feet. If no units are available, a value of `\"\"`\nwill be returned.\n{{{async_getter}}}",
            "itemtype": "attribute",
            "name": "unitTypeAsync",
            "readonly": "",
            "type": "{Promise<string|null>}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 915,
            "description": "Pixel data type ({{#crossLink \"Constants (GDT)\"}}see GDT\n constants{{/crossLink}}) used for this band.",
            "readonly": "",
            "itemtype": "attribute",
            "name": "dataType",
            "type": "{string|null}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 925,
            "description": "Pixel data type ({{#crossLink \"Constants (GDT)\"}}see GDT\n constants{{/crossLink}}) used for this band.\n {{{async_getter}}}",
            "readonly": "",
            "itemtype": "attribute",
            "name": "dataTypeAsync",
            "type": "{Promise<string|null>}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 951,
            "description": "Indicates if the band is read-only.",
            "readonly": "",
            "itemtype": "attribute",
            "name": "readOnly",
            "type": "{boolean}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 959,
            "description": "Indicates if the band is read-only.\n{{{async_getter}}}",
            "readonly": "",
            "itemtype": "attribute",
            "name": "readOnlyAsync",
            "type": "{Promise<boolean>}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 980,
            "description": "An indicator if the underlying datastore can compute arbitrary overviews\nefficiently, such as is the case with OGDI over a network. Datastores with\narbitrary overviews don't generally have any fixed overviews, but GDAL's\n`RasterIO()` method can be used in downsampling mode to get overview\ndata efficiently.",
            "readonly": "",
            "itemtype": "attribute",
            "name": "hasArbitraryOverviews",
            "type": "{boolean}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 992,
            "description": "An indicator if the underlying datastore can compute arbitrary overviews\nefficiently, such as is the case with OGDI over a network. Datastores with\narbitrary overviews don't generally have any fixed overviews, but GDAL's\n`RasterIO()` method can be used in downsampling mode to get overview\ndata efficiently.\n{{{async_getter}}}",
            "readonly": "",
            "itemtype": "attribute",
            "name": "hasArbitraryOverviewsAsync",
            "type": "{Promise<boolean>}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 1017,
            "description": "List of list of category names for this raster.",
            "itemtype": "attribute",
            "name": "categoryNames",
            "type": "{string[]}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 1024,
            "description": "List of list of category names for this raster.\n{{{async_getter}}}",
            "itemtype": "attribute",
            "name": "categoryNamesAsync",
            "readonly": "",
            "type": "{Promise<string[]>}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 1063,
            "description": "Color interpretation mode ({{#crossLink \"Constants (GCI)\"}}see GCI\nconstants{{/crossLink}}).",
            "itemtype": "attribute",
            "name": "colorInterpretation",
            "type": "{string|null}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 1071,
            "description": "Color interpretation mode ({{#crossLink \"Constants (GCI)\"}}see GCI\nconstants{{/crossLink}}).\n{{{async_getter}}}",
            "itemtype": "attribute",
            "name": "colorInterpretationAsync",
            "readonly": "",
            "type": "{Promise<string|null>}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 1202,
            "description": "Color table ({{#crossLink \"ColorTable\"}}see gdal.ColorTable{{/crossLink}}).",
            "itemtype": "attribute",
            "name": "colorTable",
            "type": "{gdal.ColorTable|null}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 1209,
            "description": "Color table ({{#crossLink \"ColorTable\"}}see gdal.ColorTable{{/crossLink}}).\n{{{async_getter}}}",
            "itemtype": "attribute",
            "name": "colorTableAsync",
            "readonly": "",
            "type": "{Promise<gdal.ColorTable|null>}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 176,
            "description": "Set a GeogCS based on well known name.",
            "itemtype": "method",
            "name": "setWellKnownGeogCS",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 185,
            "description": "Convert in place to ESRI WKT format.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "morphToESRI",
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 193,
            "description": "Convert in place from ESRI WKT format.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "morphFromESRI",
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 201,
            "description": "This method returns `true` if EPSG feels this geographic coordinate system\nshould be treated as having lat/long coordinate ordering.\n\nCurrently this returns `true` for all geographic coordinate systems with an\nEPSG code set, and AXIS values set defining it as lat, long. Note that\ncoordinate systems with an EPSG code and no axis settings will be assumed\nto not be lat/long.\n\n`false` will be returned for all coordinate systems that are not geographic,\nor that do not have an EPSG code set.",
            "itemtype": "method",
            "name": "EPSGTreatsAsLatLong",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 218,
            "description": "This method returns `true` if EPSG feels this projected coordinate system\nshould be treated as having northing/easting coordinate ordering.",
            "itemtype": "method",
            "name": "EPSGTreatsAsNorthingEasting",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 227,
            "description": "Check if geocentric coordinate system.",
            "itemtype": "method",
            "name": "isGeocentric",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 235,
            "description": "Check if geographic coordinate system.",
            "itemtype": "method",
            "name": "isGeographic",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 243,
            "description": "Check if projected coordinate system.",
            "itemtype": "method",
            "name": "isProjected",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 251,
            "description": "Check if local coordinate system.",
            "itemtype": "method",
            "name": "isLocal",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 259,
            "description": "Check if vertical coordinate system.",
            "itemtype": "method",
            "name": "isVertical",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 267,
            "description": "Check if compound coordinate system.",
            "itemtype": "method",
            "name": "isCompound",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 275,
            "description": "Do the GeogCS'es match?",
            "itemtype": "method",
            "name": "isSameGeogCS",
            "params": [
                {
                    "name": "srs",
                    "description": "",
                    "type": "gdal.SpatialReference"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 285,
            "description": "Do the VertCS'es match?",
            "itemtype": "method",
            "name": "isSameVertCS",
            "params": [
                {
                    "name": "srs",
                    "description": "",
                    "type": "gdal.SpatialReference"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 295,
            "description": "Do these two spatial references describe the same system?",
            "itemtype": "method",
            "name": "isSame",
            "params": [
                {
                    "name": "srs",
                    "description": "",
                    "type": "gdal.SpatialReference"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 304,
            "description": "Set EPSG authority info if possible.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "autoIdentifyEPSG",
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 312,
            "description": "Clones the spatial reference.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "",
                "type": "gdal.SpatialReference"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 323,
            "description": "Make a duplicate of the GEOGCS node of this OGRSpatialReference object.",
            "itemtype": "method",
            "name": "cloneGeogCS",
            "return": {
                "description": "",
                "type": "gdal.SpatialReference"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 334,
            "description": "Get the authority name for a node. The most common authority is \"EPSG\".",
            "itemtype": "method",
            "name": "getAuthorityName",
            "params": [
                {
                    "name": "target_key",
                    "description": "The partial or complete path to the node to get an authority from. ie. `\"PROJCS\"`, `\"GEOGCS\"`, \"`GEOGCS|UNIT\"` or `null` to search for an authority node on the root element.",
                    "type": "String|null",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 351,
            "description": "Get the authority code for a node.",
            "itemtype": "method",
            "name": "getAuthorityCode",
            "params": [
                {
                    "name": "target_key",
                    "description": "The partial or complete path to the node to get an authority from. ie. `\"PROJCS\"`, `\"GEOGCS\"`, \"`GEOGCS|UNIT\"` or `null` to search for an authority node on the root element.",
                    "type": "String|null",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 368,
            "description": "Convert this SRS into WKT format.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "toWKT",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 392,
            "description": "Convert this SRS into a a nicely formatted WKT string for display to a\nperson.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "toPrettyWKT",
            "params": [
                {
                    "name": "simplify",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 421,
            "description": "Export coordinate system in PROJ.4 format.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "toProj4",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 450,
            "description": "Export coordinate system in XML format.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "toXML",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 474,
            "description": "Fetch indicated attribute of named node.",
            "itemtype": "method",
            "name": "getAttrValue",
            "params": [
                {
                    "name": "node_name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "attr_index",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 492,
            "description": "Creates a spatial reference from a WKT string.",
            "static": 1,
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "fromWKT",
            "params": [
                {
                    "name": "wkt",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.SpatialReference"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 518,
            "description": "Creates a spatial reference from a Proj.4 string.",
            "static": 1,
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "fromProj4",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.SpatialReference"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 543,
            "description": "Creates a spatial reference from a WMSAUTO string.\n\nNote that the WMS 1.3 specification does not include the units code, while\napparently earlier specs do. GDAL tries to guess around this.",
            "example": [
                "\n```\nvar wms = 'AUTO:42001,99,8888';\nvar ref = gdal.SpatialReference.fromWMSAUTO(wms);```"
            ],
            "static": 1,
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "fromWMSAUTO",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.SpatialReference"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 576,
            "description": "Import coordinate system from XML format (GML only currently).",
            "static": 1,
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "fromXML",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.SpatialReference"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 601,
            "description": "Initialize from OGC URN.\n\nThe OGC URN should be prefixed with \"urn:ogc:def:crs:\" per recommendation\npaper 06-023r1. Currently EPSG and OGC authority values are supported,\nincluding OGC auto codes, but not including CRS1 or CRS88 (NAVD88).",
            "static": 1,
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "fromURN",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.SpatialReference"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 630,
            "description": "Initialize from OGC URL.\n\nThe OGC URL should be prefixed with \"http://opengis.net/def/crs\" per best\npractice paper 11-135. Currently EPSG and OGC authority values are supported,\nincluding OGC auto codes, but not including CRS1 or CRS88 (NAVD88).",
            "static": 1,
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "fromCRSURL",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.SpatialReference"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 644,
            "description": "Initialize from OGC URL.\n{{{async}}}\n\nThe OGC URL should be prefixed with \"http://opengis.net/def/crs\" per best\npractice paper 11-135. Currently EPSG and OGC authority values are supported,\nincluding OGC auto codes, but not including CRS1 or CRS88 (NAVD88).",
            "static": 1,
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "fromCRSURLAsync",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.SpatialReference>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.SpatialReference>"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 679,
            "description": "Initialize spatial reference from a URL.\n\nThis method will download the spatial reference from the given URL.",
            "static": 1,
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "fromURL",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.SpatialReference"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 691,
            "description": "Initialize spatial reference from a URL.\n{{async}}\n\nThis method will download the spatial reference from the given URL.",
            "static": 1,
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "fromURLAsync",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.SpatialReference>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.SpatialReference>"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 725,
            "description": "Initialize from a Mapinfo style CoordSys definition.",
            "static": 1,
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "fromMICoordSys",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.SpatialReference"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 750,
            "description": "Initialize from an arbitrary spatial reference string.\n\nThis method will examine the provided input, and try to deduce the format,\nand then use it to initialize the spatial reference system.",
            "static": 1,
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "fromUserInput",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.SpatialReference"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 763,
            "description": "Initialize from an arbitrary spatial reference string.\n\nThis method will examine the provided input, and try to deduce the format,\nand then use it to initialize the spatial reference system.\n{{{async}}}",
            "static": 1,
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "fromUserInputAsync",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.SpatialReference>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.SpatialReference>"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 797,
            "description": "Initialize from EPSG GCS or PCS code.",
            "example": [
                "\n```\nvar ref = gdal.SpatialReference.fromEPSGA(4326);```"
            ],
            "static": 1,
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "fromEPSG",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.SpatialReference"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 826,
            "description": "Initialize from EPSG GCS or PCS code.\n\nThis method is similar to `fromEPSG()` except that EPSG preferred axis\nordering *will* be applied for geographic and projected coordinate systems.\nEPSG normally defines geographic coordinate systems to use lat/long, and also\nthere are also a few projected coordinate systems that use northing/easting\norder contrary to typical GIS use).",
            "example": [
                "\n```\nvar ref = gdal.SpatialReference.fromEPSGA(26910);```"
            ],
            "static": 1,
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "fromEPSGA",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.SpatialReference"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 861,
            "description": "Import coordinate system from ESRI .prj format(s).\n\nThis function will read the text loaded from an ESRI .prj file, and translate\nit into an OGRSpatialReference definition. This should support many (but by\nno means all) old style (Arc/Info 7.x) .prj files, as well as the newer\npseudo-OGC WKT .prj files. Note that new style .prj files are in OGC WKT\nformat, but require some manipulation to correct datum names, and units on\nsome projection parameters. This is addressed within importFromESRI() by an\nautomatical call to morphFromESRI().\n\nCurrently only GEOGRAPHIC, UTM, STATEPLANE, GREATBRITIAN_GRID, ALBERS,\nEQUIDISTANT_CONIC, TRANSVERSE (mercator), POLAR, MERCATOR and POLYCONIC\nprojections are supported from old style files.",
            "static": 1,
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "fromESRI",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "Object|string[]"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.SpatialReference"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 906,
            "description": "Fetch linear geographic coordinate system units.",
            "itemtype": "method",
            "name": "getLinearUnits",
            "return": {
                "description": "An object containing `value` and `unit` properties.",
                "type": "Units"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 926,
            "description": "Fetch angular geographic coordinate system units.",
            "itemtype": "method",
            "name": "getAngularUnits",
            "return": {
                "description": "An object containing `value` and `unit` properties.",
                "type": "Units"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 946,
            "description": "Validate SRS tokens.\n\nThis method attempts to verify that the spatial reference system is well\nformed, and consists of known tokens. The validation is not comprehensive.",
            "itemtype": "method",
            "name": "validate",
            "return": {
                "description": "`\"corrupt\"`, '\"unsupported\"', `null` (if fine)",
                "type": "String|null"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_utils.cpp",
            "line": 23,
            "description": "Library version of gdal_translate",
            "example": [
                "\nconst ds = gdal.open('input.tif')\nconst out = gdal.translate('/vsimem/temp.tif', ds, [ '-b', '1' ])"
            ],
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "translate",
            "static": 1,
            "params": [
                {
                    "name": "destination",
                    "description": "destination filename",
                    "type": "String"
                },
                {
                    "name": "source",
                    "description": "source dataset",
                    "type": "gdal.Dataset"
                },
                {
                    "name": "args",
                    "description": "array of CLI options for gdal_translate",
                    "type": "String[]",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "additional options",
                    "type": "UtilOptions",
                    "optional": true,
                    "props": [
                        {
                            "name": "progress_cb",
                            "description": "{{{progress_cb}}}",
                            "type": "ProgressCb",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Dataset"
            },
            "class": "gdal"
        },
        {
            "file": "src/gdal_utils.cpp",
            "line": 42,
            "description": "Library version of gdal_translate\n{{{async}}}",
            "example": [
                "\nconst ds = gdal.open('input.tif')\nconst out = gdal.translate('/vsimem/temp.tif', ds, [ '-b', '1' ])"
            ],
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "translateAsync",
            "static": 1,
            "params": [
                {
                    "name": "destination",
                    "description": "destination filename",
                    "type": "String"
                },
                {
                    "name": "source",
                    "description": "source dataset",
                    "type": "gdal.Dataset"
                },
                {
                    "name": "args",
                    "description": "array of CLI options for gdal_translate",
                    "type": "String[]",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "additional options",
                    "type": "UtilOptions",
                    "optional": true,
                    "props": [
                        {
                            "name": "progress_cb",
                            "description": "{{{progress_cb}}}",
                            "type": "ProgressCb",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Dataset>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Dataset>"
            },
            "class": "gdal"
        },
        {
            "file": "src/gdal_utils.cpp",
            "line": 103,
            "description": "Library version of ogr2ogr",
            "example": [
                "\nconst ds = gdal.open('input.geojson')\nconst out = gdal.vectorTranslate('/vsimem/temp.gpkg', [ '-of', 'GPKG' ], ds)"
            ],
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "vectorTranslate",
            "static": 1,
            "params": [
                {
                    "name": "destination",
                    "description": "destination",
                    "type": "string|gdal.Dataset"
                },
                {
                    "name": "source",
                    "description": "source dataset",
                    "type": "gdal.Dataset"
                },
                {
                    "name": "args",
                    "description": "array of CLI options for ogr2ogr",
                    "type": "String[]",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "additional options",
                    "type": "UtilOptions",
                    "optional": true,
                    "props": [
                        {
                            "name": "progress_cb",
                            "description": "{{{progress_cb}}}",
                            "type": "ProgressCb",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Dataset"
            },
            "class": "gdal"
        },
        {
            "file": "src/gdal_utils.cpp",
            "line": 122,
            "description": "Library version of ogr2ogr\n{{{async}}}",
            "example": [
                "\nconst ds = gdal.open('input.geojson')\nconst out = gdal.vectorTranslate('/vsimem/temp.gpkg', [ '-of', 'GPKG' ], ds)"
            ],
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "vectorTranslateAsync",
            "static": 1,
            "params": [
                {
                    "name": "destination",
                    "description": "destination",
                    "type": "string|gdal.Dataset"
                },
                {
                    "name": "source",
                    "description": "source dataset",
                    "type": "gdal.Dataset"
                },
                {
                    "name": "args",
                    "description": "array of CLI options for ogr2ogr",
                    "type": "String[]",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "additional options",
                    "type": "UtilOptions",
                    "optional": true,
                    "props": [
                        {
                            "name": "progress_cb",
                            "description": "{{{progress_cb}}}",
                            "type": "ProgressCb",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Dataset>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Dataset>"
            },
            "class": "gdal"
        },
        {
            "file": "src/gdal_utils.cpp",
            "line": 207,
            "description": "Library version of gdalinfo",
            "example": [
                "\nconst ds = gdal.open('input.tif')\nconst output = gdal.info('/vsimem/temp.tif')"
            ],
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "info",
            "static": 1,
            "params": [
                {
                    "name": "dataset",
                    "description": "",
                    "type": "gdal.Dataset"
                },
                {
                    "name": "args",
                    "description": "array of CLI options for gdalinfo",
                    "type": "String[]",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "gdal"
        },
        {
            "file": "src/gdal_utils.cpp",
            "line": 223,
            "description": "Library version of gdalinfo\n{{{async}}}",
            "example": [
                "\nconst ds = gdal.open('input.tif')\nconst output = gdal.info('/vsimem/temp.tif')"
            ],
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "infoAsync",
            "static": 1,
            "params": [
                {
                    "name": "dataset",
                    "description": "",
                    "type": "gdal.Dataset"
                },
                {
                    "name": "args",
                    "description": "array of CLI options for gdalinfo",
                    "type": "String[]",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<string>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<string>"
            },
            "class": "gdal"
        },
        {
            "file": "src/gdal_utils.cpp",
            "line": 272,
            "description": "Library version of gdalwarp",
            "example": [
                "\nconst ds = gdal.open('input.tif')\nconst output = gdal.warp('/vsimem/output.tiff', null, [ ds ], [ '-t_srs', 'epsg:3587' ])"
            ],
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "warp",
            "static": 1,
            "params": [
                {
                    "name": "dst_path",
                    "description": "destination path, null for an in-memory operation",
                    "type": "String|null"
                },
                {
                    "name": "dst_ds",
                    "description": "destination dataset, null for a new dataset",
                    "type": "gdal.Dataset|null"
                },
                {
                    "name": "src_ds",
                    "description": "array of source datasets",
                    "type": "gdal.Dataset[]"
                },
                {
                    "name": "args",
                    "description": "array of CLI options for gdalwarp",
                    "type": "String[]",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "additional options",
                    "type": "UtilOptions",
                    "optional": true,
                    "props": [
                        {
                            "name": "progress_cb",
                            "description": "{{{progress_cb}}}",
                            "type": "ProgressCb",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Dataset"
            },
            "class": "gdal"
        },
        {
            "file": "src/gdal_utils.cpp",
            "line": 292,
            "description": "Library version of gdalwarp\n{{{async}}}",
            "example": [
                "\nconst ds = await gdal.openAsync('input.tif')\nconst output = await gdal.warpAsync('/vsimem/output.tiff', null, [ ds ], [ '-t_srs', 'epsg:3587' ])"
            ],
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "warpAsync",
            "static": 1,
            "params": [
                {
                    "name": "dst_path",
                    "description": "destination path, null for an in-memory operation",
                    "type": "String|null"
                },
                {
                    "name": "dst_ds",
                    "description": "destination dataset, null for a new dataset",
                    "type": "gdal.Dataset|null"
                },
                {
                    "name": "src_ds",
                    "description": "array of source datasets",
                    "type": "gdal.Dataset[]"
                },
                {
                    "name": "args",
                    "description": "array of CLI options for gdalwarp",
                    "type": "String[]",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "additional options",
                    "type": "UtilOptions",
                    "optional": true,
                    "props": [
                        {
                            "name": "progress_cb",
                            "description": "{{{progress_cb}}}",
                            "type": "ProgressCb",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Dataset>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Dataset>"
            },
            "class": "gdal"
        },
        {
            "file": "src/gdal_warper.cpp",
            "line": 165,
            "description": "Reprojects a dataset.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "reprojectImage",
            "static": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "ReprojectOptions",
                    "props": [
                        {
                            "name": "src",
                            "description": "",
                            "type": "gdal.Dataset"
                        },
                        {
                            "name": "dst",
                            "description": "",
                            "type": "gdal.Dataset"
                        },
                        {
                            "name": "s_srs",
                            "description": "",
                            "type": "gdal.SpatialReference"
                        },
                        {
                            "name": "t_srs",
                            "description": "",
                            "type": "gdal.SpatialReference"
                        },
                        {
                            "name": "resampling",
                            "description": "Resampling algorithm ({{#crossLink \"Constants (GRA)\"}}available options{{/crossLink}})",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "cutline",
                            "description": "Must be in src dataset pixel coordinates. Use CoordinateTransformation to convert between georeferenced coordinates and pixel coordinates",
                            "type": "gdal.Geometry",
                            "optional": true
                        },
                        {
                            "name": "srcBands",
                            "description": "",
                            "type": "Number[]",
                            "optional": true
                        },
                        {
                            "name": "dstBands",
                            "description": "",
                            "type": "Number[]",
                            "optional": true
                        },
                        {
                            "name": "srcAlphaBand",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "dstAlphaBand",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "srcNodata",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "dstNodata",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "memoryLimit",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "maxError",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "multi",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "options] Warp options (see: [reference",
                            "description": "(https://gdal.org/doxygen/structGDALWarpOptions.html))",
                            "type": "String[]|object",
                            "optional": true
                        },
                        {
                            "name": "progress_cb",
                            "description": "{{{progress_cb}}}",
                            "type": "ProgressCb",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "gdal"
        },
        {
            "file": "src/gdal_warper.cpp",
            "line": 192,
            "description": "Reprojects a dataset.\n{{{async}}}",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "reprojectImageAsync",
            "static": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "ReprojectOptions",
                    "props": [
                        {
                            "name": "src",
                            "description": "",
                            "type": "gdal.Dataset"
                        },
                        {
                            "name": "dst",
                            "description": "",
                            "type": "gdal.Dataset"
                        },
                        {
                            "name": "s_srs",
                            "description": "",
                            "type": "gdal.SpatialReference"
                        },
                        {
                            "name": "t_srs",
                            "description": "",
                            "type": "gdal.SpatialReference"
                        },
                        {
                            "name": "resampling",
                            "description": "Resampling algorithm ({{#crossLink \"Constants (GRA)\"}}available options{{/crossLink}})",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "cutline",
                            "description": "Must be in src dataset pixel coordinates. Use CoordinateTransformation to convert between georeferenced coordinates and pixel coordinates",
                            "type": "gdal.Geometry",
                            "optional": true
                        },
                        {
                            "name": "srcBands",
                            "description": "",
                            "type": "Number[]",
                            "optional": true
                        },
                        {
                            "name": "dstBands",
                            "description": "",
                            "type": "Number[]",
                            "optional": true
                        },
                        {
                            "name": "srcAlphaBand",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "dstAlphaBand",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "srcNodata",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "dstNodata",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "memoryLimit",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "maxError",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "multi",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "options] Warp options (see:[reference",
                            "description": "(https://gdal.org/doxygen/structGDALWarpOptions.html)",
                            "type": "String[]|object",
                            "optional": true
                        },
                        {
                            "name": "progress_cb",
                            "description": "{{{progress_cb}}}",
                            "type": "ProgressCb",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<void>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<void>"
            },
            "class": "gdal"
        },
        {
            "file": "src/gdal_warper.cpp",
            "line": 313,
            "description": "Used to determine the bounds and resolution of the output virtual file which\nshould be large enough to include all the input image.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "suggestedWarpOutput",
            "static": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Warp options",
                    "type": "WarpOptions",
                    "props": [
                        {
                            "name": "src",
                            "description": "",
                            "type": "gdal.Dataset"
                        },
                        {
                            "name": "s_srs",
                            "description": "",
                            "type": "gdal.SpatialReference"
                        },
                        {
                            "name": "t_srs",
                            "description": "",
                            "type": "gdal.SpatialReference"
                        },
                        {
                            "name": "maxError",
                            "description": "",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        }
                    ]
                }
            ],
            "return": {
                "description": "An object containing `\"rasterSize\"` and `\"geoTransform\"`\nproperties.",
                "type": "WarpOutput"
            },
            "class": "gdal"
        },
        {
            "file": "src/gdal_warper.cpp",
            "line": 330,
            "description": "Used to determine the bounds and resolution of the output virtual file which\nshould be large enough to include all the input image.\n{{{async}}}",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "suggestedWarpOutputAsync",
            "static": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Warp options",
                    "type": "WarpOptions",
                    "props": [
                        {
                            "name": "src",
                            "description": "",
                            "type": "gdal.Dataset"
                        },
                        {
                            "name": "s_srs",
                            "description": "",
                            "type": "gdal.SpatialReference"
                        },
                        {
                            "name": "t_srs",
                            "description": "",
                            "type": "gdal.SpatialReference"
                        },
                        {
                            "name": "maxError",
                            "description": "",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<WarpOutput>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<WarpOutput>"
            },
            "class": "gdal"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 125,
            "itemtype": "attribute",
            "name": "lastError",
            "type": "{object}",
            "class": "gdal"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 313,
            "description": "Convert decimal degrees to degrees, minutes, and seconds string",
            "static": 1,
            "itemtype": "method",
            "name": "decToDMS",
            "params": [
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "axis",
                    "description": "`\"lat\"` or `\"long\"`",
                    "type": "String"
                },
                {
                    "name": "precision",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "2"
                }
            ],
            "return": {
                "description": "A string nndnn'nn.nn'\"L where n is a number and L is either\nN or E",
                "type": "String"
            },
            "class": "gdal"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 343,
            "description": "Set paths where proj will search it data.",
            "static": 1,
            "itemtype": "method",
            "name": "setPROJSearchPaths",
            "params": [
                {
                    "name": "Path",
                    "description": "`c:\\ProjData`",
                    "type": "String"
                }
            ],
            "class": "gdal"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 454,
            "description": "The collection of all drivers registered with GDAL",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.drivers",
            "type": "{gdal.GDALDrivers}",
            "class": "gdal"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 473,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.DMD_LONGNAME",
            "type": "{string}",
            "class": "Constants (DMD)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 479,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.DMD_MIMETYPE",
            "type": "{string}",
            "class": "Constants (DMD)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 485,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.DMD_HELPTOPIC",
            "type": "{string}",
            "class": "Constants (DMD)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 491,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.DMD_EXTENSION",
            "type": "{string}",
            "class": "Constants (DMD)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 497,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.DMD_CREATIONOPTIONLIST",
            "type": "{string}",
            "class": "Constants (DMD)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 506,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.DMD_CREATIONDATATYPES",
            "type": "{string}",
            "class": "Constants (DMD)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 518,
            "description": "Error level: (no error)",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.CE_None",
            "type": "{number}",
            "class": "Constants (CPL Error Levels)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 526,
            "description": "Error level: Debug",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.CE_Debug",
            "type": "{number}",
            "class": "Constants (CPL Error Levels)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 534,
            "description": "Error level: Warning",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.CE_Warning",
            "type": "{number}",
            "class": "Constants (CPL Error Levels)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 542,
            "description": "Error level: Failure",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.CE_Failure",
            "type": "{number}",
            "class": "Constants (CPL Error Levels)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 550,
            "description": "Error level: Fatal",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.CE_Fatal",
            "type": "{number}",
            "class": "Constants (CPL Error Levels)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 563,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.CPLE_None",
            "type": "{number}",
            "class": "Constants (CPL Error Codes)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 569,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.CPLE_AppDefined",
            "type": "{number}",
            "class": "Constants (CPL Error Codes)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 575,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.CPLE_OutOfMemory",
            "type": "{number}",
            "class": "Constants (CPL Error Codes)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 581,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.CPLE_FileIO",
            "type": "{number}",
            "class": "Constants (CPL Error Codes)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 587,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.CPLE_OpenFailed",
            "type": "{number}",
            "class": "Constants (CPL Error Codes)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 593,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.CPLE_IllegalArg",
            "type": "{number}",
            "class": "Constants (CPL Error Codes)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 599,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.CPLE_NotSupported",
            "type": "{number}",
            "class": "Constants (CPL Error Codes)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 605,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.CPLE_AssertionFailed",
            "type": "{number}",
            "class": "Constants (CPL Error Codes)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 611,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.CPLE_NoWriteAccess",
            "type": "{number}",
            "class": "Constants (CPL Error Codes)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 617,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.CPLE_UserInterrupt",
            "type": "{number}",
            "class": "Constants (CPL Error Codes)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 623,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.CPLE_objectNull",
            "type": "{number}",
            "class": "Constants (CPL Error Codes)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 634,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.DCAP_CREATE",
            "type": "{string}",
            "class": "Constants (DCAP)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 640,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.DCAP_CREATECOPY",
            "type": "{string}",
            "class": "Constants (DCAP)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 646,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.DCAP_VIRTUALIO",
            "type": "{string}",
            "class": "Constants (DCAP)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 657,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OLCRandomRead",
            "type": "{string}",
            "class": "Constants (OLC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 663,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OLCSequentialWrite",
            "type": "{string}",
            "class": "Constants (OLC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 669,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OLCRandomWrite",
            "type": "{string}",
            "class": "Constants (OLC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 675,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OLCFastSpatialFilter",
            "type": "{string}",
            "class": "Constants (OLC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 681,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OLCFastFeatureCount",
            "type": "{string}",
            "class": "Constants (OLC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 687,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OLCFastGetExtent",
            "type": "{string}",
            "class": "Constants (OLC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 693,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OLCCreateField",
            "type": "{string}",
            "class": "Constants (OLC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 699,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OLCDeleteField",
            "type": "{string}",
            "class": "Constants (OLC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 705,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OLCReorderFields",
            "type": "{string}",
            "class": "Constants (OLC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 711,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OLCAlterFieldDefn",
            "type": "{string}",
            "class": "Constants (OLC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 717,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OLCTransactions",
            "type": "{string}",
            "class": "Constants (OLC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 723,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OLCDeleteFeature",
            "type": "{string}",
            "class": "Constants (OLC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 729,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OLCFastSetNextByIndex",
            "type": "{string}",
            "class": "Constants (OLC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 736,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OLCStringsAsUTF8",
            "type": "{string}",
            "class": "Constants (OLC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 742,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OLCIgnoreFields",
            "type": "{string}",
            "class": "Constants (OLC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 750,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OLCCreateGeomField",
            "type": "{string}",
            "class": "Constants (OLC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 763,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.ODsCCreateLayer",
            "type": "{string}",
            "class": "Constants (ODsC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 769,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.ODsCDeleteLayer",
            "type": "{string}",
            "class": "Constants (ODsC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 775,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.ODsCCreateGeomFieldAfterCreateLayer",
            "type": "{string}",
            "class": "Constants (ODsC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 785,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.ODrCCreateDataSource",
            "type": "{string}",
            "class": "Constants (ODsC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 791,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.ODrCDeleteDataSource",
            "type": "{string}",
            "class": "Constants (ODsC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 809,
            "description": "Unknown or unspecified type",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GDT_Unknown",
            "type": "{string}",
            "class": "Constants (GDT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 816,
            "description": "Eight bit unsigned integer",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GDT_Byte",
            "type": "{string}",
            "class": "Constants (GDT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 823,
            "description": "Sixteen bit unsigned integer",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GDT_UInt16",
            "type": "{string}",
            "class": "Constants (GDT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 830,
            "description": "Sixteen bit signed integer",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GDT_Int16",
            "type": "{string}",
            "class": "Constants (GDT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 837,
            "description": "Thirty two bit unsigned integer",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GDT_UInt32",
            "type": "{string}",
            "class": "Constants (GDT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 844,
            "description": "Thirty two bit signed integer",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GDT_Int32",
            "type": "{string}",
            "class": "Constants (GDT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 851,
            "description": "Thirty two bit floating point",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GDT_Float32",
            "type": "{string}",
            "class": "Constants (GDT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 859,
            "description": "Sixty four bit floating point",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GDT_Float64",
            "type": "{string}",
            "class": "Constants (GDT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 867,
            "description": "Complex Int16",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GDT_CInt16",
            "type": "{string}",
            "class": "Constants (GDT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 874,
            "description": "Complex Int32",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GDT_CInt32",
            "type": "{string}",
            "class": "Constants (GDT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 881,
            "description": "Complex Float32",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GDT_CFloat32",
            "type": "{string}",
            "class": "Constants (GDT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 889,
            "description": "Complex Float64",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GDT_CFloat64",
            "type": "{string}",
            "class": "Constants (GDT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 899,
            "description": "String extended type for MDArrays (GDAL >= 3.1)",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GEDTC_String",
            "type": "{string}",
            "class": "Constants (GDT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 907,
            "description": "String extended type for MDArrays (GDAL >= 3.1)",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GEDTC_Compound",
            "type": "{string}",
            "class": "Constants (GDT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 920,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OJUndefined",
            "type": "{string}",
            "class": "Constants (OJ)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 926,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OJLeft",
            "type": "{string}",
            "class": "Constants (OJ)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 932,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OJRight",
            "type": "{string}",
            "class": "Constants (OJ)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 943,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GCI_Undefined",
            "type": "{string}",
            "class": "Constants (GCI)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 949,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GCI_GrayIndex",
            "type": "{string}",
            "class": "Constants (GCI)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 958,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GCI_PaletteIndex",
            "type": "{string}",
            "class": "Constants (GCI)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 967,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GCI_RedBand",
            "type": "{string}",
            "class": "Constants (GCI)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 976,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GCI_GreenBand",
            "type": "{string}",
            "class": "Constants (GCI)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 985,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GCI_BlueBand",
            "type": "{string}",
            "class": "Constants (GCI)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 994,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GCI_AlphaBand",
            "type": "{string}",
            "class": "Constants (GCI)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1003,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GCI_HueBand",
            "type": "{string}",
            "class": "Constants (GCI)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1012,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GCI_SaturationBand",
            "type": "{string}",
            "class": "Constants (GCI)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1021,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GCI_LightnessBand",
            "type": "{string}",
            "class": "Constants (GCI)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1030,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GCI_CyanBand",
            "type": "{string}",
            "class": "Constants (GCI)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1039,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GCI_MagentaBand",
            "type": "{string}",
            "class": "Constants (GCI)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1048,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GCI_YellowBand",
            "type": "{string}",
            "class": "Constants (GCI)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1057,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GCI_BlackBand",
            "type": "{string}",
            "class": "Constants (GCI)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1066,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GCI_YCbCr_YBand",
            "type": "{string}",
            "class": "Constants (GCI)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1075,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GCI_YCbCr_CbBand",
            "type": "{string}",
            "class": "Constants (GCI)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1084,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GCI_YCbCr_CrBand",
            "type": "{string}",
            "class": "Constants (GCI)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1100,
            "description": "Grayscale, only c1 defined",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GPI_Gray",
            "type": "{string}",
            "class": "Constants (GPI)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1108,
            "description": "RGBA, alpha in c4",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GPI_RGB",
            "type": "{string}",
            "class": "Constants (GPI)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1116,
            "description": "CMYK",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GPI_CMYK",
            "type": "{string}",
            "class": "Constants (GPI)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1124,
            "description": "HLS, c4 is not defined",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GPI_HLS",
            "type": "{string}",
            "class": "Constants (GPI)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1136,
            "description": "Old-style 99-402 extended dimension (Z) WKB types.\nSynonymous with 'wkbVariantOldOgc' (gdal >= 2.0)",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbVariantOgc",
            "type": "{string}",
            "class": "Constants (wkbVariant)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1146,
            "description": "Old-style 99-402 extended dimension (Z) WKB types.\nSynonymous with 'wkbVariantOgc' (gdal < 2.0)",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbVariantOldOgc",
            "type": "{string}",
            "class": "Constants (wkbVariant)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1156,
            "description": "SFSQL 1.2 and ISO SQL/MM Part 3 extended dimension (Z&M) WKB types.",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbVariantIso",
            "type": "{string}",
            "class": "Constants (wkbVariant)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1169,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbXDR",
            "type": "{string}",
            "class": "Constants (wkbByteOrder)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1175,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbNDR",
            "type": "{string}",
            "class": "Constants (wkbByteOrder)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1186,
            "final": "The `wkb25DBit` constant can be used to convert between 2D types to 2.5D\ntypes",
            "example": [
                "\n```\n// 2 -> 2.5D\nwkbPoint25D = gdal.wkbPoint | gdal.wkb25DBit\n\n// 2.5D -> 2D (same as wkbFlatten())\nwkbPoint = gdal.wkbPoint25D & (~gdal.wkb25DBit)```"
            ],
            "itemtype": "property",
            "name": "gdal.wkb25DBit",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1207,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbUnknown",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1213,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbPoint",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1219,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbLineString",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1225,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbCircularString",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1231,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbCompoundCurve",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1237,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbMultiCurve",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1243,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbPolygon",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1249,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbMultiPoint",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1255,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbMultiLineString",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1261,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbMultiPolygon",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1267,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbGeometryCollection",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1273,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbNone",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1279,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbLinearRing",
            "type": "{string}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1285,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbPoint25D",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1291,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbLineString25D",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1297,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbPolygon25D",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1303,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbMultiPoint25D",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1309,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbMultiLineString25D",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1315,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbMultiPolygon25D",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1321,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbGeometryCollection25D",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1327,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbLinearRing25D",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1338,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OFTInteger",
            "type": "{string}",
            "class": "Constants (OFT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1344,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OFTIntegerList",
            "type": "{string}",
            "class": "Constants (OFT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1352,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OFTInteger64",
            "type": "{string}",
            "class": "Constants (OFT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1359,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OFTInteger64List",
            "type": "{string}",
            "class": "Constants (OFT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1368,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OFTReal",
            "type": "{string}",
            "class": "Constants (OFT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1374,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OFTRealList",
            "type": "{string}",
            "class": "Constants (OFT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1380,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OFTString",
            "type": "{string}",
            "class": "Constants (OFT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1386,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OFTStringList",
            "type": "{string}",
            "class": "Constants (OFT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1393,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OFTWideString",
            "type": "{string}",
            "class": "Constants (OFT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1400,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OFTWideStringList",
            "type": "{string}",
            "class": "Constants (OFT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1409,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OFTBinary",
            "type": "{string}",
            "class": "Constants (OFT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1415,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OFTDate",
            "type": "{string}",
            "class": "Constants (OFT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1421,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OFTTime",
            "type": "{string}",
            "class": "Constants (OFT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1427,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OFTDateTime",
            "type": "{string}",
            "class": "Constants (OFT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1440,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GRA_NearestNeighbor",
            "type": "{string}",
            "class": "Constants (GRA)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1446,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GRA_Bilinear",
            "type": "{string}",
            "class": "Constants (GRA)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1452,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GRA_Cubic",
            "type": "{string}",
            "class": "Constants (GRA)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1458,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GRA_CubicSpline",
            "type": "{string}",
            "class": "Constants (GRA)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1464,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GRA_Lanczos",
            "type": "{string}",
            "class": "Constants (GRA)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1470,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GRA_Average",
            "type": "{string}",
            "class": "Constants (GRA)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1476,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GRA_Mode",
            "type": "{string}",
            "class": "Constants (GRA)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1490,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.DIM_HORIZONTAL_X",
            "type": "{string}",
            "class": "Constants (DIM)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1498,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.DIM_HORIZONTAL_Y",
            "type": "{string}",
            "class": "Constants (DIM)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1506,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.DIM_VERTICAL",
            "type": "{string}",
            "class": "Constants (DIM)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1513,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.DIM_TEMPORAL",
            "type": "{string}",
            "class": "Constants (DIM)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1520,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.DIM_PARAMETRIC",
            "type": "{string}",
            "class": "Constants (DIM)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1534,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.DIR_EAST",
            "type": "{string}",
            "class": "Constants (DIR)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1541,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.DIR_WEST",
            "type": "{string}",
            "class": "Constants (DIR)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1548,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.DIR_SOUTH",
            "type": "{string}",
            "class": "Constants (DIR)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1555,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.DIR_NORTH",
            "type": "{string}",
            "class": "Constants (DIR)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1562,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.DIR_UP",
            "type": "{string}",
            "class": "Constants (DIR)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1569,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.DIR_DOWN",
            "type": "{string}",
            "class": "Constants (DIR)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1576,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.DIR_FUTURE",
            "type": "{string}",
            "class": "Constants (DIR)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1583,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.DIR_PAST",
            "type": "{string}",
            "class": "Constants (DIR)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1590,
            "description": "GDAL version (not the binding version)",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.version",
            "type": "{string}",
            "class": "gdal"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1600,
            "description": "GDAL library - system library (false) or bundled (true)",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.bundled",
            "type": "{boolean}",
            "class": "gdal"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1614,
            "description": "Details about the last error that occurred. The property\nwill be null or an object containing three properties: \"number\",\n\"message\", and \"type\".",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.lastError",
            "type": "{object}",
            "class": "gdal"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1626,
            "description": "Should a warning be emitted to stderr when a synchronous operation\nis blocking the event loop, can be safely disabled unless\nthe user application needs to remain responsive at all times\nUse `(gdal as any).eventLoopWarning = false` to set the value from TypeScript",
            "itemtype": "property",
            "name": "gdal.eventLoopWarning",
            "type": "{boolean}",
            "class": "gdal"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1645,
            "description": "Disables all output.",
            "static": 1,
            "itemtype": "method",
            "name": "quiet",
            "class": "gdal"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1654,
            "description": "Displays extra debugging information from GDAL.",
            "static": 1,
            "itemtype": "method",
            "name": "verbose",
            "class": "gdal"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: typedef",
            "line": " lib/default_iterators.js:12"
        },
        {
            "message": "unknown tag: typedef",
            "line": " lib/gdal.js:79"
        },
        {
            "message": "unknown tag: typedef",
            "line": " lib/iterators.js:3"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/readable.js:7"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/writable.js:7"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/gdal_fs.cpp:18"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/gdal_fs.cpp:39"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/gdal_fs.cpp:50"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/gdal_fs.cpp:63"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/gdal_fs.cpp:161"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/gdal_fs.cpp:171"
        },
        {
            "message": "Missing item type\nReturns the definition of a particular field at an index.\n\n_method getFieldDefn\n_param {number} index Field index (0-based)\n_return {gdal.FieldDefn}",
            "line": " src/gdal_feature.cpp:187"
        }
    ]
}