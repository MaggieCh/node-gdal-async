{
    "project": {
        "name": "node-gdal-async",
        "description": "Node.js bindings for GDAL (Geospatial Data Abstraction Library) [Fork]",
        "url": "https://github.com/mmomtchev/node-gdal-async",
        "logo": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/df/GDALLogoColor.svg/200px-GDALLogoColor.svg.png",
        "version": "3.1.0"
    },
    "files": {
        "lib/envelope.js": {
            "name": "lib/envelope.js",
            "modules": {},
            "classes": {
                "gdal.Envelope": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/envelope_3d.js": {
            "name": "lib/envelope_3d.js",
            "modules": {},
            "classes": {
                "gdal.Envelope3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/gdal.js": {
            "name": "lib/gdal.js",
            "modules": {},
            "classes": {
                "gdal.config": 1
            },
            "fors": {
                "gdal.DatasetBands": 1,
                "gdal.LayerFeatures": 1,
                "gdal.FeatureFields": 1,
                "gdal.Geometry": 1,
                "gdal.LayerFields": 1,
                "gdal.DatasetLayers": 1,
                "gdal.FeatureDefnFields": 1,
                "gdal.FeatureDefnFields *": 1,
                "gdal.PolygonRings": 1,
                "gdal.LineStringPoints": 1,
                "gdal.CompoundCurveCurves": 1,
                "gdal.GeometryCollectionChildren": 1,
                "gdal.RasterBandOverviews": 1,
                "gdal.GDALDrivers": 1,
                "gdal": 1
            },
            "namespaces": {}
        },
        "src/collections/compound_curves.cpp": {
            "name": "src/collections/compound_curves.cpp",
            "modules": {},
            "classes": {
                "gdal.CompoundCurveCurves": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/collections/dataset_bands.cpp": {
            "name": "src/collections/dataset_bands.cpp",
            "modules": {},
            "classes": {
                "gdal.DatasetBands": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/collections/dataset_layers.cpp": {
            "name": "src/collections/dataset_layers.cpp",
            "modules": {},
            "classes": {
                "gdal.DatasetLayers": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/collections/feature_defn_fields.cpp": {
            "name": "src/collections/feature_defn_fields.cpp",
            "modules": {},
            "classes": {
                "gdal.FeatureDefnFields": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/collections/feature_fields.cpp": {
            "name": "src/collections/feature_fields.cpp",
            "modules": {},
            "classes": {
                "gdal.FeatureFields": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/collections/gdal_drivers.cpp": {
            "name": "src/collections/gdal_drivers.cpp",
            "modules": {},
            "classes": {
                "gdal.GDALDrivers": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/collections/geometry_collection_children.cpp": {
            "name": "src/collections/geometry_collection_children.cpp",
            "modules": {},
            "classes": {
                "gdal.GeometryCollectionChildren": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/collections/layer_features.cpp": {
            "name": "src/collections/layer_features.cpp",
            "modules": {},
            "classes": {
                "gdal.LayerFeatures": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/collections/layer_fields.cpp": {
            "name": "src/collections/layer_fields.cpp",
            "modules": {},
            "classes": {
                "gdal.LayerFields": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/collections/linestring_points.cpp": {
            "name": "src/collections/linestring_points.cpp",
            "modules": {},
            "classes": {
                "gdal.LineStringPoints": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/collections/polygon_rings.cpp": {
            "name": "src/collections/polygon_rings.cpp",
            "modules": {},
            "classes": {
                "gdal.PolygonRings": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/collections/rasterband_overviews.cpp": {
            "name": "src/collections/rasterband_overviews.cpp",
            "modules": {},
            "classes": {
                "gdal.RasterBandOverviews": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/collections/rasterband_pixels.cpp": {
            "name": "src/collections/rasterband_pixels.cpp",
            "modules": {},
            "classes": {
                "gdal.RasterBandPixels": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/geometry/gdal_circularstring.cpp": {
            "name": "src/geometry/gdal_circularstring.cpp",
            "modules": {},
            "classes": {
                "gdal.Circularstring": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/geometry/gdal_compoundcurve.cpp": {
            "name": "src/geometry/gdal_compoundcurve.cpp",
            "modules": {},
            "classes": {
                "gdal.CompoundCurve": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/geometry/gdal_geometry.cpp": {
            "name": "src/geometry/gdal_geometry.cpp",
            "modules": {},
            "classes": {
                "gdal.Geometry": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/geometry/gdal_geometrycollection.cpp": {
            "name": "src/geometry/gdal_geometrycollection.cpp",
            "modules": {},
            "classes": {
                "gdal.GeometryCollection": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/geometry/gdal_linearring.cpp": {
            "name": "src/geometry/gdal_linearring.cpp",
            "modules": {},
            "classes": {
                "gdal.LinearRing": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/geometry/gdal_linestring.cpp": {
            "name": "src/geometry/gdal_linestring.cpp",
            "modules": {},
            "classes": {
                "gdal.LineString": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/geometry/gdal_multicurve.cpp": {
            "name": "src/geometry/gdal_multicurve.cpp",
            "modules": {},
            "classes": {
                "gdal.MultiCurve": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/geometry/gdal_multilinestring.cpp": {
            "name": "src/geometry/gdal_multilinestring.cpp",
            "modules": {},
            "classes": {
                "gdal.MultiLinestring": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/geometry/gdal_multipoint.cpp": {
            "name": "src/geometry/gdal_multipoint.cpp",
            "modules": {},
            "classes": {
                "gdal.MultiPoint": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/geometry/gdal_multipolygon.cpp": {
            "name": "src/geometry/gdal_multipolygon.cpp",
            "modules": {},
            "classes": {
                "gdal.MultiPolygon": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/geometry/gdal_point.cpp": {
            "name": "src/geometry/gdal_point.cpp",
            "modules": {},
            "classes": {
                "gdal.Point": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/geometry/gdal_polygon.cpp": {
            "name": "src/geometry/gdal_polygon.cpp",
            "modules": {},
            "classes": {
                "gdal.Polygon": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/geometry/gdal_simplecurve.cpp": {
            "name": "src/geometry/gdal_simplecurve.cpp",
            "modules": {},
            "classes": {
                "gdal.SimpleCurve": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/gdal.hpp": {
            "name": "src/gdal.hpp",
            "modules": {},
            "classes": {},
            "fors": {
                "gdal": 1
            },
            "namespaces": {}
        },
        "src/gdal_algorithms.cpp": {
            "name": "src/gdal_algorithms.cpp",
            "modules": {},
            "classes": {},
            "fors": {
                "gdal": 1
            },
            "namespaces": {}
        },
        "src/gdal_coordinate_transformation.cpp": {
            "name": "src/gdal_coordinate_transformation.cpp",
            "modules": {},
            "classes": {
                "gdal.CoordinateTransformation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/gdal_dataset.cpp": {
            "name": "src/gdal_dataset.cpp",
            "modules": {},
            "classes": {
                "gdal.Dataset": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/gdal_driver.cpp": {
            "name": "src/gdal_driver.cpp",
            "modules": {},
            "classes": {
                "gdal.Driver": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/gdal_feature.cpp": {
            "name": "src/gdal_feature.cpp",
            "modules": {},
            "classes": {
                "gdal.Feature": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/gdal_feature_defn.cpp": {
            "name": "src/gdal_feature_defn.cpp",
            "modules": {},
            "classes": {
                "gdal.FeatureDefn": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/gdal_field_defn.cpp": {
            "name": "src/gdal_field_defn.cpp",
            "modules": {},
            "classes": {
                "gdal.FieldDefn": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/gdal_layer.cpp": {
            "name": "src/gdal_layer.cpp",
            "modules": {},
            "classes": {
                "gdal.Layer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/gdal_rasterband.cpp": {
            "name": "src/gdal_rasterband.cpp",
            "modules": {},
            "classes": {
                "gdal.RasterBand": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/gdal_spatial_reference.cpp": {
            "name": "src/gdal_spatial_reference.cpp",
            "modules": {},
            "classes": {
                "gdal.SpatialReference": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/gdal_warper.cpp": {
            "name": "src/gdal_warper.cpp",
            "modules": {},
            "classes": {},
            "fors": {
                "gdal": 1
            },
            "namespaces": {}
        },
        "src/node_gdal.cpp": {
            "name": "src/node_gdal.cpp",
            "modules": {},
            "classes": {
                "gdal": 1,
                "Constants (DMD)": 1,
                "Constants (CPL Error Levels)": 1,
                "Constants (CPL Error Codes)": 1,
                "Constants (DCAP)": 1,
                "Constants (OLC)": 1,
                "Constants (ODsC)": 1,
                "Constants (GDT)": 1,
                "Constants (OJ)": 1,
                "Constants (GCI)": 1,
                "Constants (wkbVariant)": 1,
                "Constants (wkbByteOrder)": 1,
                "Constants (wkbGeometryType)": 1,
                "Constants (OFT)": 1,
                "Constants (GRA)": 1
            },
            "fors": {
                "gdal": 1
            },
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "gdal.Envelope": {
            "name": "gdal.Envelope",
            "shortname": "gdal.Envelope",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/envelope.js",
            "line": 2,
            "description": "A 2D bounding box. For 3D envelopes, see {{#crossLink \"gdal.Envelope3D\"}}gdal.Envelope3D{{/crossLink}}.\n\n(Pure-javascript implementation of [OGREnvelope](https://gdal.org/doxygen/classOGREnvelope.html))",
            "is_constructor": 1,
            "params": [
                {
                    "name": "bounds",
                    "description": "An object containing `minX`, `maxX`, `minY`, and `maxY` values.",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "gdal.Envelope3D": {
            "name": "gdal.Envelope3D",
            "shortname": "gdal.Envelope3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/envelope_3d.js",
            "line": 2,
            "description": "A 3D bounding box. For 2D envelopes, see {{#crossLink \"gdal.Envelope\"}}gdal.Envelope{{/crossLink}}.\n\n(Pure-javascript implementation of [OGREnvelope3D](http://www.gdal.org/classOGREnvelope3D.html))",
            "is_constructor": 1,
            "params": [
                {
                    "name": "bounds",
                    "description": "An object containing `minX`, `maxX`, `minY`, `maxY`, `minZ`, and `maxZ` values.",
                    "type": "Object"
                }
            ]
        },
        "gdal.config": {
            "name": "gdal.config",
            "shortname": "gdal.config",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/gdal.js",
            "line": 37
        },
        "gdal.DatasetBands": {
            "name": "gdal.DatasetBands",
            "shortname": "gdal.DatasetBands",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collections/dataset_bands.cpp",
            "line": 37,
            "description": "An encapsulation of a {{#crossLink \"gdal.Dataset\"}}Dataset{{/crossLink}}'s\nraster bands.\n\n```\nvar bands = dataset.bands;```"
        },
        "gdal.LayerFeatures": {
            "name": "gdal.LayerFeatures",
            "shortname": "gdal.LayerFeatures",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collections/layer_features.cpp",
            "line": 39,
            "description": "An encapsulation of a {{#crossLink \"gdal.Layer\"}}Layer{{/crossLink}}'s\nfeatures."
        },
        "gdal.FeatureFields": {
            "name": "gdal.FeatureFields",
            "shortname": "gdal.FeatureFields",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collections/feature_fields.cpp",
            "line": 39,
            "description": "An encapsulation of all field data that makes up a {{#crossLink\n\"gdal.Feature\"}}Feature{{/crossLink}}."
        },
        "gdal.Geometry": {
            "name": "gdal.Geometry",
            "shortname": "gdal.Geometry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 94,
            "description": "Abstract base class for all geometry classes."
        },
        "gdal.LayerFields": {
            "name": "gdal.LayerFields",
            "shortname": "gdal.LayerFields",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collections/layer_fields.cpp",
            "line": 40
        },
        "gdal.DatasetLayers": {
            "name": "gdal.DatasetLayers",
            "shortname": "gdal.DatasetLayers",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collections/dataset_layers.cpp",
            "line": 40,
            "description": "An encapsulation of a {{#crossLink \"gdal.Dataset\"}}Dataset{{/crossLink}}'s\nvector layers.\n\n```\nvar layers = dataset.layers;```"
        },
        "gdal.FeatureDefnFields": {
            "name": "gdal.FeatureDefnFields",
            "shortname": "gdal.FeatureDefnFields",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collections/feature_defn_fields.cpp",
            "line": 40,
            "description": "An encapsulation of a {{#crossLink\n\"gdal.FeatureDefn\"}}FeatureDefn{{/crossLink}}'s fields."
        },
        "gdal.FeatureDefnFields *": {
            "name": "gdal.FeatureDefnFields *",
            "shortname": "gdal.FeatureDefnFields *",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": []
        },
        "gdal.PolygonRings": {
            "name": "gdal.PolygonRings",
            "shortname": "gdal.PolygonRings",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collections/polygon_rings.cpp",
            "line": 34,
            "description": "A collection of polygon rings, used by {{#crossLink\n\"gdal.Polygon\"}}gdal.Polygon{{/crossLink}}."
        },
        "gdal.LineStringPoints": {
            "name": "gdal.LineStringPoints",
            "shortname": "gdal.LineStringPoints",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collections/linestring_points.cpp",
            "line": 41,
            "description": "An encapsulation of a {{#crossLink\n\"gdal.LineString\"}}LineString{{/crossLink}}'s points."
        },
        "gdal.CompoundCurveCurves": {
            "name": "gdal.CompoundCurveCurves",
            "shortname": "gdal.CompoundCurveCurves",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collections/compound_curves.cpp",
            "line": 37,
            "description": "A collection of connected curves, used by {{#crossLink\n\"gdal.CompoundCurve\"}}gdal.CompoundCurve{{/crossLink}}."
        },
        "gdal.GeometryCollectionChildren": {
            "name": "gdal.GeometryCollectionChildren",
            "shortname": "gdal.GeometryCollectionChildren",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collections/geometry_collection_children.cpp",
            "line": 34,
            "description": "A collection of Geometries, used by {{#crossLink\n\"gdal.GeometryCollection\"}}gdal.GeometryCollection{{/crossLink}}."
        },
        "gdal.RasterBandOverviews": {
            "name": "gdal.RasterBandOverviews",
            "shortname": "gdal.RasterBandOverviews",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collections/rasterband_overviews.cpp",
            "line": 32,
            "description": "An encapsulation of a {{#crossLink\n\"gdal.RasterBand\"}}RasterBand{{/crossLink}} overview functionality."
        },
        "gdal.GDALDrivers": {
            "name": "gdal.GDALDrivers",
            "shortname": "gdal.GDALDrivers",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collections/gdal_drivers.cpp",
            "line": 37,
            "description": "An collection of all {{#crossLink \"gdal.Driver\"}}drivers{{/crossLink}}\nregistered with GDAL."
        },
        "gdal": {
            "name": "gdal",
            "shortname": "gdal",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/node_gdal.cpp",
            "line": 332,
            "description": "This [node-gdal-async](https://github.com/mmomtchev/node-gdal-async) binding for\nNode.js provides a feature-complete way of reading, writing, and manipulating\ngeospatial data, raster and vector, synchronously and asynchronously using [GDAL](http://www.gdal.org/).\n```\n// sample: open a shapefile and display all features as geojson\nconst dataset = gdal.open(\"states.shp\");\n\ndataset.layers.get(0).features.forEach(function(feature) {\n    console.log(feature.getGeometry().toJSON());\n});\n```\n\n```\n// same thing, but asynchronously, allowing integration in server-side multi-user code\nconst dataset = await gdal.openAsync(\"states.shp\");\nconst features = (await dataset.layers.getAsync(0)).features;\nconst len = await features.countAsync();\n\nfor (let i = t; i < len; i++) {\n  features.getAsync(i, (error, feature) => {\n    console.log(feature.getGeometry().toJSON());\n  });\n}\n```\n\nsee <https://gist.github.com/mmomtchev/14c3428255fd9c88ed20517572d8efdc>\nfor some performance considerations when designing code that will run\nmultiple parallel operations on the same dataset\n\n<iframe\nsrc=\"http://ghbtns.com/github-btn.html?user=mmomtchev&repo=node-gdal-async&type=watch&count=true\"\nallowtransparency=\"true\" frameborder=\"0\" scrolling=\"0\" width=\"90\" height=\"20\"\nstyle=\"margin-top:20px\"></iframe> <iframe\nsrc=\"http://ghbtns.com/github-btn.html?user=mmomtchev&repo=node-gdal-async&type=fork&count=true\"\nallowtransparency=\"true\" frameborder=\"0\" scrolling=\"0\" width=\"200\"\nheight=\"20\"></iframe>"
        },
        "gdal.RasterBandPixels": {
            "name": "gdal.RasterBandPixels",
            "shortname": "gdal.RasterBandPixels",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collections/rasterband_pixels.cpp",
            "line": 50,
            "description": "A representation of a {{#crossLink\n\"gdal.RasterBand\"}}RasterBand{{/crossLink}}'s pixels.\n\n\nNote: Typed arrays should be created with an external ArrayBuffer for\nversions of node >= 0.11\n```\nvar n = 16*16;\nvar data = new Float32Array(new ArrayBuffer(n*4));\n//read data into the existing array\nband.pixels.read(0,0,16,16,data);```"
        },
        "gdal.Circularstring": {
            "name": "gdal.Circularstring",
            "shortname": "gdal.Circularstring",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/geometry/gdal_circularstring.cpp",
            "line": 33,
            "description": "Concrete representation of an arc.",
            "example": [
                "\n```\nvar CircularString = new gdal.CircularString();\nCircularString.points.add(new gdal.Point(0,0));\nCircularString.points.add(new gdal.Point(0,10));```"
            ],
            "is_constructor": 1,
            "extends": "gdal.Geometry"
        },
        "gdal.CompoundCurve": {
            "name": "gdal.CompoundCurve",
            "shortname": "gdal.CompoundCurve",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/geometry/gdal_compoundcurve.cpp",
            "line": 37,
            "description": "Concrete representation of a compound contionuos curve.",
            "example": [
                "\n```\nvar CompoundCurve = new gdal.CompoundCurve();\nCompoundCurve.points.add(new gdal.Point(0,0));\nCompoundCurve.points.add(new gdal.Point(0,10));```"
            ],
            "is_constructor": 1,
            "extends": "gdal.Geometry"
        },
        "gdal.GeometryCollection": {
            "name": "gdal.GeometryCollection",
            "shortname": "gdal.GeometryCollection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/geometry/gdal_geometrycollection.cpp",
            "line": 13,
            "description": "A collection of 1 or more geometry objects.",
            "is_constructor": 1,
            "extends": "gdal.Geometry"
        },
        "gdal.LinearRing": {
            "name": "gdal.LinearRing",
            "shortname": "gdal.LinearRing",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/geometry/gdal_linearring.cpp",
            "line": 30,
            "description": "Concrete representation of a closed ring.",
            "is_constructor": 1,
            "extends": "gdal.LineString"
        },
        "gdal.LineString": {
            "name": "gdal.LineString",
            "shortname": "gdal.LineString",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/geometry/gdal_linestring.cpp",
            "line": 30,
            "description": "Concrete representation of a multi-vertex line.",
            "example": [
                "\n```\nvar lineString = new gdal.LineString();\nlineString.points.add(new gdal.Point(0,0));\nlineString.points.add(new gdal.Point(0,10));```"
            ],
            "is_constructor": 1,
            "extends": "gdal.Geometry"
        },
        "gdal.MultiCurve": {
            "name": "gdal.MultiCurve",
            "shortname": "gdal.MultiCurve",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/geometry/gdal_multicurve.cpp",
            "line": 32,
            "is_constructor": 1,
            "extends": "gdal.GeometryCollection"
        },
        "gdal.MultiLinestring": {
            "name": "gdal.MultiLinestring",
            "shortname": "gdal.MultiLinestring",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/geometry/gdal_multilinestring.cpp",
            "line": 31,
            "is_constructor": 1,
            "extends": "gdal.GeometryCollection"
        },
        "gdal.MultiPoint": {
            "name": "gdal.MultiPoint",
            "shortname": "gdal.MultiPoint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/geometry/gdal_multipoint.cpp",
            "line": 30,
            "is_constructor": 1,
            "extends": "gdal.GeometryCollection"
        },
        "gdal.MultiPolygon": {
            "name": "gdal.MultiPolygon",
            "shortname": "gdal.MultiPolygon",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/geometry/gdal_multipolygon.cpp",
            "line": 31,
            "is_constructor": 1,
            "extends": "gdal.GeometryCollection"
        },
        "gdal.Point": {
            "name": "gdal.Point",
            "shortname": "gdal.Point",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/geometry/gdal_point.cpp",
            "line": 31,
            "description": "Point class.",
            "is_constructor": 1,
            "extends": "gdal.Geometry",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ]
        },
        "gdal.Polygon": {
            "name": "gdal.Polygon",
            "shortname": "gdal.Polygon",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/geometry/gdal_polygon.cpp",
            "line": 35,
            "description": "Concrete class representing polygons.",
            "is_constructor": 1,
            "extends": "gdal.Geometry"
        },
        "gdal.SimpleCurve": {
            "name": "gdal.SimpleCurve",
            "shortname": "gdal.SimpleCurve",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/geometry/gdal_simplecurve.cpp",
            "line": 35,
            "description": "Abstract class representing all SimpleCurves.",
            "is_constructor": 1,
            "extends": "gdal.Geometry"
        },
        "gdal.CoordinateTransformation": {
            "name": "gdal.CoordinateTransformation",
            "shortname": "gdal.CoordinateTransformation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/gdal_coordinate_transformation.cpp",
            "line": 43,
            "description": "Object for transforming between coordinate systems.",
            "throws": {
                "description": "Error"
            },
            "is_constructor": 1,
            "params": [
                {
                    "name": "source",
                    "description": "",
                    "type": "gdal.SpatialReference"
                },
                {
                    "name": "target",
                    "description": "If a raster Dataset, the\nconversion will represent a conversion to pixel coordinates.",
                    "type": "gdal.SpatialReference|gdal.Dataset"
                }
            ]
        },
        "gdal.Dataset": {
            "name": "gdal.Dataset",
            "shortname": "gdal.Dataset",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/gdal_dataset.cpp",
            "line": 97,
            "description": "A set of associated raster bands and/or vector layers, usually from one file.\n\n```\n// raster dataset:\ndataset = gdal.open('file.tif');\nbands = dataset.bands;\n\n// vector dataset:\ndataset = gdal.open('file.shp');\nlayers = dataset.layers;```"
        },
        "gdal.Driver": {
            "name": "gdal.Driver",
            "shortname": "gdal.Driver",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/gdal_driver.cpp",
            "line": 81,
            "description": "Format specific driver.\n\nAn instance of this class is created for each supported format, and\nmanages information about the format.\n\nThis roughly corresponds to a file format, though some drivers may\nbe gateways to many formats through a secondary multi-library."
        },
        "gdal.Feature": {
            "name": "gdal.Feature",
            "shortname": "gdal.Feature",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/gdal_feature.cpp",
            "line": 67,
            "description": "A simple feature, including geometry and attributes. Its fields and geometry\ntype is defined by the given definition.\n\n```\n//create layer and specify geometry type\nvar layer = dataset.layers.create('mylayer', null, gdal.Point);\n\n//setup fields for the given layer\nlayer.fields.add(new gdal.FieldDefn('elevation', gdal.OFTInteger));\nlayer.fields.add(new gdal.FieldDefn('name', gdal.OFTString));\n\n//create feature using layer definition and then add it to the layer\nvar feature = new gdal.Feature(layer);\nfeature.fields.set('elevation', 13775);\nfeature.fields.set('name', 'Grand Teton');\nfeature.setGeometry(new gdal.Point(43.741208, -110.802414));\nlayer.features.add(feature);```",
            "is_constructor": 1,
            "params": [
                {
                    "name": "definition",
                    "description": "",
                    "type": "gdal.Layer|gdal.FeatureDefn"
                }
            ]
        },
        "gdal.FeatureDefn": {
            "name": "gdal.FeatureDefn",
            "shortname": "gdal.FeatureDefn",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/gdal_feature_defn.cpp",
            "line": 48,
            "description": "Definition of a feature class or feature layer.",
            "is_constructor": 1
        },
        "gdal.FieldDefn": {
            "name": "gdal.FieldDefn",
            "shortname": "gdal.FieldDefn",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/gdal_field_defn.cpp",
            "line": 46,
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Field name",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "Data type (see {{#crossLink \"Constants (OFT)\"}}OFT\nconstants{{/crossLink}})",
                    "type": "String"
                }
            ]
        },
        "gdal.Layer": {
            "name": "gdal.Layer",
            "shortname": "gdal.Layer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/gdal_layer.cpp",
            "line": 74,
            "description": "A representation of a layer of simple vector features, with access methods."
        },
        "gdal.RasterBand": {
            "name": "gdal.RasterBand",
            "shortname": "gdal.RasterBand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/gdal_rasterband.cpp",
            "line": 93,
            "description": "A single raster band (or channel)."
        },
        "gdal.SpatialReference": {
            "name": "gdal.SpatialReference",
            "shortname": "gdal.SpatialReference",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/gdal_spatial_reference.cpp",
            "line": 91,
            "description": "This class respresents a OpenGIS Spatial Reference System, and contains\nmethods for converting between this object organization and well known text\n(WKT) format.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "wkt",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ]
        },
        "Constants (DMD)": {
            "name": "Constants (DMD)",
            "shortname": "Constants (DMD)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/node_gdal.cpp",
            "line": 336
        },
        "Constants (CPL Error Levels)": {
            "name": "Constants (CPL Error Levels)",
            "shortname": "Constants (CPL Error Levels)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/node_gdal.cpp",
            "line": 381
        },
        "Constants (CPL Error Codes)": {
            "name": "Constants (CPL Error Codes)",
            "shortname": "Constants (CPL Error Codes)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/node_gdal.cpp",
            "line": 425
        },
        "Constants (DCAP)": {
            "name": "Constants (DCAP)",
            "shortname": "Constants (DCAP)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/node_gdal.cpp",
            "line": 496
        },
        "Constants (OLC)": {
            "name": "Constants (OLC)",
            "shortname": "Constants (OLC)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/node_gdal.cpp",
            "line": 519
        },
        "Constants (ODsC)": {
            "name": "Constants (ODsC)",
            "shortname": "Constants (ODsC)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/node_gdal.cpp",
            "line": 625
        },
        "Constants (GDT)": {
            "name": "Constants (GDT)",
            "shortname": "Constants (GDT)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/node_gdal.cpp",
            "line": 669,
            "description": "Pixel data types."
        },
        "Constants (OJ)": {
            "name": "Constants (OJ)",
            "shortname": "Constants (OJ)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/node_gdal.cpp",
            "line": 764
        },
        "Constants (GCI)": {
            "name": "Constants (GCI)",
            "shortname": "Constants (GCI)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/node_gdal.cpp",
            "line": 787
        },
        "Constants (wkbVariant)": {
            "name": "Constants (wkbVariant)",
            "shortname": "Constants (wkbVariant)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/node_gdal.cpp",
            "line": 942
        },
        "Constants (wkbByteOrder)": {
            "name": "Constants (wkbByteOrder)",
            "shortname": "Constants (wkbByteOrder)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/node_gdal.cpp",
            "line": 975
        },
        "Constants (wkbGeometryType)": {
            "name": "Constants (wkbGeometryType)",
            "shortname": "Constants (wkbGeometryType)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/node_gdal.cpp",
            "line": 992
        },
        "Constants (OFT)": {
            "name": "Constants (OFT)",
            "shortname": "Constants (OFT)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/node_gdal.cpp",
            "line": 1146
        },
        "Constants (GRA)": {
            "name": "Constants (GRA)",
            "shortname": "Constants (GRA)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/node_gdal.cpp",
            "line": 1248,
            "description": "Resampling options that can be used with the gdal.reprojectImage() method."
        }
    },
    "elements": {
        "callback": {
            "name": "callback",
            "attributes": [],
            "file": "lib/gdal.js",
            "line": 73,
            "description": "Callback using the standard Node.js error convention",
            "typedef": "callback<T> (Error, T) => void"
        },
        "forEachCb": {
            "name": "forEachCb",
            "attributes": [],
            "file": "lib/gdal.js",
            "line": 134,
            "description": "forEach() callback type",
            "typedef": "forEachCb<T> (obj: T) => boolean|void"
        },
        "mapCb": {
            "name": "mapCb",
            "attributes": [],
            "file": "lib/gdal.js",
            "line": 146,
            "description": "map() callback type",
            "typedef": "mapCb<T,U> (obj: T, index: number) => U"
        }
    },
    "classitems": [
        {
            "file": "lib/envelope.js",
            "line": 25,
            "description": "Determines if the envelope has not been set yet.",
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.Envelope"
        },
        {
            "file": "lib/envelope.js",
            "line": 35,
            "description": "Unions the provided envelope with the current envelope.",
            "itemtype": "method",
            "name": "merge",
            "params": [
                {
                    "name": "envelope",
                    "description": "",
                    "type": "Envelope"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "gdal.Envelope"
        },
        {
            "file": "lib/envelope.js",
            "line": 70,
            "description": "Determines if the provided envelope touches it.",
            "itemtype": "method",
            "name": "intersects",
            "params": [
                {
                    "name": "envelope",
                    "description": "",
                    "type": "Envelope"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.Envelope"
        },
        {
            "file": "lib/envelope.js",
            "line": 86,
            "description": "Updates the envelope to the intersection of the two envelopes.",
            "itemtype": "method",
            "name": "intersect",
            "params": [
                {
                    "name": "envelope",
                    "description": "",
                    "type": "Envelope"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "gdal.Envelope"
        },
        {
            "file": "lib/envelope.js",
            "line": 111,
            "description": "Determines if the provided envelope is wholly-contained by the current envelope.",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "envelope",
                    "description": "",
                    "type": "Envelope"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.Envelope"
        },
        {
            "file": "lib/envelope.js",
            "line": 127,
            "description": "Converts the envelope to a polygon.",
            "itemtype": "method",
            "name": "toPolygon",
            "return": {
                "description": "",
                "type": "Polygon"
            },
            "class": "gdal.Envelope"
        },
        {
            "file": "lib/envelope_3d.js",
            "line": 29,
            "description": "Determines if the envelope has not been set yet.",
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.Envelope3D"
        },
        {
            "file": "lib/envelope_3d.js",
            "line": 46,
            "description": "Unions the provided envelope with the current envelope.",
            "itemtype": "method",
            "name": "merge",
            "params": [
                {
                    "name": "envelope",
                    "description": "",
                    "type": "Envelope3D"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "gdal.Envelope3D"
        },
        {
            "file": "lib/envelope_3d.js",
            "line": 89,
            "description": "Determines if the provided envelope touches it.",
            "itemtype": "method",
            "name": "intersects",
            "params": [
                {
                    "name": "envelope",
                    "description": "",
                    "type": "Envelope3D"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.Envelope3D"
        },
        {
            "file": "lib/envelope_3d.js",
            "line": 107,
            "description": "Updates the envelope to the intersection of the two envelopes.",
            "itemtype": "method",
            "name": "intersect",
            "params": [
                {
                    "name": "envelope",
                    "description": "",
                    "type": "Envelope3D"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "gdal.Envelope3D"
        },
        {
            "file": "lib/envelope_3d.js",
            "line": 136,
            "description": "Determines if the provided envelope is wholly-contained by the current envelope.",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "envelope",
                    "description": "",
                    "type": "Envelope3D"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.Envelope3D"
        },
        {
            "file": "lib/gdal.js",
            "line": 41,
            "description": "Gets a GDAL configuration setting.",
            "example": [
                "\n```\ndata_path = gdal.config.get('GDAL_DATA');```"
            ],
            "static": 1,
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "gdal.config"
        },
        {
            "file": "lib/gdal.js",
            "line": 55,
            "description": "Sets a GDAL configuration setting.",
            "example": [
                "\n```\ngdal.config.set('GDAL_DATA', data_path);```"
            ],
            "static": 1,
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "gdal.config"
        },
        {
            "file": "lib/gdal.js",
            "line": 129,
            "description": "A simple key/value structure",
            "interface": "fieldValue { key: string, value: any }",
            "class": "gdal.config"
        },
        {
            "file": "lib/gdal.js",
            "line": 181,
            "description": "Iterates through all bands using a callback function.\nNote: GDAL band indexes start at 1, not 0.",
            "example": [
                "\n```\ndataset.bands.forEach(function(band, i) { ... });```"
            ],
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"RasterBand\"}}RasterBand{{/crossLink}}",
                    "type": "forEachCb<gdal.RasterBand>"
                }
            ],
            "class": "gdal.DatasetBands"
        },
        {
            "file": "lib/gdal.js",
            "line": 200,
            "description": "Iterates through all bands using a callback function and builds\nan array of the returned values.",
            "example": [
                "\n```\nvar result = dataset.bands.map(function(band, i) {\n    return value;\n});```"
            ],
            "itemtype": "method",
            "name": "map<U>",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"RasterBand\"}}RasterBand{{/crossLink}}",
                    "type": "mapCb<gdal.RasterBand,U>"
                }
            ],
            "return": {
                "description": "",
                "type": "U[]"
            },
            "class": "gdal.DatasetBands"
        },
        {
            "file": "lib/gdal.js",
            "line": 217,
            "description": "Iterates through all bands using an iterator",
            "example": [
                "\n```\nfor (const band of dataset.bands) {\n}```"
            ],
            "type": "{gdal.RasterBand}",
            "itemtype": "method",
            "name": "Symbol.iterator",
            "class": "gdal.DatasetBands"
        },
        {
            "file": "lib/gdal.js",
            "line": 243,
            "description": "Iterates through all features using a callback function.",
            "example": [
                "\n```\nlayer.features.forEach(function(feature, i) { ... });```"
            ],
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"Feature\"}}Feature{{/crossLink}}",
                    "type": "forEachCb<gdal.Feature>"
                }
            ],
            "class": "gdal.LayerFeatures"
        },
        {
            "file": "lib/gdal.js",
            "line": 263,
            "description": "Iterates through all features using a callback function and builds\nan array of the returned values.",
            "example": [
                "\n```\nvar result = layer.features.map(function(band, i) {\n    return value;\n});```"
            ],
            "itemtype": "method",
            "name": "map<U>",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"Feature\"}}Feature{{/crossLink}}",
                    "type": "mapCb<gdal.Feature,U>"
                }
            ],
            "return": {
                "description": "",
                "type": "U[]"
            },
            "class": "gdal.LayerFeatures"
        },
        {
            "file": "lib/gdal.js",
            "line": 280,
            "description": "Iterates through all features using an iterator",
            "example": [
                "\n```\nfor (const feature of layer.features) {\n}```"
            ],
            "type": "{gdal.Feature}",
            "itemtype": "method",
            "name": "Symbol.iterator",
            "class": "gdal.LayerFeatures"
        },
        {
            "file": "lib/gdal.js",
            "line": 306,
            "description": "Iterates through all fields using a callback function.",
            "example": [
                "\n```\nlayer.features.get(0).fields.forEach(function(value, key) { ... });```"
            ],
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each feature `value` and `key`.",
                    "type": "ForEachCb<fieldValue>"
                }
            ],
            "class": "gdal.FeatureFields"
        },
        {
            "file": "lib/gdal.js",
            "line": 324,
            "description": "Iterates through all fields using a callback function and builds\nan array of the returned values.",
            "example": [
                "\n```\nvar result = layer.features.get(0).fields.map(function(value, key) {\n    return value;\n});```"
            ],
            "itemtype": "method",
            "name": "map<U>",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each feature `value` and `key`.",
                    "type": "MapCb<fieldValue,U>"
                }
            ],
            "return": {
                "description": "",
                "type": "U[]"
            },
            "class": "gdal.FeatureFields"
        },
        {
            "file": "lib/gdal.js",
            "line": 341,
            "description": "Outputs the fields as a serialized JSON string.",
            "itemtype": "method",
            "name": "toJSON",
            "return": {
                "description": "Serialized JSON",
                "type": "String"
            },
            "class": "gdal.FeatureFields"
        },
        {
            "file": "lib/gdal.js",
            "line": 352,
            "description": "Converts the geometry to a GeoJSON object representation.",
            "itemtype": "method",
            "name": "toObject",
            "return": {
                "description": "GeoJSON",
                "type": "Object"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "lib/gdal.js",
            "line": 363,
            "description": "Iterates through all field definitions using a callback function.",
            "example": [
                "\n```\nlayer.fields.forEach(function(field, i) { ... });```"
            ],
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"FieldDefn\"}}FieldDefn{{/crossLink}}",
                    "type": "forEachCb<gdal.FieldDefn>"
                }
            ],
            "class": "gdal.LayerFields"
        },
        {
            "file": "lib/gdal.js",
            "line": 376,
            "description": "Iterates through all field definitions using a callback function and builds\nan array of the returned values.",
            "example": [
                "\n```\nvar result = layer.fields.map(function(field, i) {\n    return value;\n});```"
            ],
            "itemtype": "method",
            "name": "map<U>",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"FieldDefn\"}}FieldDefn{{/crossLink}}",
                    "type": "mapCb<gdal.FieldDefn,U>"
                }
            ],
            "return": {
                "description": "",
                "type": "U[]"
            },
            "class": "gdal.LayerFields"
        },
        {
            "file": "lib/gdal.js",
            "line": 393,
            "description": "Iterates through all field definitions using an iterator",
            "example": [
                "\n```\nfor (const curve of layer.fields) {\n}```"
            ],
            "type": "{gdal.FieldDefn}",
            "itemtype": "method",
            "name": "Symbol.iterator",
            "class": "gdal.LayerFields"
        },
        {
            "file": "lib/gdal.js",
            "line": 407,
            "description": "Iterates through all layers using a callback function.",
            "example": [
                "\n```\ndataset.layers.forEach(function(layer, i) { ... });```"
            ],
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"Layer\"}}Layer{{/crossLink}}",
                    "type": "forEachCb<gdal.Layer>"
                }
            ],
            "class": "gdal.DatasetLayers"
        },
        {
            "file": "lib/gdal.js",
            "line": 420,
            "description": "Iterates through all layers using a callback function and builds\nan array of the returned values.",
            "example": [
                "\n```\nvar result = dataset.layers.map(function(field, i) {\n    return value;\n});```"
            ],
            "itemtype": "method",
            "name": "map<U>",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"Layer\"}}Layer{{/crossLink}}",
                    "type": "mapCb<gdal.Layer,U>"
                }
            ],
            "return": {
                "description": "",
                "type": "U[]"
            },
            "class": "gdal.DatasetLayers"
        },
        {
            "file": "lib/gdal.js",
            "line": 437,
            "description": "Iterates through all layers using an iterator",
            "example": [
                "\n```\nfor (const curve of dataset.layers) {\n}```"
            ],
            "type": "{gdal.Layer}",
            "itemtype": "method",
            "name": "Symbol.iterator",
            "class": "gdal.DatasetLayers"
        },
        {
            "file": "lib/gdal.js",
            "line": 451,
            "description": "Iterates through all field definitions using a callback function.",
            "example": [
                "\n```\nfeatureDefn.forEach(function(field, i) { ... });```"
            ],
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"FieldDefn\"}}FieldDefn{{/crossLink}}",
                    "type": "forEachCb<gdal.FieldDefn>"
                }
            ],
            "class": "gdal.FeatureDefnFields"
        },
        {
            "file": "lib/gdal.js",
            "line": 464,
            "description": "Iterates through all field definitions using a callback function and builds\nan array of the returned values.",
            "example": [
                "\n```\nvar result = featureDefn.map(function(field, i) {\n    return value;\n});```"
            ],
            "itemtype": "method",
            "name": "map<U>",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"FieldDefn\"}}FieldDefn{{/crossLink}}",
                    "type": "mapCb<gdal.FieldDefn,U>"
                }
            ],
            "return": {
                "description": "",
                "type": "U[]"
            },
            "class": "gdal.FeatureDefnFields"
        },
        {
            "file": "lib/gdal.js",
            "line": 481,
            "description": "Iterates through all field definitions using an iterator",
            "example": [
                "\n```\nfor (const defn of featureDefn) {\n}```"
            ],
            "type": "{gdal.FieldDefn}",
            "itemtype": "method",
            "name": "Symbol.iterator",
            "class": "gdal.FeatureDefnFields *"
        },
        {
            "file": "lib/gdal.js",
            "line": 495,
            "description": "Iterates through all rings using a callback function.",
            "example": [
                "\n```\npolygon.rings.forEach(function(ring, i) { ... });```"
            ],
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"LineString\"}}LineString{{/crossLink}}",
                    "type": "forEachCb<gdal.LineString>"
                }
            ],
            "class": "gdal.PolygonRings"
        },
        {
            "file": "lib/gdal.js",
            "line": 508,
            "description": "Iterates through all rings using a callback function and builds\nan array of the returned values.",
            "example": [
                "\n```\nvar result = polygon.rings.map(function(ring, i) {\n    return value;\n});```"
            ],
            "itemtype": "method",
            "name": "map<U>",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"LineString\"}}LineString{{/crossLink}}",
                    "type": "mapCb<gdal.LineString,U>"
                }
            ],
            "return": {
                "description": "",
                "type": "U[]"
            },
            "class": "gdal.PolygonRings"
        },
        {
            "file": "lib/gdal.js",
            "line": 525,
            "description": "Iterates through all rings using an iterator",
            "example": [
                "\n```\nfor (const ring of polygon.rings) {\n}```"
            ],
            "type": "{gdal.LineString}",
            "itemtype": "method",
            "name": "Symbol.iterator",
            "class": "gdal.PolygonRings"
        },
        {
            "file": "lib/gdal.js",
            "line": 539,
            "description": "Iterates through all points using a callback function.",
            "example": [
                "\n```\nlineString.points.forEach(function(point, i) { ... });```"
            ],
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"Point\"}}Point{{/crossLink}}",
                    "type": "forEachCb<gdal.Point>"
                }
            ],
            "class": "gdal.LineStringPoints"
        },
        {
            "file": "lib/gdal.js",
            "line": 552,
            "description": "Iterates through all points using a callback function and builds\nan array of the returned values.",
            "example": [
                "\n```\nvar result = lineString.points.map(function(point, i) {\n    return value;\n});```"
            ],
            "itemtype": "method",
            "name": "map<U>",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"Point\"}}Point{{/crossLink}}",
                    "type": "mapCb<gdal.Point,U>"
                }
            ],
            "return": {
                "description": "",
                "type": "U[]"
            },
            "class": "gdal.LineStringPoints"
        },
        {
            "file": "lib/gdal.js",
            "line": 569,
            "description": "Iterates through all points using an iterator",
            "example": [
                "\n```\nfor (const point of lineString.points) {\n}```"
            ],
            "type": "{gdal.Point}",
            "itemtype": "method",
            "name": "Symbol.iterator",
            "class": "gdal.LineStringPoints"
        },
        {
            "file": "lib/gdal.js",
            "line": 584,
            "description": "Iterates through all curves using a callback function.",
            "example": [
                "\n```\ncompoundCurve.curves.forEach(function(curve, i) { ... });```"
            ],
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"SimpleCurve\"}}SimpleCurve{{/crossLink}}",
                    "type": "forEachCb<gdal.SimpleCurve>"
                }
            ],
            "class": "gdal.CompoundCurveCurves"
        },
        {
            "file": "lib/gdal.js",
            "line": 597,
            "description": "Iterates through all curves using a callback function and builds\nan array of the returned values.",
            "example": [
                "\n```\nvar result = compoundCurves.curves.map(function(curve, i) {\n    return value;\n});```"
            ],
            "itemtype": "method",
            "name": "map<U>",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"SimpleCurve\"}}SimpleCurve{{/crossLink}}",
                    "type": "mapCb<gdal.SimpleCurve,U>"
                }
            ],
            "return": {
                "description": "",
                "type": "U[]"
            },
            "class": "gdal.CompoundCurveCurves"
        },
        {
            "file": "lib/gdal.js",
            "line": 614,
            "description": "Iterates through all curves using an iterator",
            "example": [
                "\n```\nfor (const curve of compoundCurves.curves) {\n}"
            ],
            "type": "{gdal.SimpleCurve}",
            "itemtype": "method",
            "name": "Symbol.iterator",
            "class": "gdal.CompoundCurveCurves"
        },
        {
            "file": "lib/gdal.js",
            "line": 629,
            "description": "Iterates through all child geometries using a callback function.",
            "example": [
                "\n```\ngeometryCollection.children.forEach(function(geometry, i) { ... });```"
            ],
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"Geometry\"}}Geometry{{/crossLink}}",
                    "type": "forEachCb<gdal.Geometry>"
                }
            ],
            "class": "gdal.GeometryCollectionChildren"
        },
        {
            "file": "lib/gdal.js",
            "line": 642,
            "description": "Iterates through all child geometries using a callback function and builds\nan array of the returned values.",
            "example": [
                "\n```\nvar result = geometryCollection.children.map(function(geometry, i) {\n    return value;\n});```"
            ],
            "itemtype": "method",
            "name": "map<U>",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"Geometry\"}}Geometry{{/crossLink}}",
                    "type": "mapCb<gdal.Geometry,U>"
                }
            ],
            "return": {
                "description": "",
                "type": "U[]"
            },
            "class": "gdal.GeometryCollectionChildren"
        },
        {
            "file": "lib/gdal.js",
            "line": 659,
            "description": "Iterates through all overviews using a callback function.",
            "example": [
                "\n```\nband.overviews.forEach(function(overviewBand, i) { ... });```"
            ],
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "forEachCb<gdal.RasterBand>"
                }
            ],
            "class": "gdal.RasterBandOverviews"
        },
        {
            "file": "lib/gdal.js",
            "line": 672,
            "description": "Iterates through all raster overviews using a callback function and builds\nan array of the returned values.",
            "example": [
                "\n```\nvar result = band.overviews.map(function(overviewBand, i) {\n    return value;\n});```"
            ],
            "itemtype": "method",
            "name": "map<U>",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"RasterBand\"}}RasterBand{{/crossLink}}",
                    "type": "mapCb<gdal.RasterBand,U>"
                }
            ],
            "return": {
                "description": "",
                "type": "U[]"
            },
            "class": "gdal.RasterBandOverviews"
        },
        {
            "file": "lib/gdal.js",
            "line": 689,
            "description": "Iterates through all overview using an iterator",
            "example": [
                "\n```\nfor (const overview of band.overviews) {\n}"
            ],
            "type": "{gdal.RasterBand}",
            "itemtype": "method",
            "name": "Symbol.iterator",
            "class": "gdal.RasterBandOverviews"
        },
        {
            "file": "lib/gdal.js",
            "line": 703,
            "description": "Iterates through all registered drivers using a callback function.",
            "example": [
                "\n```\ngdal.drivers.forEach(function(driver, i) { ... });```"
            ],
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"Driver\"}}Driver{{/crossLink}}",
                    "type": "forEachCb<gdal.Driver>"
                }
            ],
            "class": "gdal.GDALDrivers"
        },
        {
            "file": "lib/gdal.js",
            "line": 716,
            "description": "Iterates through all drivers using a callback function and builds\nan array of the returned values.",
            "example": [
                "\n```\nvar result = gdal.drivers.map(function(driver, i) {\n    return value;\n});```"
            ],
            "itemtype": "method",
            "name": "map<U>",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be called with each {{#crossLink \"Driver\"}}Driver{{/crossLink}}",
                    "type": "mapCb<gdal.Driver,U>"
                }
            ],
            "return": {
                "description": "",
                "type": "U[]"
            },
            "class": "gdal.GDALDrivers"
        },
        {
            "file": "lib/gdal.js",
            "line": 733,
            "description": "Iterates through all drivers using an iterator",
            "example": [
                "\n```\nfor (const curve of gdal.drivers) {\n}"
            ],
            "type": "{gdal.Driver}",
            "itemtype": "method",
            "name": "Symbol.iterator",
            "class": "gdal.GDALDrivers"
        },
        {
            "file": "lib/gdal.js",
            "line": 747,
            "description": "Outputs all geometries as a regular javascript array.",
            "itemtype": "method",
            "name": "toArray",
            "return": {
                "description": "List of {{#crossLink \"Geometry\"}}Geometry{{/crossLink}} instances.",
                "type": "gdal.Geometry[]"
            },
            "class": "gdal.GeometryCollectionChildren"
        },
        {
            "file": "lib/gdal.js",
            "line": 756,
            "description": "Outputs all points as a regular javascript array.",
            "itemtype": "method",
            "name": "toArray",
            "return": {
                "description": "List of {{#crossLink \"Point\"}}Point{{/crossLink}} instances.",
                "type": "gdal.Point[]"
            },
            "class": "gdal.LineStringPoints"
        },
        {
            "file": "lib/gdal.js",
            "line": 765,
            "description": "Outputs all rings as a regular javascript array.",
            "itemtype": "method",
            "name": "toArray",
            "return": {
                "description": "List of {{#crossLink \"LineString\"}}LineString{{/crossLink}} instances.",
                "type": "gdal.LineString[]"
            },
            "class": "gdal.PolygonRings"
        },
        {
            "file": "lib/gdal.js",
            "line": 774,
            "description": "Creates or opens a dataset. Dataset should be explicitly closed with `dataset.close()` method if opened in `\"w\"` mode to flush any changes. Otherwise, datasets are closed when (and if) node decides to garbage collect them.",
            "example": [
                "\n```\nvar dataset = gdal.open('./data.shp');```",
                "\n```\nvar dataset = gdal.open(fs.readFileSync('./data.shp'));```"
            ],
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "open",
            "static": 1,
            "params": [
                {
                    "name": "path",
                    "description": "Path to dataset or in-memory Buffer to open",
                    "type": "String|Buffer"
                },
                {
                    "name": "mode",
                    "description": "The mode to use to open the file: `\"r\"`, `\"r+\"`, or `\"w\"`",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"r\""
                },
                {
                    "name": "drivers",
                    "description": "Driver name, or list of driver names to attempt to use.",
                    "type": "String|string[]",
                    "optional": true
                },
                {
                    "name": "x_size",
                    "description": "Used when creating a raster dataset with the `\"w\"` mode.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y_size",
                    "description": "Used when creating a raster dataset with the `\"w\"` mode.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "band_count",
                    "description": "Used when creating a raster dataset with the `\"w\"` mode.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "data_type",
                    "description": "Used when creating a raster dataset with the `\"w\"` mode.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "creation_options",
                    "description": "Used when creating a dataset with the `\"w\"` mode.",
                    "type": "String[]|object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Dataset"
            },
            "class": "gdal"
        },
        {
            "file": "lib/gdal.js",
            "line": 871,
            "description": "Asynchronously creates or opens a dataset. Dataset should be explicitly closed with `dataset.close()` method if opened in `\"w\"` mode to flush any changes. Otherwise, datasets are closed when (and if) node decides to garbage collect them.\nIf the last parameter is a callback, then this callback is called on completion and undefined is returned. Otherwise the function returns a Promise resolved with the result.",
            "example": [
                "\n```\nvar dataset = await gdal.openAsync('./data.shp');```",
                "\n```\nvar dataset = await gdal.openAsync(await fd.readFile('./data.shp'));```",
                "\n```\ngdal.openAsync('./data.shp', (err, ds) => {...});```"
            ],
            "itemtype": "method",
            "name": "openAsync",
            "static": 1,
            "params": [
                {
                    "name": "path",
                    "description": "Path to dataset or in-memory Buffer to open",
                    "type": "String|Buffer"
                },
                {
                    "name": "mode",
                    "description": "The mode to use to open the file: `\"r\"`, `\"r+\"`, or `\"w\"`",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"r\""
                },
                {
                    "name": "drivers",
                    "description": "Driver name, or list of driver names to attempt to use.",
                    "type": "String|string[]",
                    "optional": true
                },
                {
                    "name": "x_size",
                    "description": "Used when creating a raster dataset with the `\"w\"` mode.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y_size",
                    "description": "Used when creating a raster dataset with the `\"w\"` mode.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "band_count",
                    "description": "Used when creating a raster dataset with the `\"w\"` mode.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "data_type",
                    "description": "Used when creating a raster dataset with the `\"w\"` mode.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "creation_options",
                    "description": "Used when creating a dataset with the `\"w\"` mode.",
                    "type": "String[]|object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<void>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<Dataset>"
            },
            "class": "gdal"
        },
        {
            "file": "lib/gdal.js",
            "line": 1029,
            "description": "Creates a LayerFields instance from an object of keys and values.",
            "itemtype": "method",
            "name": "fromJSON",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "approx_ok",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "gdal.LayerFields"
        },
        {
            "file": "src/collections/compound_curves.cpp",
            "line": 82,
            "description": "Returns the number of curves that exist in the collection.",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.CompoundCurveCurves"
        },
        {
            "file": "src/collections/compound_curves.cpp",
            "line": 98,
            "description": "Returns the curve at the specified index.",
            "example": [
                "\n```\nvar curve0 = compound.curves.get(0);\nvar curve1 = compound.curves.get(1);```"
            ],
            "itemtype": "method",
            "name": "get",
            "return": {
                "description": "",
                "type": "gdal.CompoundCurve|gdal.SimpleCurve"
            },
            "class": "gdal.CompoundCurveCurves"
        },
        {
            "file": "src/collections/compound_curves.cpp",
            "line": 123,
            "description": "Adds a curve to the collection.",
            "example": [
                "\n```\nvar ring1 = new gdal.CircularString();\nring1.points.add(0,0);\nring1.points.add(1,0);\nring1.points.add(1,1);\nring1.points.add(0,1);\nring1.points.add(0,0);\n\n// one at a time:\ncompound.curves.add(ring1);\n\n// many at once:\ncompound.curves.add([ring1, ...]);```"
            ],
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "curves",
                    "description": "",
                    "type": "gdal.SimpleCurve|gdal.SimpleCurve[]"
                }
            ],
            "class": "gdal.CompoundCurveCurves"
        },
        {
            "file": "src/collections/dataset_bands.cpp",
            "line": 84,
            "description": "Returns the band with the given ID.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.RasterBand"
            },
            "class": "gdal.DatasetBands"
        },
        {
            "file": "src/collections/dataset_bands.cpp",
            "line": 92,
            "description": "Returns the band with the given ID.\n{{{async}}}",
            "itemtype": "method",
            "name": "getAsync",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.RasterBand>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.RasterBand>"
            },
            "class": "gdal.DatasetBands"
        },
        {
            "file": "src/collections/dataset_bands.cpp",
            "line": 141,
            "description": "Adds a new band.",
            "itemtype": "method",
            "name": "create",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "dataType",
                    "description": "Type of band ({{#crossLink \"Constants (GDT)\"}}see\nGDT constants{{/crossLink}}).",
                    "type": "Number"
                },
                {
                    "name": "options",
                    "description": "Creation options",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.RasterBand"
            },
            "class": "gdal.DatasetBands"
        },
        {
            "file": "src/collections/dataset_bands.cpp",
            "line": 152,
            "description": "Adds a new band.\n{{{async}}}",
            "itemtype": "method",
            "name": "createAsync",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "dataType",
                    "description": "Type of band ({{#crossLink \"Constants (GDT)\"}}see\nGDT constants{{/crossLink}}).",
                    "type": "Number"
                },
                {
                    "name": "options",
                    "description": "Creation options",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.RasterBand>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.RasterBand>"
            },
            "class": "gdal.DatasetBands"
        },
        {
            "file": "src/collections/dataset_bands.cpp",
            "line": 226,
            "description": "Returns the number of bands.",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.DatasetBands"
        },
        {
            "file": "src/collections/dataset_bands.cpp",
            "line": 266,
            "description": "Parent dataset",
            "readonly": "",
            "itemtype": "attribute",
            "name": "ds",
            "type": "{gdal.Dataset}",
            "class": "gdal.DatasetBands"
        },
        {
            "file": "src/collections/dataset_layers.cpp",
            "line": 88,
            "description": "Returns the layer with the given name or identifier.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "Layer name or ID.",
                    "type": "String|number"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Layer"
            },
            "class": "gdal.DatasetLayers"
        },
        {
            "file": "src/collections/dataset_layers.cpp",
            "line": 96,
            "description": "Returns the layer with the given name or identifier.\n{{{async}}}",
            "itemtype": "method",
            "name": "getAsync",
            "params": [
                {
                    "name": "key",
                    "description": "Layer name or ID.",
                    "type": "String|number"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Layer>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Layer>"
            },
            "class": "gdal.DatasetLayers"
        },
        {
            "file": "src/collections/dataset_layers.cpp",
            "line": 164,
            "description": "Adds a new layer.",
            "example": [
                "\n```\ndataset.layers.create('layername', null, gdal.Point);\n```"
            ],
            "itemtype": "method",
            "name": "create",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "name",
                    "description": "Layer name",
                    "type": "String"
                },
                {
                    "name": "srs",
                    "description": "Layer projection",
                    "type": "gdal.SpatialReference|null"
                },
                {
                    "name": "geomType",
                    "description": "Geometry type or constructor ({{#crossLink\n\"Constants (wkbGeometryType)\"}}see geometry types{{/crossLink}})",
                    "type": "Number|Function"
                },
                {
                    "name": "creation_options",
                    "description": "driver-specific layer creation\noptions",
                    "type": "String[]|object"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Layer"
            },
            "class": "gdal.DatasetLayers"
        },
        {
            "file": "src/collections/dataset_layers.cpp",
            "line": 183,
            "description": "Adds a new layer.\n{{{async}}}",
            "example": [
                "\n```\nawait dataset.layers.createAsync('layername', null, gdal.Point);\ndataset.layers.createAsync('layername', null, gdal.Point, (e, r) => console.log(e, r));\n```"
            ],
            "itemtype": "method",
            "name": "createAsync",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "name",
                    "description": "Layer name",
                    "type": "String"
                },
                {
                    "name": "srs",
                    "description": "Layer projection",
                    "type": "gdal.SpatialReference|null"
                },
                {
                    "name": "geomType",
                    "description": "Geometry type or constructor ({{#crossLink\n\"Constants (wkbGeometryType)\"}}see geometry types{{/crossLink}})",
                    "type": "Number|Function"
                },
                {
                    "name": "creation_options",
                    "description": "driver-specific layer creation\noptions",
                    "type": "String[]|object"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Layer>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Layer>"
            },
            "class": "gdal.DatasetLayers"
        },
        {
            "file": "src/collections/dataset_layers.cpp",
            "line": 261,
            "description": "Returns the number of layers.",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.DatasetLayers"
        },
        {
            "file": "src/collections/dataset_layers.cpp",
            "line": 268,
            "description": "Returns the number of layers.\n{{{async}}}",
            "itemtype": "method",
            "name": "countAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<number>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<number>"
            },
            "class": "gdal.DatasetLayers"
        },
        {
            "file": "src/collections/dataset_layers.cpp",
            "line": 314,
            "description": "Copies a layer.",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "src_lyr_name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "dst_lyr_name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "layer creation options",
                    "type": "Object|string[]",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Layer"
            },
            "class": "gdal.DatasetLayers"
        },
        {
            "file": "src/collections/dataset_layers.cpp",
            "line": 324,
            "description": "Copies a layer.\n{{{async}}}",
            "itemtype": "method",
            "name": "copyAsync",
            "params": [
                {
                    "name": "src_lyr_name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "dst_lyr_name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "layer creation options",
                    "type": "Object|string[]",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Layer>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Layer>"
            },
            "class": "gdal.DatasetLayers"
        },
        {
            "file": "src/collections/dataset_layers.cpp",
            "line": 386,
            "description": "Removes a layer.",
            "itemtype": "method",
            "name": "remove",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "gdal.DatasetLayers"
        },
        {
            "file": "src/collections/dataset_layers.cpp",
            "line": 394,
            "description": "Removes a layer.\n{{{async}}}",
            "itemtype": "method",
            "name": "removeAsync",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<void>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<void>"
            },
            "class": "gdal.DatasetLayers"
        },
        {
            "file": "src/collections/dataset_layers.cpp",
            "line": 445,
            "description": "Parent dataset",
            "readonly": "",
            "itemtype": "attribute",
            "name": "ds",
            "type": "{gdal.Dataset}",
            "class": "gdal.DatasetLayers"
        },
        {
            "file": "src/collections/feature_defn_fields.cpp",
            "line": 85,
            "description": "Returns the number of fields.",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.FeatureDefnFields"
        },
        {
            "file": "src/collections/feature_defn_fields.cpp",
            "line": 105,
            "description": "Returns the index of field definition.",
            "itemtype": "method",
            "name": "indexOf",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Index or `-1` if not found.",
                "type": "Number"
            },
            "class": "gdal.FeatureDefnFields"
        },
        {
            "file": "src/collections/feature_defn_fields.cpp",
            "line": 129,
            "description": "Returns a field definition.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "Field name or index",
                    "type": "String|number"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.FieldDefn"
            },
            "class": "gdal.FeatureDefnFields"
        },
        {
            "file": "src/collections/feature_defn_fields.cpp",
            "line": 158,
            "description": "Returns a list of field names.",
            "itemtype": "method",
            "name": "getNames",
            "return": {
                "description": "List of field names.",
                "type": "String[]"
            },
            "class": "gdal.FeatureDefnFields"
        },
        {
            "file": "src/collections/feature_defn_fields.cpp",
            "line": 186,
            "description": "Removes a field definition.",
            "itemtype": "method",
            "name": "remove",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "key",
                    "description": "Field name or index",
                    "type": "String|number"
                }
            ],
            "class": "gdal.FeatureDefnFields"
        },
        {
            "file": "src/collections/feature_defn_fields.cpp",
            "line": 221,
            "description": "Adds field definition(s).",
            "itemtype": "method",
            "name": "add",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "fields",
                    "description": "",
                    "type": "gdal.FieldDefn|gdal.FieldDefn[]"
                }
            ],
            "class": "gdal.FeatureDefnFields"
        },
        {
            "file": "src/collections/feature_defn_fields.cpp",
            "line": 269,
            "description": "Reorders the fields.",
            "example": [
                "\n```\n// reverse fields:\nfeatureDef.fields.reorder([2, 1, 0]);```"
            ],
            "itemtype": "method",
            "name": "reorder",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "map",
                    "description": "An array representing the new field order.",
                    "type": "Number[]"
                }
            ],
            "class": "gdal.FeatureDefnFields"
        },
        {
            "file": "src/collections/feature_defn_fields.cpp",
            "line": 334,
            "description": "Parent feature definition.",
            "readonly": "",
            "itemtype": "attribute",
            "name": "featureDefn",
            "type": "{gdal.FeatureDefn}",
            "class": "gdal.FeatureDefnFields"
        },
        {
            "file": "src/collections/feature_fields.cpp",
            "line": 99,
            "description": "Sets feature field(s).",
            "example": [
                "\n```\n// most-efficient, least flexible. requires you to know the ordering of the\nfields: feature.fields.set(['Something']); feature.fields.set(0,\n'Something');\n\n// most flexible.\nfeature.fields.set({name: 'Something'});\nfeature.fields.set('name', 'Something');\n```"
            ],
            "itemtype": "method",
            "name": "set",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "key",
                    "description": "Field name or index",
                    "type": "String|number|object"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Any"
                }
            ],
            "class": "gdal.FeatureFields"
        },
        {
            "file": "src/collections/feature_fields.cpp",
            "line": 206,
            "description": "Resets all fields.",
            "example": [
                "\n```\nfeature.fields.reset();```"
            ],
            "itemtype": "method",
            "name": "reset",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "values",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "gdal.FeatureFields"
        },
        {
            "file": "src/collections/feature_fields.cpp",
            "line": 267,
            "description": "Returns the number of fields.",
            "example": [
                "\n```\nfeature.fields.count();```"
            ],
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.FeatureFields"
        },
        {
            "file": "src/collections/feature_fields.cpp",
            "line": 291,
            "description": "Returns the index of a field, given its name.",
            "example": [
                "\n```\nvar index = feature.fields.indexOf('field');```"
            ],
            "itemtype": "method",
            "name": "indexOf",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Index or, `-1` if it cannot be found.",
                "type": "Number"
            },
            "class": "gdal.FeatureFields"
        },
        {
            "file": "src/collections/feature_fields.cpp",
            "line": 319,
            "description": "Outputs the field data as a pure JS object.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "toobject",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "gdal.FeatureFields"
        },
        {
            "file": "src/collections/feature_fields.cpp",
            "line": 361,
            "description": "Outputs the field values as a pure JS array.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "toArray",
            "return": {
                "description": "",
                "type": "Any[]"
            },
            "class": "gdal.FeatureFields"
        },
        {
            "file": "src/collections/feature_fields.cpp",
            "line": 420,
            "description": "Returns a field's value.",
            "example": [
                "\n```\nvalue = feature.fields.get(0);\nvalue = feature.fields.get('field');```"
            ],
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "Feature name or index.",
                    "type": "String|number"
                }
            ],
            "return": {
                "description": "",
                "type": "Any"
            },
            "class": "gdal.FeatureFields"
        },
        {
            "file": "src/collections/feature_fields.cpp",
            "line": 461,
            "description": "Returns a list of field name.",
            "itemtype": "method",
            "name": "getNames",
            "throws": {
                "description": "Error"
            },
            "return": {
                "description": "List of field names.",
                "type": "String[]"
            },
            "class": "gdal.FeatureFields"
        },
        {
            "file": "src/collections/feature_fields.cpp",
            "line": 607,
            "description": "Parent feature",
            "readonly": "",
            "itemtype": "attribute",
            "name": "feature",
            "type": "{gdal.Feature}",
            "class": "gdal.FeatureFields"
        },
        {
            "file": "src/collections/gdal_drivers.cpp",
            "line": 80,
            "description": "Returns a driver with the specified name.\n\nNote: Prior to GDAL2.x there is a separate driver for vector VRTs and raster\nVRTs. Use `\"VRT:vector\"` to fetch the vector VRT driver and `\"VRT:raster\"` to\nfetch the raster VRT driver.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "index",
                    "description": "0-based index or driver name",
                    "type": "Number|string"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Driver"
            },
            "class": "gdal.GDALDrivers"
        },
        {
            "file": "src/collections/gdal_drivers.cpp",
            "line": 167,
            "description": "Returns an array with the names of all the drivers registered with GDAL.",
            "itemtype": "method",
            "name": "getNames",
            "return": {
                "description": "",
                "type": "String[]"
            },
            "class": "gdal.GDALDrivers"
        },
        {
            "file": "src/collections/gdal_drivers.cpp",
            "line": 208,
            "description": "Returns the number of drivers registered with GDAL.",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.GDALDrivers"
        },
        {
            "file": "src/collections/geometry_collection_children.cpp",
            "line": 79,
            "description": "Returns the number of items.",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.GeometryCollectionChildren"
        },
        {
            "file": "src/collections/geometry_collection_children.cpp",
            "line": 95,
            "description": "Returns the geometry at the specified index.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "index",
                    "description": "0-based index",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.GeometryCollectionChildren"
        },
        {
            "file": "src/collections/geometry_collection_children.cpp",
            "line": 115,
            "description": "Removes the geometry at the specified index.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "index",
                    "description": "0-based index",
                    "type": "Number"
                }
            ],
            "class": "gdal.GeometryCollectionChildren"
        },
        {
            "file": "src/collections/geometry_collection_children.cpp",
            "line": 140,
            "description": "Adds geometry(s) to the collection.",
            "example": [
                "\n```\n// one at a time:\ngeometryCollection.children.add(new Point(0,0,0));\n\n// add many at once:\ngeometryCollection.children.add([\n    new Point(1,0,0),\n    new Point(1,0,0)\n]);```"
            ],
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry|gdal.Geometry[]"
                }
            ],
            "class": "gdal.GeometryCollectionChildren"
        },
        {
            "file": "src/collections/layer_features.cpp",
            "line": 83,
            "description": "Fetch a feature by its identifier.\n\n**Important:** The `id` argument is not an index. In most cases it will be\nzero-based, but in some cases it will not. If iterating, it's best to use the\n`next()` method.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "id",
                    "description": "The feature ID of the feature to read.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Feature"
            },
            "class": "gdal.LayerFeatures"
        },
        {
            "file": "src/collections/layer_features.cpp",
            "line": 95,
            "description": "Fetch a feature by its identifier.\n\n**Important:** The `id` argument is not an index. In most cases it will be\nzero-based, but in some cases it will not. If iterating, it's best to use the\n`next()` method.",
            "itemtype": "method",
            "name": "getAsync",
            "params": [
                {
                    "name": "id",
                    "description": "The feature ID of the feature to read.",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Feature>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Feature>"
            },
            "class": "gdal.LayerFeatures"
        },
        {
            "file": "src/collections/layer_features.cpp",
            "line": 134,
            "description": "Resets the feature pointer used by `next()` and\nreturns the first feature in the layer.",
            "itemtype": "method",
            "name": "first",
            "return": {
                "description": "",
                "type": "gdal.Feature"
            },
            "class": "gdal.LayerFeatures"
        },
        {
            "file": "src/collections/layer_features.cpp",
            "line": 142,
            "description": "Resets the feature pointer used by `next()` and\nreturns the first feature in the layer.",
            "itemtype": "method",
            "name": "firstAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Feature>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Feature>"
            },
            "class": "gdal.LayerFeatures"
        },
        {
            "file": "src/collections/layer_features.cpp",
            "line": 176,
            "description": "Returns the next feature in the layer. Returns null if no more features.",
            "example": [
                "\n```\nwhile (feature = layer.features.next()) { ... }```"
            ],
            "itemtype": "method",
            "name": "next",
            "return": {
                "description": "",
                "type": "gdal.Feature"
            },
            "class": "gdal.LayerFeatures"
        },
        {
            "file": "src/collections/layer_features.cpp",
            "line": 187,
            "description": "Returns the next feature in the layer. Returns null if no more features.",
            "example": [
                "\n```\nwhile (feature = await layer.features.nextAsync()) { ... }```"
            ],
            "itemtype": "method",
            "name": "nextAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Feature>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Feature>"
            },
            "class": "gdal.LayerFeatures"
        },
        {
            "file": "src/collections/layer_features.cpp",
            "line": 223,
            "description": "Adds a feature to the layer. The feature should be created using the current\nlayer as the definition.",
            "example": [
                "\n```\nvar feature = new gdal.Feature(layer);\nfeature.setGeometry(new gdal.Point(0, 1));\nfeature.fields.set('name', 'somestring');\nlayer.features.add(feature);```"
            ],
            "itemtype": "method",
            "name": "add",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "feature",
                    "description": "",
                    "type": "gdal.Feature"
                }
            ],
            "class": "gdal.LayerFeatures"
        },
        {
            "file": "src/collections/layer_features.cpp",
            "line": 239,
            "description": "Adds a feature to the layer. The feature should be created using the current\nlayer as the definition.",
            "example": [
                "\n```\nvar feature = new gdal.Feature(layer);\nfeature.setGeometry(new gdal.Point(0, 1));\nfeature.fields.set('name', 'somestring');\nawait layer.features.addAsync(feature);```"
            ],
            "itemtype": "method",
            "name": "addAsync",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "feature",
                    "description": "",
                    "type": "gdal.Feature"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<void>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<void>"
            },
            "class": "gdal.LayerFeatures"
        },
        {
            "file": "src/collections/layer_features.cpp",
            "line": 287,
            "description": "Returns the number of features in the layer.",
            "itemtype": "method",
            "name": "count",
            "params": [
                {
                    "name": "force",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "number of features in the layer.",
                "type": "Number"
            },
            "class": "gdal.LayerFeatures"
        },
        {
            "file": "src/collections/layer_features.cpp",
            "line": 295,
            "description": "Returns the number of features in the layer.",
            "itemtype": "method",
            "name": "countAsync",
            "params": [
                {
                    "name": "force",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<number>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "number of features in the layer.",
                "type": "Promise<number>"
            },
            "class": "gdal.LayerFeatures"
        },
        {
            "file": "src/collections/layer_features.cpp",
            "line": 343,
            "description": "Sets a feature in the layer.",
            "itemtype": "method",
            "name": "set",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "feature",
                    "description": "",
                    "type": "gdal.Feature"
                }
            ],
            "class": "gdal.LayerFeatures"
        },
        {
            "file": "src/collections/layer_features.cpp",
            "line": 351,
            "description": "Sets a feature in the layer.",
            "itemtype": "method",
            "name": "set",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "feature",
                    "description": "",
                    "type": "gdal.Feature"
                }
            ],
            "class": "gdal.LayerFeatures"
        },
        {
            "file": "src/collections/layer_features.cpp",
            "line": 402,
            "description": "Removes a feature from the layer.",
            "itemtype": "method",
            "name": "remove",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "gdal.LayerFeatures"
        },
        {
            "file": "src/collections/layer_features.cpp",
            "line": 410,
            "description": "Removes a feature from the layer.",
            "itemtype": "method",
            "name": "removeAsync",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<void>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<void>"
            },
            "class": "gdal.LayerFeatures"
        },
        {
            "file": "src/collections/layer_features.cpp",
            "line": 451,
            "description": "Parent layer",
            "itemtype": "attribute",
            "name": "layer",
            "type": "{gdal.Layer}",
            "class": "gdal.LayerFeatures"
        },
        {
            "file": "src/collections/layer_fields.cpp",
            "line": 81,
            "description": "Returns the number of fields.",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.LayerFields"
        },
        {
            "file": "src/collections/layer_fields.cpp",
            "line": 107,
            "description": "Find the index of field in the layer.",
            "itemtype": "method",
            "name": "indexOf",
            "params": [
                {
                    "name": "field",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Field index, or -1 if the field doesn't exist",
                "type": "Number"
            },
            "class": "gdal.LayerFields"
        },
        {
            "file": "src/collections/layer_fields.cpp",
            "line": 137,
            "description": "Returns a field definition.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "field",
                    "description": "Field name or index (0-based)",
                    "type": "String|number"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.FieldDefn"
            },
            "class": "gdal.LayerFields"
        },
        {
            "file": "src/collections/layer_fields.cpp",
            "line": 173,
            "description": "Returns a list of field names.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "getNames",
            "return": {
                "description": "List of strings.",
                "type": "String[]"
            },
            "class": "gdal.LayerFields"
        },
        {
            "file": "src/collections/layer_fields.cpp",
            "line": 208,
            "description": "Removes a field.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "field",
                    "description": "Field name or index (0-based)",
                    "type": "String|number"
                }
            ],
            "class": "gdal.LayerFields"
        },
        {
            "file": "src/collections/layer_fields.cpp",
            "line": 249,
            "description": "Adds field(s).",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "defs",
                    "description": "A field definition, or array of field\ndefinitions.",
                    "type": "gdal.FieldDefn|gdal.FieldDefn[]"
                },
                {
                    "name": "approx",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "class": "gdal.LayerFields"
        },
        {
            "file": "src/collections/layer_fields.cpp",
            "line": 310,
            "description": "Reorders fields.",
            "example": [
                "\n```\n// reverse field order\nlayer.fields.reorder([2,1,0]);```"
            ],
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "reorder",
            "params": [
                {
                    "name": "map",
                    "description": "An array of new indexes (integers)",
                    "type": "Number[]"
                }
            ],
            "class": "gdal.LayerFields"
        },
        {
            "file": "src/collections/layer_fields.cpp",
            "line": 381,
            "description": "Parent layer",
            "readonly": "",
            "itemtype": "attribute",
            "name": "layer",
            "type": "{gdal.Layer}",
            "class": "gdal.LayerFields"
        },
        {
            "file": "src/collections/linestring_points.cpp",
            "line": 9,
            "interface": "_point { x: number, y: number }",
            "class": "gdal.LineStringPoints"
        },
        {
            "file": "src/collections/linestring_points.cpp",
            "line": 86,
            "description": "Returns the number of points that are part of the line string.",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.LineStringPoints"
        },
        {
            "file": "src/collections/linestring_points.cpp",
            "line": 102,
            "description": "Reverses the order of all the points.",
            "itemtype": "method",
            "name": "reverse",
            "class": "gdal.LineStringPoints"
        },
        {
            "file": "src/collections/linestring_points.cpp",
            "line": 119,
            "description": "Adjusts the number of points that make up the line string.",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "count",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "gdal.LineStringPoints"
        },
        {
            "file": "src/collections/linestring_points.cpp",
            "line": 139,
            "description": "Returns the point at the specified index.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "index",
                    "description": "0-based index",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Point"
            },
            "class": "gdal.LineStringPoints"
        },
        {
            "file": "src/collections/linestring_points.cpp",
            "line": 168,
            "description": "Sets the point at the specified index.",
            "example": [
                "\n```\nlineString.points.set(0, new gdal.Point(1, 2));```"
            ],
            "itemtype": "method",
            "name": "set",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "index",
                    "description": "0-based index",
                    "type": "Number"
                },
                {
                    "name": "point",
                    "description": "",
                    "type": "gdal.Point"
                }
            ],
            "class": "gdal.LineStringPoints"
        },
        {
            "file": "src/collections/linestring_points.cpp",
            "line": 256,
            "description": "Adds point(s) to the line string. Also accepts any object with an x and y\nproperty.",
            "example": [
                "\n```\nlineString.points.add(new gdal.Point(1, 2));\nlineString.points.add([\n    new gdal.Point(1, 2)\n    new gdal.Point(3, 4)\n]);```"
            ],
            "itemtype": "method",
            "name": "add",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "points",
                    "description": "",
                    "type": "gdal.Point|_point|(gdal.Point|_point)[]"
                }
            ],
            "class": "gdal.LineStringPoints"
        },
        {
            "file": "src/collections/polygon_rings.cpp",
            "line": 78,
            "description": "Returns the number of rings that exist in the collection.",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.PolygonRings"
        },
        {
            "file": "src/collections/polygon_rings.cpp",
            "line": 97,
            "description": "Returns the ring at the specified index. The ring\nat index `0` will always be the polygon's exterior ring.",
            "example": [
                "\n```\nvar exterior = polygon.rings.get(0);\nvar interior = polygon.rings.get(1);```"
            ],
            "itemtype": "method",
            "name": "get",
            "return": {
                "description": "",
                "type": "gdal.LinearRing"
            },
            "class": "gdal.PolygonRings"
        },
        {
            "file": "src/collections/polygon_rings.cpp",
            "line": 128,
            "description": "Adds a ring to the collection.",
            "example": [
                "\n```\nvar ring1 = new gdal.LinearRing();\nring1.points.add(0,0);\nring1.points.add(1,0);\nring1.points.add(1,1);\nring1.points.add(0,1);\nring1.points.add(0,0);\n\n// one at a time:\npolygon.rings.add(ring1);\n\n// many at once:\npolygon.rings.add([ring1, ...]);```"
            ],
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "rings",
                    "description": "",
                    "type": "gdal.LinearRing|gdal.LinearRing[]"
                }
            ],
            "class": "gdal.PolygonRings"
        },
        {
            "file": "src/collections/rasterband_overviews.cpp",
            "line": 77,
            "description": "Fetches the overview at the provided index.",
            "itemtype": "method",
            "name": "get",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "index",
                    "description": "0-based index",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.RasterBand"
            },
            "class": "gdal.RasterBandOverviews"
        },
        {
            "file": "src/collections/rasterband_overviews.cpp",
            "line": 110,
            "description": "Fetch best sampling overview.\n\nReturns the most reduced overview of the given band that still satisfies the\ndesired number of samples. This function can be used with zero as the number\nof desired samples to fetch the most reduced overview. The same band as was\npassed in will be returned if it has not overviews, or if none of the\noverviews have enough samples.",
            "itemtype": "method",
            "name": "getBySampleCount",
            "params": [
                {
                    "name": "samples",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.RasterBand"
            },
            "class": "gdal.RasterBandOverviews"
        },
        {
            "file": "src/collections/rasterband_overviews.cpp",
            "line": 142,
            "description": "Returns the number of overviews.",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.RasterBandOverviews"
        },
        {
            "file": "src/collections/rasterband_pixels.cpp",
            "line": 104,
            "description": "Returns the value at the x, y coordinate.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.RasterBandPixels"
        },
        {
            "file": "src/collections/rasterband_pixels.cpp",
            "line": 135,
            "description": "Sets the value at the x, y coordinate.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "gdal.RasterBandPixels"
        },
        {
            "file": "src/collections/rasterband_pixels.cpp",
            "line": 167,
            "interface": "_readOptions { buffer_width?: number, buffer_height?: number, data_type?: string, pixel_space?: number, line_space?: number }",
            "class": "gdal.RasterBandPixels"
        },
        {
            "file": "src/collections/rasterband_pixels.cpp",
            "line": 171,
            "description": "Reads a region of pixels.",
            "itemtype": "method",
            "name": "read",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "data] The [TypedArray",
                    "description": "(https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView#Typed_array_subclasses) to put the data in. A new array is created if not given.",
                    "type": "ArrayBufferView",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "_readOptions",
                    "optional": true,
                    "props": [
                        {
                            "name": "buffer_width",
                            "description": "",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "x_size"
                        },
                        {
                            "name": "buffer_height",
                            "description": "",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "y_size"
                        },
                        {
                            "name": "data_type",
                            "description": "See {{#crossLink \"Constants (GDT)\"}}GDT\nconstants{{/crossLink}}.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "pixel_space",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "line_space",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "A [TypedArray](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView#Typed_array_subclasses) of values.",
                "type": "ArrayBufferView"
            },
            "class": "gdal.RasterBandPixels"
        },
        {
            "file": "src/collections/rasterband_pixels.cpp",
            "line": 191,
            "description": "Asynchronously reads a region of pixels.\nIf the last parameter is a callback, then this callback is called on completion and undefined is returned.\nAll optional parameters before the callback can be omitted so the callback parameter can be at any position as long\nas it is the last parameter. Otherwise the function returns a Promise resolved with the result.",
            "itemtype": "method",
            "name": "readAsync",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "data] The [TypedArray",
                    "description": "(https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView#Typed_array_subclasses) to put the data in. A new array is created if not given.",
                    "type": "ArrayBufferView",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "buffer_width",
                            "description": "",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "x_size"
                        },
                        {
                            "name": "buffer_height",
                            "description": "",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "y_size"
                        },
                        {
                            "name": "data_type",
                            "description": "See {{#crossLink \"Constants (GDT)\"}}GDT\nconstants{{/crossLink}}.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "pixel_space",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "line_space",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<ArrayBufferView>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "A [TypedArray](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView#Typed_array_subclasses) of values.",
                "type": "Promise<ArrayBufferView>"
            },
            "class": "gdal.RasterBandPixels"
        },
        {
            "file": "src/collections/rasterband_pixels.cpp",
            "line": 304,
            "interface": "_writeOptions { buffer_width?: number, buffer_height?: number, pixel_space?: number, line_space?: number }",
            "class": "gdal.RasterBandPixels"
        },
        {
            "file": "src/collections/rasterband_pixels.cpp",
            "line": 308,
            "description": "Writes a region of pixels.",
            "itemtype": "method",
            "name": "write",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "The [TypedArray](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView#Typed_array_subclasses) to write to the band.",
                    "type": "ArrayBufferView"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "_writeOptions",
                    "optional": true,
                    "props": [
                        {
                            "name": "buffer_width",
                            "description": "",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "x_size"
                        },
                        {
                            "name": "buffer_height",
                            "description": "",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "y_size"
                        },
                        {
                            "name": "pixel_space",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "line_space",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "gdal.RasterBandPixels"
        },
        {
            "file": "src/collections/rasterband_pixels.cpp",
            "line": 325,
            "description": "Asynchronously writes a region of pixels.\nIf the last parameter is a callback, then this callback is called on completion and undefined is returned.\nAll optional parameters before the callback can be omitted so the callback parameter can be at any position as long\nas it is the last parameter.\nOtherwise the function returns a Promise resolved with the result.\ncertain optional parameters are omitted",
            "itemtype": "method",
            "name": "writeAsync",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "The [TypedArray](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView#Typed_array_subclasses) to write to the band.",
                    "type": "ArrayBufferView"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "_writeOptions",
                    "optional": true,
                    "props": [
                        {
                            "name": "buffer_width",
                            "description": "",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "x_size"
                        },
                        {
                            "name": "buffer_height",
                            "description": "",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "y_size"
                        },
                        {
                            "name": "pixel_space",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "line_space",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<void>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<void>"
            },
            "class": "gdal.RasterBandPixels"
        },
        {
            "file": "src/collections/rasterband_pixels.cpp",
            "line": 419,
            "description": "Reads a block of pixels.",
            "itemtype": "method",
            "name": "readBlock",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "data] The [TypedArray",
                    "description": "(https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView#Typed_array_subclasses) to put the data in. A new array is created if not given.",
                    "type": "ArrayBufferView",
                    "optional": true
                }
            ],
            "return": {
                "description": "A [TypedArray](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView#Typed_array_subclasses) of values.",
                "type": "ArrayBufferView"
            },
            "class": "gdal.RasterBandPixels"
        },
        {
            "file": "src/collections/rasterband_pixels.cpp",
            "line": 430,
            "description": "Reads a block of pixels.\n{{{async}}}",
            "itemtype": "method",
            "name": "readBlockAsync",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "data] The [TypedArray",
                    "description": "(https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView#Typed_array_subclasses) to put the data in. A new array is created if not given.",
                    "type": "ArrayBufferView",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<ArrayBufferView>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "A [TypedArray](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView#Typed_array_subclasses) of values.",
                "type": "Promise<ArrayBufferView>"
            },
            "class": "gdal.RasterBandPixels"
        },
        {
            "file": "src/collections/rasterband_pixels.cpp",
            "line": 492,
            "description": "Writes a block of pixels.",
            "itemtype": "method",
            "name": "writeBlock",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "The [TypedArray](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView#Typed_array_subclasses) of values to write to the band.",
                    "type": "ArrayBufferView"
                }
            ],
            "class": "gdal.RasterBandPixels"
        },
        {
            "file": "src/collections/rasterband_pixels.cpp",
            "line": 502,
            "description": "Writes a block of pixels.\n{{{async}}}",
            "itemtype": "method",
            "name": "writeBlockAsync",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "The [TypedArray](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView#Typed_array_subclasses) of values to write to the band.",
                    "type": "ArrayBufferView"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<void>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "class": "gdal.RasterBandPixels"
        },
        {
            "file": "src/geometry/gdal_compoundcurve.cpp",
            "line": 56,
            "description": "Points that make up the compound curve.",
            "itemtype": "attribute",
            "name": "points",
            "type": "{gdal.CompoundCurveCurves}",
            "class": "gdal.CompoundCurve"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 177,
            "description": "Closes any un-closed rings.",
            "itemtype": "method",
            "name": "closeRings",
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 183,
            "description": "Closes any un-closed rings.\n{{{async}}}",
            "itemtype": "method",
            "name": "closeRingsAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<void>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<void>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 194,
            "description": "Clears the geometry.",
            "itemtype": "method",
            "name": "empty",
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 200,
            "description": "Clears the geometry.\n{{{async}}}",
            "itemtype": "method",
            "name": "emptyAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<void>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<void>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 211,
            "description": "Swaps x, y coordinates.",
            "itemtype": "method",
            "name": "swapXY",
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 217,
            "description": "Swaps x, y coordinates.\n{{{async}}}",
            "itemtype": "method",
            "name": "swapXYAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<void>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<void>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 228,
            "description": "Determines if the geometry is empty.",
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 235,
            "description": "Determines if the geometry is empty.\n{{{async}}}",
            "itemtype": "method",
            "name": "isEmptyAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<boolean>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<boolean>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 246,
            "description": "Determines if the geometry is valid.",
            "itemtype": "method",
            "name": "isValid",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 253,
            "description": "Determines if the geometry is valid.\n{{{async}}}",
            "itemtype": "method",
            "name": "isValidAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<boolean>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<boolean>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 264,
            "description": "Determines if the geometry is simple.",
            "itemtype": "method",
            "name": "isSimple",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 271,
            "description": "Determines if the geometry is simple.\n{{{async}}}",
            "itemtype": "method",
            "name": "isSimpleAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<boolean>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<boolean>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 282,
            "description": "Determines if the geometry is a ring.",
            "itemtype": "method",
            "name": "isRing",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 289,
            "description": "Determines if the geometry is a ring.\n{{{async}}}",
            "itemtype": "method",
            "name": "isRingAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<boolean>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<boolean>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 300,
            "description": "Determines if the two geometries intersect.",
            "itemtype": "method",
            "name": "intersects",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 308,
            "description": "Determines if the two geometries intersect.\n{{{async}}}",
            "itemtype": "method",
            "name": "intersectsAsync",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<boolean>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<boolean>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 321,
            "description": "Determines if the two geometries equal each other.",
            "itemtype": "method",
            "name": "equals",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 329,
            "description": "Determines if the two geometries equal each other.\n{{{async}}}",
            "itemtype": "method",
            "name": "equalsAsync",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<boolean>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<boolean>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 342,
            "description": "Determines if the two geometries are disjoint.",
            "itemtype": "method",
            "name": "disjoint",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 350,
            "description": "Determines if the two geometries are disjoint.\n{{{async}}}",
            "itemtype": "method",
            "name": "disjointAsync",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<boolean>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<boolean>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 363,
            "description": "Determines if the two geometries touch.",
            "itemtype": "method",
            "name": "touches",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 371,
            "description": "Determines if the two geometries touch.\n{{{async}}}",
            "itemtype": "method",
            "name": "touchesAsync",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<boolean>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<boolean>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 384,
            "description": "Determines if the two geometries cross.",
            "itemtype": "method",
            "name": "crosses",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 392,
            "description": "Determines if the two geometries cross.\n{{{async}}}",
            "itemtype": "method",
            "name": "crossesAsync",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<boolean>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<boolean>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 405,
            "description": "Determines if the current geometry is within the provided geometry.",
            "itemtype": "method",
            "name": "within",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 413,
            "description": "Determines if the current geometry is within the provided geometry.\n{{{async}}}",
            "itemtype": "method",
            "name": "withinAsync",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<boolean>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<boolean>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 426,
            "description": "Determines if the current geometry contains the provided geometry.",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 434,
            "description": "Determines if the current geometry contains the provided geometry.\n{{{async}}}",
            "itemtype": "method",
            "name": "containsAsync",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<boolean>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<boolean>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 447,
            "description": "Determines if the current geometry overlaps the provided geometry.",
            "itemtype": "method",
            "name": "overlaps",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 455,
            "description": "Determines if the current geometry overlaps the provided geometry.\n{{{async}}}",
            "itemtype": "method",
            "name": "overlapsAsync",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<boolean>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<boolean>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 468,
            "description": "Computes the distance between the two geometries.",
            "itemtype": "method",
            "name": "distance",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 476,
            "description": "Computes the distance between the two geometries.\n{{{async}}}",
            "itemtype": "method",
            "name": "distanceAsync",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<boolean>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<boolean>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 489,
            "description": "Modify the geometry such it has no segment longer then the given distance.",
            "itemtype": "method",
            "name": "segmentize",
            "params": [
                {
                    "name": "segment_length",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 498,
            "description": "Apply arbitrary coordinate transformation to the geometry.\n\nThis method will transform the coordinates of a geometry from their current\nspatial reference system to a new target spatial reference system. Normally\nthis means reprojecting the vectors, but it could include datum shifts,\nand changes of units.\n\nNote that this method does not require that the geometry already have a\nspatial reference system. It will be assumed that they can be treated as\nhaving the source spatial reference system of the {{#crossLink\n\"gdal.CoordinateTransformation\"}}CoordinateTransformation{{/crossLink}}\nobject, and the actual SRS of the geometry will be ignored.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "transform",
            "params": [
                {
                    "name": "transformation",
                    "description": "",
                    "type": "gdal.CoordinateTransformation"
                }
            ],
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 517,
            "description": "Apply arbitrary coordinate transformation to the geometry.\n{{{async}}}",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "transformAsync",
            "params": [
                {
                    "name": "transformation",
                    "description": "",
                    "type": "gdal.CoordinateTransformation"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<void>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<void>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 531,
            "description": "Transforms the geometry to match the provided {{#crossLink\n\"gdal.SpatialReference\"}}SpatialReference{{/crossLink}}.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "transformTo",
            "params": [
                {
                    "name": "srs",
                    "description": "",
                    "type": "gdal.SpatialReference"
                }
            ],
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 540,
            "description": "Transforms the geometry to match the provided {{#crossLink\n\"gdal.SpatialReference\"}}SpatialReference{{/crossLink}}.\n{{{async}}}",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "transformToAsync",
            "params": [
                {
                    "name": "srs",
                    "description": "",
                    "type": "gdal.SpatialReference"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<void>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<void>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 555,
            "description": "Clones the instance.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 567,
            "description": "Compute convex hull.",
            "itemtype": "method",
            "name": "convexHull",
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 574,
            "description": "Compute convex hull.\n{{{async}}}",
            "itemtype": "method",
            "name": "convexHullAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Geometry>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Geometry>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 594,
            "description": "Compute boundary.",
            "itemtype": "method",
            "name": "boundary",
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 601,
            "description": "Compute boundary.\n{{{async}}}",
            "itemtype": "method",
            "name": "boundaryAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Geometry>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Geometry>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 621,
            "description": "Compute intersection with another geometry.",
            "itemtype": "method",
            "name": "intersection",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 629,
            "description": "Compute intersection with another geometry.\n{{{async}}}",
            "itemtype": "method",
            "name": "intersectionAsync",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Geometry>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Geometry>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 656,
            "description": "Compute the union of this geometry with another.",
            "itemtype": "method",
            "name": "union",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 664,
            "description": "Compute the union of this geometry with another.\n{{{async}}}",
            "itemtype": "method",
            "name": "unionAsync",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Geometry>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Geometry>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 691,
            "description": "Compute the difference of this geometry with another.",
            "itemtype": "method",
            "name": "difference",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 699,
            "description": "Compute the difference of this geometry with another.\n{{{async}}}",
            "itemtype": "method",
            "name": "differenceAsync",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Geometry>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Geometry>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 726,
            "description": "Computes the symmetric difference of this geometry and the second geometry.",
            "itemtype": "method",
            "name": "symDifference",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 734,
            "description": "Computes the symmetric difference of this geometry and the second geometry.\n{{{async}}}",
            "itemtype": "method",
            "name": "symDifferenceAsync",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Geometry>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Geometry>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 761,
            "description": "Reduces the geometry complexity.",
            "itemtype": "method",
            "name": "simplify",
            "params": [
                {
                    "name": "tolerance",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 769,
            "description": "Reduces the geometry complexity.\n{{{async}}}",
            "itemtype": "method",
            "name": "simplifyAsync",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Geometry>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Geometry>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 795,
            "description": "Reduces the geometry complexity while preserving the topology.",
            "itemtype": "method",
            "name": "simplifyPreserveTopology",
            "params": [
                {
                    "name": "tolerance",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 803,
            "description": "Reduces the geometry complexity while preserving the topology.\n{{{async}}}",
            "itemtype": "method",
            "name": "simplifyPreserveTopologyAsync",
            "params": [
                {
                    "name": "tolerance",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Geometry>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Geometry>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 829,
            "description": "Buffers the geometry by the given distance.",
            "itemtype": "method",
            "name": "buffer",
            "params": [
                {
                    "name": "distance",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "segments",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 838,
            "description": "Buffers the geometry by the given distance.\n{{{async}}}",
            "itemtype": "method",
            "name": "bufferAsync",
            "params": [
                {
                    "name": "distance",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "segments",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Geometry>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Geometry>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 869,
            "description": "Convert a geometry into well known text format.",
            "itemtype": "method",
            "name": "toWKT",
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 876,
            "description": "Convert a geometry into well known text format.\n{{{async}}}",
            "itemtype": "method",
            "name": "toWKTAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Geometry>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Geometry>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 915,
            "description": "Convert a geometry into well known binary format.",
            "itemtype": "method",
            "name": "toWKB",
            "params": [
                {
                    "name": "byte_order",
                    "description": "({{#crossLink \"Constants\n(wkbByteOrder)\"}}see options{{/crossLink}})",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"MSB\""
                },
                {
                    "name": "variant",
                    "description": "({{#crossLink \"Constants (wkbVariant)\"}}see\noptions{{/crossLink}})",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"OGC\""
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 926,
            "description": "Convert a geometry into well known binary format.\n{{{async}}}",
            "itemtype": "method",
            "name": "toWKBAsync",
            "params": [
                {
                    "name": "byte_order",
                    "description": "({{#crossLink \"Constants\n(wkbByteOrder)\"}}see options{{/crossLink}})",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"MSB\""
                },
                {
                    "name": "variant",
                    "description": "({{#crossLink \"Constants (wkbVariant)\"}}see\noptions{{/crossLink}})",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"OGC\""
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Geometry>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Geometry>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1011,
            "description": "Convert a geometry into KML format.",
            "itemtype": "method",
            "name": "toKML",
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1018,
            "description": "Convert a geometry into KML format.\n{{{async}}}",
            "itemtype": "method",
            "name": "toKMLAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Geometry>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Geometry>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1053,
            "description": "Convert a geometry into GML format.",
            "itemtype": "method",
            "name": "toGML",
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1060,
            "description": "Convert a geometry into GML format.\n{{{async}}}",
            "itemtype": "method",
            "name": "toGMLAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Geometry>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Geometry>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1095,
            "description": "Convert a geometry into JSON format.",
            "itemtype": "method",
            "name": "toJSON",
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1102,
            "description": "Convert a geometry into JSON format.\n{{{async}}}",
            "itemtype": "method",
            "name": "toJSONAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Geometry>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Geometry>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1137,
            "description": "Compute the centroid of the geometry.",
            "itemtype": "method",
            "name": "centroid",
            "return": {
                "description": "",
                "type": "gdal.Point"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1144,
            "description": "Compute the centroid of the geometry.\n{{{async}}}",
            "itemtype": "method",
            "name": "centroidAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Geometry>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Geometry>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1180,
            "description": "Computes the bounding box (envelope).",
            "itemtype": "method",
            "name": "getEnvelope",
            "return": {
                "description": "Bounding envelope",
                "type": "gdal.Envelope"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1187,
            "description": "Computes the bounding box (envelope).\n{{{async}}}",
            "itemtype": "method",
            "name": "getEnvelopeAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Geometry>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Geometry>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1228,
            "description": "Computes the 3D bounding box (envelope).",
            "itemtype": "method",
            "name": "getEnvelope3D",
            "return": {
                "description": "Bounding envelope",
                "type": "gdal.Envelope3D"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1235,
            "description": "Computes the 3D bounding box (envelope).\n{{{async}}}",
            "itemtype": "method",
            "name": "getEnvelope3DAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Geometry>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Geometry>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1279,
            "description": "Convert geometry to strictly 2D",
            "itemtype": "method",
            "name": "flattenTo2D",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1289,
            "description": "Creates a Geometry from a WKT string.",
            "static": 1,
            "itemtype": "method",
            "name": "fromWKT",
            "params": [
                {
                    "name": "wkt",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "srs",
                    "description": "",
                    "type": "gdal.SpatialReference",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1299,
            "description": "Creates a Geometry from a WKT string.\n{{{async}}}",
            "static": 1,
            "itemtype": "method",
            "name": "fromWKTAsync",
            "params": [
                {
                    "name": "wkt",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "srs",
                    "description": "",
                    "type": "gdal.SpatialReference",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Geometry>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Geometry>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1336,
            "description": "Creates a Geometry from a WKB buffer.",
            "static": 1,
            "itemtype": "method",
            "name": "fromWKB",
            "params": [
                {
                    "name": "wkb",
                    "description": "",
                    "type": "Buffer"
                },
                {
                    "name": "srs",
                    "description": "",
                    "type": "gdal.SpatialReference",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1346,
            "description": "Creates a Geometry from a WKB buffer.\n{{{async}}}",
            "static": 1,
            "itemtype": "method",
            "name": "fromWKBAsync",
            "params": [
                {
                    "name": "wkb",
                    "description": "",
                    "type": "Buffer"
                },
                {
                    "name": "srs",
                    "description": "",
                    "type": "gdal.SpatialReference",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Geometry>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Geometry>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1392,
            "description": "Creates a Geometry from a GeoJSON string.",
            "static": 1,
            "itemtype": "method",
            "name": "fromGeoJson",
            "params": [
                {
                    "name": "geojson",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1401,
            "description": "Creates a Geometry from a GeoJSON string.\n{{{async}}}\n\nAlas, the current implementation uses V8's JSON.Stringify\nand then converts the string to UTF-8 (from JS internal UTF-16)\nThis part is neither async-compatible, neither parallelizable\nThe GDAL part is async\nPay attention to the event loop if you use this and need\nto remain low-latency",
            "static": 1,
            "itemtype": "method",
            "name": "fromGeoJsonAsync",
            "params": [
                {
                    "name": "geojson",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Geometry>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Geometry>"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1450,
            "description": "Creates an empty Geometry from a WKB type.",
            "static": 1,
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "type",
                    "description": "WKB geometry type ({{#crossLink \"Constants\n(wkbGeometryType)\"}}available options{{/crossLink}})",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1468,
            "itemtype": "attribute",
            "name": "srs",
            "type": "{gdal.SpatialReference}",
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1494,
            "readonly": "",
            "itemtype": "attribute",
            "name": "name",
            "type": "{string}",
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1505,
            "description": "See {{#crossLink \"Constants\n(wkbGeometryType)\"}}wkbGeometryTypes{{/crossLink}}.",
            "readonly": "",
            "itemtype": "attribute",
            "name": "wkbType",
            "type": "{number}",
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1518,
            "readonly": "",
            "itemtype": "attribute",
            "name": "wkbSize",
            "type": "{number}",
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1529,
            "readonly": "",
            "itemtype": "attribute",
            "name": "dimension",
            "type": "{number}",
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1540,
            "itemtype": "attribute",
            "name": "coordinateDimension",
            "type": "{number}",
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1592,
            "description": "Returns the Geometry subclass that matches the\ngiven WKB geometry type.",
            "static": 1,
            "itemtype": "method",
            "name": "getConstructor",
            "params": [
                {
                    "name": "type",
                    "description": "WKB geometry type ({{#crossLink \"Constants\n(wkbGeometryType)\"}}available options{{/crossLink}})",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometry.cpp",
            "line": 1609,
            "description": "Returns the Geometry subclass name that matches the\ngiven WKB geometry type.",
            "static": 1,
            "itemtype": "method",
            "name": "getName",
            "params": [
                {
                    "name": "type",
                    "description": "WKB geometry type ({{#crossLink \"Constants\n(wkbGeometryType)\"}}available options{{/crossLink}})",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "gdal.Geometry"
        },
        {
            "file": "src/geometry/gdal_geometrycollection.cpp",
            "line": 44,
            "description": "Computes the combined area of the geometries.",
            "itemtype": "method",
            "name": "getArea",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.GeometryCollection"
        },
        {
            "file": "src/geometry/gdal_geometrycollection.cpp",
            "line": 52,
            "description": "Compute the length of a multicurve.",
            "itemtype": "method",
            "name": "getLength",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.GeometryCollection"
        },
        {
            "file": "src/geometry/gdal_geometrycollection.cpp",
            "line": 60,
            "description": "All geometries represented by this collection.",
            "itemtype": "attribute",
            "name": "children",
            "type": "{gdal.GeometryCollectionChildren}",
            "class": "gdal.GeometryCollection"
        },
        {
            "file": "src/geometry/gdal_linearring.cpp",
            "line": 43,
            "description": "Computes the area enclosed by the ring.",
            "itemtype": "method",
            "name": "getArea",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.LinearRing"
        },
        {
            "file": "src/geometry/gdal_multicurve.cpp",
            "line": 43,
            "description": "Converts it to a polygon.",
            "itemtype": "method",
            "name": "polygonize",
            "return": {
                "description": "",
                "type": "gdal.Polygon"
            },
            "class": "gdal.MultiCurve"
        },
        {
            "file": "src/geometry/gdal_multilinestring.cpp",
            "line": 42,
            "description": "Converts it to a polygon.",
            "itemtype": "method",
            "name": "polygonize",
            "return": {
                "description": "",
                "type": "gdal.Polygon"
            },
            "class": "gdal.MultiLinestring"
        },
        {
            "file": "src/geometry/gdal_multipolygon.cpp",
            "line": 42,
            "description": "Unions all the geometries and returns the result.",
            "itemtype": "method",
            "name": "unionCascaded",
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.MultiPolygon"
        },
        {
            "file": "src/geometry/gdal_multipolygon.cpp",
            "line": 56,
            "description": "Computes the combined area of the collection.",
            "itemtype": "method",
            "name": "getArea",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.MultiPolygon"
        },
        {
            "file": "src/geometry/gdal_point.cpp",
            "line": 85,
            "itemtype": "attribute",
            "name": "x",
            "type": "{number}",
            "class": "gdal.Point"
        },
        {
            "file": "src/geometry/gdal_point.cpp",
            "line": 108,
            "itemtype": "attribute",
            "name": "y",
            "type": "{number}",
            "class": "gdal.Point"
        },
        {
            "file": "src/geometry/gdal_point.cpp",
            "line": 131,
            "itemtype": "attribute",
            "name": "z",
            "type": "{number}",
            "class": "gdal.Point"
        },
        {
            "file": "src/geometry/gdal_polygon.cpp",
            "line": 48,
            "description": "Computes the area of the polygon.",
            "itemtype": "method",
            "name": "getArea",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.Polygon"
        },
        {
            "file": "src/geometry/gdal_polygon.cpp",
            "line": 56,
            "description": "The rings that make up the polygon geometry.",
            "itemtype": "attribute",
            "name": "rings",
            "type": "{gdal.PolygonRings}",
            "class": "gdal.Polygon"
        },
        {
            "file": "src/geometry/gdal_simplecurve.cpp",
            "line": 52,
            "description": "Returns the point at the specified distance along the SimpleCurve.",
            "itemtype": "method",
            "name": "value",
            "params": [
                {
                    "name": "distance",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Point"
            },
            "class": "gdal.SimpleCurve"
        },
        {
            "file": "src/geometry/gdal_simplecurve.cpp",
            "line": 74,
            "description": "Compute the length of a multiSimpleCurve.",
            "itemtype": "method",
            "name": "getLength",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal.SimpleCurve"
        },
        {
            "file": "src/geometry/gdal_simplecurve.cpp",
            "line": 82,
            "description": "The points that make up the SimpleCurve geometry.",
            "itemtype": "attribute",
            "name": "points",
            "type": "{gdal.LineStringPoints}",
            "class": "gdal.SimpleCurve"
        },
        {
            "file": "src/geometry/gdal_simplecurve.cpp",
            "line": 93,
            "description": "Add a segment of another LineString to this SimpleCurve subtype.\n\nAdds the request range of vertices to the end of this compound curve in an\nefficient manner. If the start index is larger than the end index then the\nvertices will be reversed as they are copied.",
            "itemtype": "method",
            "name": "addSubLinestring",
            "params": [
                {
                    "name": "LineString",
                    "description": "to be added",
                    "type": "gdal.LineString"
                },
                {
                    "name": "start",
                    "description": "the first vertex to copy, defaults to 0 to start with\nthe first vertex in the other LineString",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "end",
                    "description": "the last vertex to copy, defaults to -1 indicating the\nlast vertex of the other LineString",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "-1"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "gdal.SimpleCurve"
        },
        {
            "file": "src/gdal.hpp",
            "line": 118,
            "description": "Convert decimal degrees to degrees, minutes, and seconds string",
            "static": 1,
            "itemtype": "method",
            "name": "decToDMS",
            "params": [
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "axis",
                    "description": "`\"lat\"` or `\"long\"`",
                    "type": "String"
                },
                {
                    "name": "precision",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "2"
                }
            ],
            "return": {
                "description": "A string nndnn'nn.nn'\"L where n is a number and L is either\nN or E",
                "type": "String"
            },
            "class": "gdal"
        },
        {
            "file": "src/gdal_algorithms.cpp",
            "line": 18,
            "interface": "_fillOptions { src: gdal.RasterBand, mask?: gdal.RasterBand, searchDist: number, smoothingIterations?: number }",
            "class": "gdal"
        },
        {
            "file": "src/gdal_algorithms.cpp",
            "line": 22,
            "description": "Fill raster regions by interpolation from edges.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "fillNodata",
            "static": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "_fillOptions",
                    "props": [
                        {
                            "name": "src",
                            "description": "This band to be updated in-place.",
                            "type": "gdal.RasterBand"
                        },
                        {
                            "name": "mask",
                            "description": "Mask band",
                            "type": "gdal.RasterBand",
                            "optional": true
                        },
                        {
                            "name": "searchDist",
                            "description": "The maximum distance (in pixels) that the algorithm will search out for values to interpolate.",
                            "type": "Number"
                        },
                        {
                            "name": "smoothingIterations",
                            "description": "The number of 3x3 average filter smoothing iterations to run after the interpolation to dampen artifacts.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        }
                    ]
                }
            ],
            "class": "gdal"
        },
        {
            "file": "src/gdal_algorithms.cpp",
            "line": 36,
            "description": "Fill raster regions by interpolation from edges.\n{{{async}}}",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "fillNodataAsync",
            "static": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "_fillOptions",
                    "props": [
                        {
                            "name": "src",
                            "description": "This band to be updated in-place.",
                            "type": "gdal.RasterBand"
                        },
                        {
                            "name": "mask",
                            "description": "Mask band",
                            "type": "gdal.RasterBand",
                            "optional": true
                        },
                        {
                            "name": "searchDist",
                            "description": "The maximum distance (in pixels) that the algorithm will search out for values to interpolate.",
                            "type": "Number"
                        },
                        {
                            "name": "smoothingIterations",
                            "description": "The number of 3x3 average filter smoothing iterations to run after the interpolation to dampen artifacts.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<void>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<void>"
            },
            "class": "gdal"
        },
        {
            "file": "src/gdal_algorithms.cpp",
            "line": 87,
            "interface": "_contourOptions { src: gdal.RasterBand, dst: gdal.Layer, offset?: number, interval?: number, fixedLevels?: number, nodata?: number, idField?: number, elevField?: number }",
            "class": "gdal"
        },
        {
            "file": "src/gdal_algorithms.cpp",
            "line": 91,
            "description": "Create vector contours from raster DEM.\n\nThis algorithm will generate contour vectors for the input raster band on the\nrequested set of contour levels. The vector contours are written to the\npassed in vector layer. Also, a NODATA value may be specified to identify\npixels that should not be considered in contour line generation.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "contourGenerate",
            "static": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "_contourOptions",
                    "props": [
                        {
                            "name": "src",
                            "description": "",
                            "type": "gdal.RasterBand"
                        },
                        {
                            "name": "dst",
                            "description": "",
                            "type": "gdal.Layer"
                        },
                        {
                            "name": "offset",
                            "description": "The \"offset\" relative to which contour intervals are applied. This is normally zero, but could be different. To generate 10m contours at 5, 15, 25, ... the offset would be 5.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "interval",
                            "description": "The elevation interval between contours generated.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "100"
                        },
                        {
                            "name": "fixedLevels",
                            "description": "A list of fixed contour levels at which contours should be generated. Overrides interval/base options if set.",
                            "type": "Number[]",
                            "optional": true
                        },
                        {
                            "name": "nodata",
                            "description": "The value to use as a \"nodata\" value. That is, a pixel value which should be ignored in generating contours as if the value of the pixel were not known.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "idField",
                            "description": "A field index to indicate where a unique id should be written for each feature (contour) written.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "elevField",
                            "description": "A field index to indicate where the elevation value of the contour should be written.",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "gdal"
        },
        {
            "file": "src/gdal_algorithms.cpp",
            "line": 114,
            "description": "Create vector contours from raster DEM.\n{{{async}}}\n\nThis algorithm will generate contour vectors for the input raster band on the\nrequested set of contour levels. The vector contours are written to the\npassed in vector layer. Also, a NODATA value may be specified to identify\npixels that should not be considered in contour line generation.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "contourGenerateAsync",
            "static": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "_contourOptions",
                    "props": [
                        {
                            "name": "src",
                            "description": "",
                            "type": "gdal.RasterBand"
                        },
                        {
                            "name": "dst",
                            "description": "",
                            "type": "gdal.Layer"
                        },
                        {
                            "name": "offset",
                            "description": "The \"offset\" relative to which contour intervals are applied. This is normally zero, but could be different. To generate 10m contours at 5, 15, 25, ... the offset would be 5.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "interval",
                            "description": "The elevation interval between contours generated.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "100"
                        },
                        {
                            "name": "fixedLevels",
                            "description": "A list of fixed contour levels at which contours should be generated. Overrides interval/base options if set.",
                            "type": "Number[]",
                            "optional": true
                        },
                        {
                            "name": "nodata",
                            "description": "The value to use as a \"nodata\" value. That is, a pixel value which should be ignored in generating contours as if the value of the pixel were not known.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "idField",
                            "description": "A field index to indicate where a unique id should be written for each feature (contour) written.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "elevField",
                            "description": "A field index to indicate where the elevation value of the contour should be written.",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<void>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<void>"
            },
            "class": "gdal"
        },
        {
            "file": "src/gdal_algorithms.cpp",
            "line": 221,
            "interface": "_sieveOptions { src: gdal.RasterBand, dst: gdal.RasterBand, mask?: gdal.RasterBand, threshold: number, connectedness?: number }",
            "class": "gdal"
        },
        {
            "file": "src/gdal_algorithms.cpp",
            "line": 225,
            "description": "Removes small raster polygons.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "sieveFilter",
            "static": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "_sieveOptions",
                    "props": [
                        {
                            "name": "src",
                            "description": "",
                            "type": "gdal.RasterBand"
                        },
                        {
                            "name": "dst",
                            "description": "Output raster band. It may be the same as src band to update the source in place.",
                            "type": "gdal.RasterBand"
                        },
                        {
                            "name": "mask",
                            "description": "All pixels in the mask band with a value other than zero will be considered suitable for inclusion in polygons.",
                            "type": "gdal.RasterBand",
                            "optional": true
                        },
                        {
                            "name": "threshold",
                            "description": "Raster polygons with sizes smaller than this will be merged into their largest neighbour.",
                            "type": "Number"
                        },
                        {
                            "name": "connectedness",
                            "description": "Either 4 indicating that diagonal pixels are not considered directly adjacent for polygon membership purposes or 8 indicating they are.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "4"
                        }
                    ]
                }
            ],
            "class": "gdal"
        },
        {
            "file": "src/gdal_algorithms.cpp",
            "line": 240,
            "description": "Removes small raster polygons.\n{{{async}}}",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "sieveFilterAsync",
            "static": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "_sieveOptions",
                    "props": [
                        {
                            "name": "src",
                            "description": "",
                            "type": "gdal.RasterBand"
                        },
                        {
                            "name": "dst",
                            "description": "Output raster band. It may be the same as src band to update the source in place.",
                            "type": "gdal.RasterBand"
                        },
                        {
                            "name": "mask",
                            "description": "All pixels in the mask band with a value other than zero will be considered suitable for inclusion in polygons.",
                            "type": "gdal.RasterBand",
                            "optional": true
                        },
                        {
                            "name": "threshold",
                            "description": "Raster polygons with sizes smaller than this will be merged into their largest neighbour.",
                            "type": "Number"
                        },
                        {
                            "name": "connectedness",
                            "description": "Either 4 indicating that diagonal pixels are not considered directly adjacent for polygon membership purposes or 8 indicating they are.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "4"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<void>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<void>"
            },
            "class": "gdal"
        },
        {
            "file": "src/gdal_algorithms.cpp",
            "line": 300,
            "description": "Compute checksum for image region.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "checksumImage",
            "static": 1,
            "params": [
                {
                    "name": "src",
                    "description": "",
                    "type": "gdal.RasterBand"
                },
                {
                    "name": "x",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "w",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "src.width"
                },
                {
                    "name": "h",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "src.height"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "gdal"
        },
        {
            "file": "src/gdal_algorithms.cpp",
            "line": 315,
            "description": "Compute checksum for image region.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "checksumImageAsync",
            "static": 1,
            "params": [
                {
                    "name": "src",
                    "description": "",
                    "type": "gdal.RasterBand"
                },
                {
                    "name": "x",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "w",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "src.width"
                },
                {
                    "name": "h",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "src.height"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<number>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<number>"
            },
            "class": "gdal"
        },
        {
            "file": "src/gdal_algorithms.cpp",
            "line": 376,
            "interface": "_polygonizeOptions { src: gdal.RasterBand, dst: gdal.Layer, mask?: gdal.RasterBand, pixValField: number, connectedness?: number, useFloats?:boolean }",
            "class": "gdal"
        },
        {
            "file": "src/gdal_algorithms.cpp",
            "line": 380,
            "description": "Creates vector polygons for all connected regions of pixels in the raster\nsharing a common pixel value. Each polygon is created with an attribute\nindicating the pixel value of that polygon. A raster mask may also be\nprovided to determine which pixels are eligible for processing.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "polygonize",
            "static": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "_polygonizeOptions",
                    "props": [
                        {
                            "name": "src",
                            "description": "",
                            "type": "gdal.RasterBand"
                        },
                        {
                            "name": "dst",
                            "description": "",
                            "type": "gdal.Layer"
                        },
                        {
                            "name": "mask",
                            "description": "",
                            "type": "gdal.RasterBand",
                            "optional": true
                        },
                        {
                            "name": "pixValField",
                            "description": "The attribute field index indicating the feature attribute into which the pixel value of the polygon should be written.",
                            "type": "Number"
                        },
                        {
                            "name": "connectedness",
                            "description": "Either 4 indicating that diagonal pixels are not considered directly adjacent for polygon membership purposes or 8 indicating they are.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "4"
                        },
                        {
                            "name": "useFloats",
                            "description": "Use floating point buffers instead of int buffers.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "class": "gdal"
        },
        {
            "file": "src/gdal_algorithms.cpp",
            "line": 399,
            "description": "Creates vector polygons for all connected regions of pixels in the raster\nsharing a common pixel value. Each polygon is created with an attribute\nindicating the pixel value of that polygon. A raster mask may also be\nprovided to determine which pixels are eligible for processing.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "polygonizeAsync",
            "static": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "_polygonizeOptions",
                    "props": [
                        {
                            "name": "src",
                            "description": "",
                            "type": "gdal.RasterBand"
                        },
                        {
                            "name": "dst",
                            "description": "",
                            "type": "gdal.Layer"
                        },
                        {
                            "name": "mask",
                            "description": "",
                            "type": "gdal.RasterBand",
                            "optional": true
                        },
                        {
                            "name": "pixValField",
                            "description": "The attribute field index indicating the feature attribute into which the pixel value of the polygon should be written.",
                            "type": "Number"
                        },
                        {
                            "name": "connectedness",
                            "description": "Either 4 indicating that diagonal pixels are not considered directly adjacent for polygon membership purposes or 8 indicating they are.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "4"
                        },
                        {
                            "name": "useFloats",
                            "description": "Use floating point buffers instead of int buffers.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<void>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<void>"
            },
            "class": "gdal"
        },
        {
            "file": "src/gdal_coordinate_transformation.cpp",
            "line": 160,
            "description": "Transform point from source to destination space.",
            "example": [
                "\n```\npt = transform.transformPoint(0, 0, 0);\npt = transform.transformPoint({x: 0, y: 0, z: 0});```"
            ],
            "itemtype": "method",
            "name": "transformPoint",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "A regular object containing `x`, `y`, `z` properties.",
                "type": "Object"
            },
            "class": "gdal.CoordinateTransformation"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 190,
            "description": "Fetch metadata.",
            "itemtype": "method",
            "name": "getMetadata",
            "params": [
                {
                    "name": "domain",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 221,
            "description": "Determines if the dataset supports the indicated operation.",
            "itemtype": "method",
            "name": "testCapability",
            "params": [
                {
                    "name": "capability",
                    "description": "(see {{#crossLink \"Constants (ODsC)\"}}capability\nlist{{/crossLink}})",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 256,
            "description": "Get output projection for GCPs.",
            "itemtype": "method",
            "name": "getGCPProjection",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 284,
            "description": "Closes the dataset to further operations.\nThis is normally an instantenous atomic operation that won't block the event loop\nexcept if there is an operation running on this dataset in asynchronous context.\n\nIf this could potentially be the case and blocking the event loop is not possible (server code),\nthen the best option is to simply unreference it (ds = null) and leave\nthe garbage collector to expire it.",
            "itemtype": "method",
            "name": "close",
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 308,
            "description": "Flushes all changes to disk.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "flush",
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 315,
            "description": "Flushes all changes to disk.\n{{{async}}}",
            "itemtype": "method",
            "name": "flushAsync",
            "throws": {
                "description": "Error"
            },
            "params": [
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<void>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<void>"
            },
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 368,
            "description": "Execute an SQL statement against the data store.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "executeSQL",
            "params": [
                {
                    "name": "statement",
                    "description": "SQL statement to execute.",
                    "type": "String"
                },
                {
                    "name": "spatial_filter",
                    "description": "Geometry which represents a\nspatial filter.",
                    "type": "gdal.Geometry",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "dialect",
                    "description": "Allows control of the statement dialect. If\nset to `null`, the OGR SQL engine will be used, except for RDBMS drivers that\nwill use their dedicated SQL engine, unless `\"OGRSQL\"` is explicitely passed\nas the dialect. Starting with OGR 1.10, the `\"SQLITE\"` dialect can also be\nused.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Layer"
            },
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 384,
            "description": "Execute an SQL statement against the data store.\n{{{async}}}",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "executeSQLAsync",
            "params": [
                {
                    "name": "statement",
                    "description": "SQL statement to execute.",
                    "type": "String"
                },
                {
                    "name": "spatial_filter",
                    "description": "Geometry which represents a\nspatial filter.",
                    "type": "gdal.Geometry",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "dialect",
                    "description": "Allows control of the statement dialect. If\nset to `null`, the OGR SQL engine will be used, except for RDBMS drivers that\nwill use their dedicated SQL engine, unless `\"OGRSQL\"` is explicitely passed\nas the dialect. Starting with OGR 1.10, the `\"SQLITE\"` dialect can also be\nused.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Layer>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Layer>"
            },
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 445,
            "description": "Fetch files forming dataset.\n\nReturns a list of files believed to be part of this dataset. If it returns an\nempty list of files it means there is believed to be no local file system\nfiles associated with the dataset (for instance a virtual dataset).\n\nReturns an empty array for vector datasets if GDAL version is below 2.0",
            "itemtype": "method",
            "name": "getFileList",
            "return": {
                "description": "",
                "type": "String[]"
            },
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 501,
            "description": "Fetches GCPs.",
            "itemtype": "method",
            "name": "getGCPs",
            "return": {
                "description": "",
                "type": "Object[]"
            },
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 558,
            "description": "Sets GCPs.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "setGCPs",
            "params": [
                {
                    "name": "gcps",
                    "description": "",
                    "type": "Object[]"
                },
                {
                    "name": "projection",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 642,
            "description": "Builds dataset overviews.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "buildOverviews",
            "params": [
                {
                    "name": "resampling",
                    "description": "`\"NEAREST\"`, `\"GAUSS\"`, `\"CUBIC\"`, `\"AVERAGE\"`,\n`\"MODE\"`, `\"AVERAGE_MAGPHASE\"` or `\"NONE\"`",
                    "type": "String"
                },
                {
                    "name": "overviews",
                    "description": "",
                    "type": "Number[]"
                },
                {
                    "name": "bands",
                    "description": "Note: Generation of overviews in external TIFF\ncurrently only supported when operating on all bands.",
                    "type": "Number[]",
                    "optional": true
                }
            ],
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 654,
            "description": "Builds dataset overviews.\n{{{async}}}",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "buildOverviewsAsync",
            "params": [
                {
                    "name": "resampling",
                    "description": "`\"NEAREST\"`, `\"GAUSS\"`, `\"CUBIC\"`, `\"AVERAGE\"`,\n`\"MODE\"`, `\"AVERAGE_MAGPHASE\"` or `\"NONE\"`",
                    "type": "String"
                },
                {
                    "name": "overviews",
                    "description": "",
                    "type": "Number[]"
                },
                {
                    "name": "bands",
                    "description": "Note: Generation of overviews in external TIFF\ncurrently only supported when operating on all bands.",
                    "type": "Number[]",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<void>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<void>"
            },
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 749,
            "readonly": "",
            "itemtype": "attribute",
            "name": "description",
            "type": "{string}",
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 781,
            "description": "Raster dimensions. An object containing `x` and `y` properties.",
            "readonly": "",
            "itemtype": "attribute",
            "name": "rasterSize",
            "type": "{object}",
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 825,
            "description": "Spatial reference associated with raster dataset",
            "throws": {
                "description": "Error"
            },
            "itemtype": "attribute",
            "name": "srs",
            "type": "{gdal.SpatialReference}",
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 871,
            "description": "An affine transform which maps pixel/line coordinates into georeferenced\nspace using the following relationship:",
            "example": [
                "\n```\nvar GT = dataset.geoTransform;\nvar Xgeo = GT[0] + Xpixel*GT[1] + Yline*GT[2];\nvar Ygeo = GT[3] + Xpixel*GT[4] + Yline*GT[5];```"
            ],
            "itemtype": "attribute",
            "name": "geoTransform",
            "type": "{number[]}",
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 923,
            "readonly": "",
            "itemtype": "attribute",
            "name": "driver",
            "type": "{gdal.Driver}",
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 1038,
            "readonly": "",
            "itemtype": "attribute",
            "name": "bands",
            "type": "{gdal.DatasetBands}",
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_dataset.cpp",
            "line": 1048,
            "readonly": "",
            "itemtype": "attribute",
            "name": "layers",
            "type": "{gdal.DatasetLayers}",
            "class": "gdal.Dataset"
        },
        {
            "file": "src/gdal_driver.cpp",
            "line": 155,
            "readonly": "",
            "itemtype": "attribute",
            "name": "description",
            "type": "{string}",
            "class": "gdal.Driver"
        },
        {
            "file": "src/gdal_driver.cpp",
            "line": 174,
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "deleteDataset",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "gdal.Driver"
        },
        {
            "file": "src/gdal_driver.cpp",
            "line": 209,
            "description": "Create a new dataset with this driver.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "x_size",
                    "description": "raster width in pixels (ignored for vector\ndatasets)",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "y_size",
                    "description": "raster height in pixels (ignored for vector\ndatasets)",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "band_count",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "data_type",
                    "description": "pixel data type (ignored for\nvector datasets) (see {{#crossLink \"Constants (GDT)\"}}data\ntypes{{/crossLink}})",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "gdal.GDT_Byte"
                },
                {
                    "name": "creation_options",
                    "description": "An array or object containing\ndriver-specific dataset creation options",
                    "type": "String[]|object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Dataset"
            },
            "class": "gdal.Driver"
        },
        {
            "file": "src/gdal_driver.cpp",
            "line": 228,
            "description": "Asynchronously create a new dataset with this driver.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "createAsync",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "x_size",
                    "description": "raster width in pixels (ignored for vector\ndatasets)",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "y_size",
                    "description": "raster height in pixels (ignored for vector\ndatasets)",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "band_count",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "data_type",
                    "description": "pixel data type (ignored for\nvector datasets) (see {{#crossLink \"Constants (GDT)\"}}data\ntypes{{/crossLink}})",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "gdal.GDT_Byte"
                },
                {
                    "name": "creation_options",
                    "description": "An array or object containing\ndriver-specific dataset creation options",
                    "type": "String[]|object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Dataset>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Dataset>"
            },
            "class": "gdal.Driver"
        },
        {
            "file": "src/gdal_driver.cpp",
            "line": 306,
            "description": "Create a copy of a dataset.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "createCopy",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "src",
                    "description": "",
                    "type": "gdal.Dataset"
                },
                {
                    "name": "strict",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "options",
                    "description": "An array or object containing\ndriver-specific dataset creation options",
                    "type": "String[]|object",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Dataset"
            },
            "class": "gdal.Driver"
        },
        {
            "file": "src/gdal_driver.cpp",
            "line": 319,
            "description": "Asynchronously create a copy of a dataset.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "createCopyAsync",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "src",
                    "description": "",
                    "type": "gdal.Dataset"
                },
                {
                    "name": "strict",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "options",
                    "description": "An array or object containing\ndriver-specific dataset creation options",
                    "type": "String[]|object",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Dataset>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Dataset>"
            },
            "class": "gdal.Driver"
        },
        {
            "file": "src/gdal_driver.cpp",
            "line": 412,
            "description": "Copy the files of a dataset.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "copyFiles",
            "params": [
                {
                    "name": "name_old",
                    "description": "New name for the dataset.",
                    "type": "String"
                },
                {
                    "name": "name_new",
                    "description": "Old name of the dataset.",
                    "type": "String"
                }
            ],
            "class": "gdal.Driver"
        },
        {
            "file": "src/gdal_driver.cpp",
            "line": 445,
            "description": "Renames the dataset.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "rename",
            "params": [
                {
                    "name": "new_name",
                    "description": "New name for the dataset.",
                    "type": "String"
                },
                {
                    "name": "old_name",
                    "description": "Old name of the dataset.",
                    "type": "String"
                }
            ],
            "class": "gdal.Driver"
        },
        {
            "file": "src/gdal_driver.cpp",
            "line": 478,
            "description": "Returns metadata about the driver.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "getMetadata",
            "params": [
                {
                    "name": "domain",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "gdal.Driver"
        },
        {
            "file": "src/gdal_driver.cpp",
            "line": 512,
            "description": "Opens a dataset.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "open",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "mode",
                    "description": "The mode to use to open the file: `\"r\"` or\n`\"r+\"`",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"r\""
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.Dataset"
            },
            "class": "gdal.Driver"
        },
        {
            "file": "src/gdal_driver.cpp",
            "line": 523,
            "description": "Opens a dataset.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "openAsync",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "mode",
                    "description": "The mode to use to open the file: `\"r\"` or\n`\"r+\"`",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"r\""
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "callback<gdal.Dataset>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<gdal.Dataset>"
            },
            "class": "gdal.Driver"
        },
        {
            "file": "src/gdal_feature.cpp",
            "line": 166,
            "description": "Returns the geometry of the feature.",
            "itemtype": "method",
            "name": "getGeometry",
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.Feature"
        },
        {
            "file": "src/gdal_feature.cpp",
            "line": 190,
            "description": "Returns the definition of a particular field at an index.",
            "itemtype": "method",
            "name": "getFieldDefn",
            "params": [
                {
                    "name": "index",
                    "description": "Field index (0-based)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.FieldDefn"
            },
            "class": "gdal.Feature"
        },
        {
            "file": "src/gdal_feature.cpp",
            "line": 219,
            "description": "Sets the feature's geometry.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "setGeometry",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "gdal.Geometry"
                }
            ],
            "class": "gdal.Feature"
        },
        {
            "file": "src/gdal_feature.cpp",
            "line": 244,
            "description": "Determines if the features are the same.",
            "itemtype": "method",
            "name": "equals",
            "params": [
                {
                    "name": "feature",
                    "description": "",
                    "type": "gdal.Feature"
                }
            ],
            "return": {
                "description": "`true` if the features are the same, `false` if different",
                "type": "Boolean"
            },
            "class": "gdal.Feature"
        },
        {
            "file": "src/gdal_feature.cpp",
            "line": 253,
            "description": "Clones the feature.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "",
                "type": "gdal.Feature"
            },
            "class": "gdal.Feature"
        },
        {
            "file": "src/gdal_feature.cpp",
            "line": 269,
            "description": "Releases the feature from memory.",
            "itemtype": "method",
            "name": "destroy",
            "class": "gdal.Feature"
        },
        {
            "file": "src/gdal_feature.cpp",
            "line": 285,
            "description": "Set one feature from another. Overwrites the contents of this feature\nfrom the geometry and attributes of another.",
            "example": [
                "\n```\nvar feature1 = new gdal.Feature(defn);\nvar feature2 = new gdal.Feature(defn);\nfeature1.setGeometry(new gdal.Point(5, 10));\nfeature1.fields.set([5, 'test', 3.14]);\nfeature2.setFrom(feature1);```"
            ],
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "setFrom",
            "params": [
                {
                    "name": "feature",
                    "description": "",
                    "type": "gdal.Feature"
                },
                {
                    "name": "index_map",
                    "description": "Array mapping each field from the source feature\nto the given index in the destination feature. -1 ignores the source field.\nThe field types must still match otherwise the behavior is undefined.",
                    "type": "Number[]",
                    "optional": true
                },
                {
                    "name": "forgiving",
                    "description": "`true` if the operation should continue\ndespite lacking output fields matching some of the source fields.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "class": "gdal.Feature"
        },
        {
            "file": "src/gdal_feature.cpp",
            "line": 363,
            "readonly": "",
            "itemtype": "attribute",
            "name": "fields",
            "type": "{gdal.FeatureFields}",
            "class": "gdal.Feature"
        },
        {
            "file": "src/gdal_feature.cpp",
            "line": 373,
            "itemtype": "attribute",
            "name": "fid",
            "type": "{number}",
            "class": "gdal.Feature"
        },
        {
            "file": "src/gdal_feature.cpp",
            "line": 387,
            "readonly": "",
            "itemtype": "attribute",
            "name": "defn",
            "type": "{gdal.FeatureDefn}",
            "class": "gdal.Feature"
        },
        {
            "file": "src/gdal_feature_defn.cpp",
            "line": 120,
            "description": "Clones the feature definition.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "",
                "type": "gdal.FeatureDefn"
            },
            "class": "gdal.FeatureDefn"
        },
        {
            "file": "src/gdal_feature_defn.cpp",
            "line": 132,
            "readonly": "",
            "itemtype": "attribute",
            "name": "name",
            "type": "{string}",
            "class": "gdal.FeatureDefn"
        },
        {
            "file": "src/gdal_feature_defn.cpp",
            "line": 143,
            "description": "WKB geometry type ({{#crossLink \"Constants (wkbGeometryType)\"}}see\ntable{{/crossLink}})",
            "itemtype": "attribute",
            "name": "geomType",
            "type": "{number}",
            "class": "gdal.FeatureDefn"
        },
        {
            "file": "src/gdal_feature_defn.cpp",
            "line": 156,
            "itemtype": "attribute",
            "name": "geomIgnored",
            "type": "{boolean}",
            "class": "gdal.FeatureDefn"
        },
        {
            "file": "src/gdal_feature_defn.cpp",
            "line": 166,
            "itemtype": "attribute",
            "name": "styleIgnored",
            "type": "{boolean}",
            "class": "gdal.FeatureDefn"
        },
        {
            "file": "src/gdal_feature_defn.cpp",
            "line": 176,
            "readonly": "",
            "itemtype": "attribute",
            "name": "fields",
            "type": "{gdal.FeatureDefnFields}",
            "class": "gdal.FeatureDefn"
        },
        {
            "file": "src/gdal_field_defn.cpp",
            "line": 122,
            "itemtype": "attribute",
            "name": "name",
            "type": "{string}",
            "class": "gdal.FieldDefn"
        },
        {
            "file": "src/gdal_field_defn.cpp",
            "line": 132,
            "description": "Data type (see {{#crossLink \"Constants (OFT)\"}}OFT constants{{/crossLink}})",
            "itemtype": "attribute",
            "name": "type",
            "type": "{string}",
            "class": "gdal.FieldDefn"
        },
        {
            "file": "src/gdal_field_defn.cpp",
            "line": 144,
            "itemtype": "attribute",
            "name": "ignored",
            "type": "{boolean}",
            "class": "gdal.FieldDefn"
        },
        {
            "file": "src/gdal_field_defn.cpp",
            "line": 154,
            "description": "Field justification (see {{#crossLink \"Constants (OJ)\"}}OJ\nconstants{{/crossLink}})",
            "itemtype": "attribute",
            "name": "justification",
            "type": "{string}",
            "class": "gdal.FieldDefn"
        },
        {
            "file": "src/gdal_field_defn.cpp",
            "line": 176,
            "itemtype": "attribute",
            "name": "width",
            "type": "{number}",
            "class": "gdal.FieldDefn"
        },
        {
            "file": "src/gdal_field_defn.cpp",
            "line": 186,
            "itemtype": "attribute",
            "name": "precision",
            "type": "{number}",
            "class": "gdal.FieldDefn"
        },
        {
            "file": "src/gdal_layer.cpp",
            "line": 183,
            "description": "Flush pending changes to disk.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "flush",
            "class": "gdal.Layer"
        },
        {
            "file": "src/gdal_layer.cpp",
            "line": 191,
            "description": "Determines if the dataset supports the indicated operation.",
            "itemtype": "method",
            "name": "testCapability",
            "params": [
                {
                    "name": "capability",
                    "description": "(see {{#crossLink \"Constants (OLC)\"}}capability\nlist{{/crossLink}})",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.Layer"
        },
        {
            "file": "src/gdal_layer.cpp",
            "line": 201,
            "description": "Fetch the extent of this layer.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "getExtent",
            "params": [
                {
                    "name": "force",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "Bounding envelope",
                "type": "gdal.Envelope"
            },
            "class": "gdal.Layer"
        },
        {
            "file": "src/gdal_layer.cpp",
            "line": 237,
            "description": "This method returns the current spatial filter for this layer.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "getSpatialFilter",
            "return": {
                "description": "",
                "type": "gdal.Geometry"
            },
            "class": "gdal.Layer"
        },
        {
            "file": "src/gdal_layer.cpp",
            "line": 256,
            "description": "This method sets the geometry to be used as a spatial filter when fetching\nfeatures via the `layer.features.next()` method. Only features that\ngeometrically intersect the filter geometry will be returned.\n\nAlernatively you can pass it envelope bounds as individual arguments.",
            "example": [
                "\n```\nlayer.setSpatialFilter(geometry);\nlayer.setSpatialFilter(minX, minY, maxX, maxY);```"
            ],
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "setSpatialFilter",
            "params": [
                {
                    "name": "filter",
                    "description": "",
                    "type": "gdal.Geometry"
                }
            ],
            "class": "gdal.Layer"
        },
        {
            "file": "src/gdal_layer.cpp",
            "line": 306,
            "description": "Sets the attribute query string to be used when fetching features via the\n`layer.features.next()` method. Only features for which the query evaluates\nas `true` will be returned.\n\nThe query string should be in the format of an SQL WHERE clause. For instance\n\"population > 1000000 and population < 5000000\" where `population` is an\nattribute in the layer. The query format is normally a restricted form of\nSQL WHERE clause as described in the \"WHERE\" section of the [OGR SQL\ntutorial](http://www.gdal.org/ogr_sql.html). In some cases (RDBMS backed\ndrivers) the native capabilities of the database may be used to interprete\nthe WHERE clause in which case the capabilities will be broader than those\nof OGR SQL.",
            "example": [
                "\n```\nlayer.setAttributeFilter('population > 1000000 and population < 5000000');```"
            ],
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "setAttributeFilter",
            "params": [
                {
                    "name": "filter",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "gdal.Layer"
        },
        {
            "file": "src/gdal_layer.cpp",
            "line": 371,
            "readonly": "",
            "itemtype": "attribute",
            "name": "ds",
            "type": "{gdal.Dataset}",
            "class": "gdal.Layer"
        },
        {
            "file": "src/gdal_layer.cpp",
            "line": 381,
            "readonly": "",
            "itemtype": "attribute",
            "name": "srs",
            "type": "{gdal.SpatialReference}",
            "class": "gdal.Layer"
        },
        {
            "file": "src/gdal_layer.cpp",
            "line": 396,
            "readonly": "",
            "itemtype": "attribute",
            "name": "name",
            "type": "{string}",
            "class": "gdal.Layer"
        },
        {
            "file": "src/gdal_layer.cpp",
            "line": 411,
            "readonly": "",
            "itemtype": "attribute",
            "name": "geomColumn",
            "type": "{string}",
            "class": "gdal.Layer"
        },
        {
            "file": "src/gdal_layer.cpp",
            "line": 426,
            "readonly": "",
            "itemtype": "attribute",
            "name": "fidColumn",
            "type": "{string}",
            "class": "gdal.Layer"
        },
        {
            "file": "src/gdal_layer.cpp",
            "line": 441,
            "readonly": "",
            "itemtype": "attribute",
            "name": "geomType",
            "type": "{number} (see {{#crossLink \"Constants (wkb)\"}}geometry\ntypes{{/crossLink}})",
            "class": "gdal.Layer"
        },
        {
            "file": "src/gdal_layer.cpp",
            "line": 457,
            "readonly": "",
            "itemtype": "attribute",
            "name": "features",
            "type": "{gdal.LayerFeatures}",
            "class": "gdal.Layer"
        },
        {
            "file": "src/gdal_layer.cpp",
            "line": 467,
            "readonly": "",
            "itemtype": "attribute",
            "name": "fields",
            "type": "{gdal.LayerFields}",
            "class": "gdal.Layer"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 168,
            "description": "Saves changes to disk.",
            "itemtype": "method",
            "name": "flush",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 175,
            "description": "Return the status flags of the mask band associated with the band.\n\nThe result will be a bitwise OR-ed set of status flags with the following\navailable definitions that may be extended in the future:\n\n  - `GMF_ALL_VALID` (`0x01`): There are no invalid pixels, all mask values\nwill be 255. When used this will normally be the only flag set.\n  - `GMF_PER_DATASET` (`0x02`): The mask band is shared between all bands on\nthe dataset.\n  - `GMF_ALPHA` (`0x04`): The mask band is actually an alpha band and may\nhave values other than 0 and 255.\n  - `GMF_NODATA` (`0x08`): Indicates the mask is actually being generated\nfrom nodata values. (mutually exclusive of `GMF_ALPHA`)",
            "itemtype": "method",
            "name": "getMaskFlags",
            "return": {
                "description": "Mask flags",
                "type": "Number"
            },
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 197,
            "description": "Adds a mask band to the current band.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "createMaskBand",
            "params": [
                {
                    "name": "flags",
                    "description": "Mask flags",
                    "type": "Number"
                }
            ],
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 208,
            "description": "Return the mask band associated with the band.",
            "itemtype": "method",
            "name": "getMaskBand",
            "return": {
                "description": "",
                "type": "gdal.RasterBand"
            },
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 235,
            "description": "Fill this band with a constant value.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "fill",
            "params": [
                {
                    "name": "real_value",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "imaginary_value",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 283,
            "description": "Fetch image statistics.\n\nReturns the minimum, maximum, mean and standard deviation of all pixel values\nin this band. If approximate statistics are sufficient, the\n`allow_approximation` argument can be set to `true` in which case overviews,\nor a subset of image tiles may be used in computing the statistics.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "getStatistics",
            "params": [
                {
                    "name": "allow_approximation",
                    "description": "If `true` statistics may be computed\nbased on overviews or a subset of all tiles.",
                    "type": "Boolean"
                },
                {
                    "name": "force",
                    "description": "If `false` statistics will only be returned if it can\nbe done without rescanning the image.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Statistics containing `\"min\"`, `\"max\"`, `\"mean\"`,\n`\"std_dev\"` properties.",
                "type": "Object"
            },
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 338,
            "description": "Computes image statistics.\n\nReturns the minimum, maximum, mean and standard deviation of all pixel values\nin this band. If approximate statistics are sufficient, the\n`allow_approximation` argument can be set to `true` in which case overviews,\nor a subset of image tiles may be used in computing the statistics.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "computeStatistics",
            "params": [
                {
                    "name": "allow_approximation",
                    "description": "If `true` statistics may be computed\nbased on overviews or a subset of all tiles.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Statistics containing `\"min\"`, `\"max\"`, `\"mean\"`,\n`\"std_dev\"` properties.",
                "type": "Object"
            },
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 386,
            "description": "Set statistics on the band. This method can be used to store\nmin/max/mean/standard deviation statistics.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "setStatistics",
            "params": [
                {
                    "name": "min",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "mean",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "std_dev",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 423,
            "description": "Returns band metadata",
            "itemtype": "method",
            "name": "getMetadata",
            "params": [
                {
                    "name": "domain",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 447,
            "readonly": "",
            "itemtype": "attribute",
            "name": "ds",
            "type": "{gdal.Dataset}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 457,
            "readonly": "",
            "itemtype": "attribute",
            "name": "overviews",
            "type": "{gdal.RasterBandOverviews}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 467,
            "readonly": "",
            "itemtype": "attribute",
            "name": "pixels",
            "type": "{gdal.RasterBandPixels}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 477,
            "readonly": "",
            "itemtype": "attribute",
            "name": "id",
            "type": "{number|null}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 503,
            "description": "Name of of band.",
            "readonly": "",
            "itemtype": "attribute",
            "name": "description",
            "type": "{string}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 525,
            "description": "Size object containing `\"x\"` and `\"y\"` properties.",
            "readonly": "",
            "itemtype": "attribute",
            "name": "size",
            "type": "{object}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 550,
            "description": "Size object containing `\"x\"` and `\"y\"` properties.",
            "readonly": "",
            "itemtype": "attribute",
            "name": "blockSize",
            "type": "{object}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 576,
            "description": "Minimum value for this band.",
            "readonly": "",
            "itemtype": "attribute",
            "name": "minimum",
            "type": "{number}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 598,
            "description": "Maximum value for this band.",
            "readonly": "",
            "itemtype": "attribute",
            "name": "maximum",
            "type": "{number}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 620,
            "description": "Raster value offset.",
            "itemtype": "attribute",
            "name": "offset",
            "type": "{number}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 641,
            "description": "Raster value scale.",
            "itemtype": "attribute",
            "name": "scale",
            "type": "{number}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 662,
            "description": "No data value for this band.",
            "itemtype": "attribute",
            "name": "noDataValue",
            "type": "{number|null}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 690,
            "description": "Raster unit type (name for the units of this raster's values).\nFor instance, it might be `\"m\"` for an elevation model in meters,\nor `\"ft\"` for feet. If no units are available, a value of `\"\"`\nwill be returned.",
            "itemtype": "attribute",
            "name": "unitType",
            "type": "{string}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 713,
            "description": "Pixel data type ({{#crossLink \"Constants (GDT)\"}}see GDT\nconstants{{/crossLink}}) used for this band.",
            "readonly": "",
            "itemtype": "attribute",
            "name": "dataType",
            "type": "{string|undefined}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 737,
            "description": "Indicates if the band is read-only.",
            "readonly": "",
            "itemtype": "attribute",
            "name": "readOnly",
            "type": "{boolean}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 758,
            "description": "An indicator if the underlying datastore can compute arbitrary overviews\nefficiently, such as is the case with OGDI over a network. Datastores with\narbitrary overviews don't generally have any fixed overviews, but GDAL's\n`RasterIO()` method can be used in downsampling mode to get overview\ndata efficiently.",
            "readonly": "",
            "itemtype": "attribute",
            "name": "hasArbitraryOverviews",
            "type": "{boolean}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 783,
            "description": "List of list of category names for this raster.",
            "itemtype": "attribute",
            "name": "categoryNames",
            "type": "{string[]}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_rasterband.cpp",
            "line": 814,
            "description": "Color interpretation mode ({{#crossLink \"Constants (GCI)\"}}see GCI\nconstants{{/crossLink}}).",
            "itemtype": "attribute",
            "name": "colorInterpretation",
            "type": "{string}",
            "class": "gdal.RasterBand"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 175,
            "description": "Set a GeogCS based on well known name.",
            "itemtype": "method",
            "name": "setWellKnownGeogCS",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 184,
            "description": "Convert in place to ESRI WKT format.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "morphToESRI",
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 192,
            "description": "Convert in place from ESRI WKT format.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "morphFromESRI",
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 200,
            "description": "This method returns `true` if EPSG feels this geographic coordinate system\nshould be treated as having lat/long coordinate ordering.\n\nCurrently this returns `true` for all geographic coordinate systems with an\nEPSG code set, and AXIS values set defining it as lat, long. Note that\ncoordinate systems with an EPSG code and no axis settings will be assumed\nto not be lat/long.\n\n`false` will be returned for all coordinate systems that are not geographic,\nor that do not have an EPSG code set.",
            "itemtype": "method",
            "name": "EPSGTreatsAsLatLong",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 217,
            "description": "This method returns `true` if EPSG feels this projected coordinate system\nshould be treated as having northing/easting coordinate ordering.",
            "itemtype": "method",
            "name": "EPSGTreatsAsNorthingEasting",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 226,
            "description": "Check if geocentric coordinate system.",
            "itemtype": "method",
            "name": "isGeocentric",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 234,
            "description": "Check if geographic coordinate system.",
            "itemtype": "method",
            "name": "isGeographic",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 242,
            "description": "Check if projected coordinate system.",
            "itemtype": "method",
            "name": "isProjected",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 250,
            "description": "Check if local coordinate system.",
            "itemtype": "method",
            "name": "isLocal",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 258,
            "description": "Check if vertical coordinate system.",
            "itemtype": "method",
            "name": "isVertical",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 266,
            "description": "Check if compound coordinate system.",
            "itemtype": "method",
            "name": "isCompound",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 274,
            "description": "Do the GeogCS'es match?",
            "itemtype": "method",
            "name": "isSameGeogCS",
            "params": [
                {
                    "name": "srs",
                    "description": "",
                    "type": "gdal.SpatialReference"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 284,
            "description": "Do the VertCS'es match?",
            "itemtype": "method",
            "name": "isSameVertCS",
            "params": [
                {
                    "name": "srs",
                    "description": "",
                    "type": "gdal.SpatialReference"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 294,
            "description": "Do these two spatial references describe the same system?",
            "itemtype": "method",
            "name": "isSame",
            "params": [
                {
                    "name": "srs",
                    "description": "",
                    "type": "gdal.SpatialReference"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 303,
            "description": "Set EPSG authority info if possible.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "autoIdentifyEPSG",
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 311,
            "description": "Clones the spatial reference.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "",
                "type": "gdal.SpatialReference"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 323,
            "description": "Make a duplicate of the GEOGCS node of this OGRSpatialReference object.",
            "itemtype": "method",
            "name": "cloneGeogCS",
            "return": {
                "description": "",
                "type": "gdal.SpatialReference"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 335,
            "description": "Get the authority name for a node. The most common authority is \"EPSG\".",
            "itemtype": "method",
            "name": "getAuthorityName",
            "params": [
                {
                    "name": "target_key",
                    "description": "The partial or complete path to the node to get an\nauthority from. ie. `\"PROJCS\"`, `\"GEOGCS\"`, \"`GEOGCS|UNIT\"` or `null` to\nsearch for an authority node on the root element.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 355,
            "description": "Get the authority code for a node.",
            "itemtype": "method",
            "name": "getAuthorityCode",
            "params": [
                {
                    "name": "target_key",
                    "description": "The partial or complete path to the node to get an\nauthority from. ie. `\"PROJCS\"`, `\"GEOGCS\"`, \"`GEOGCS|UNIT\"` or `null` to\nsearch for an authority node on the root element.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 375,
            "description": "Convert this SRS into WKT format.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "toWKT",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 400,
            "description": "Convert this SRS into a a nicely formatted WKT string for display to a\nperson.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "toPrettyWKT",
            "params": [
                {
                    "name": "simplify",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 430,
            "description": "Export coordinate system in PROJ.4 format.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "toProj4",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 460,
            "description": "Export coordinate system in XML format.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "toXML",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 485,
            "description": "Fetch indicated attribute of named node.",
            "itemtype": "method",
            "name": "getAttrValue",
            "params": [
                {
                    "name": "node_name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "attr_index",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 504,
            "description": "Creates a spatial reference from a WKT string.",
            "static": 1,
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "fromWKT",
            "params": [
                {
                    "name": "wkt",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.SpatialReference"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 530,
            "description": "Creates a spatial reference from a Proj.4 string.",
            "static": 1,
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "fromProj4",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.SpatialReference"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 555,
            "description": "Creates a spatial reference from a WMSAUTO string.\n\nNote that the WMS 1.3 specification does not include the units code, while\napparently earlier specs do. GDAL tries to guess around this.",
            "example": [
                "\n```\nvar wms = 'AUTO:42001,99,8888';\nvar ref = gdal.SpatialReference.fromWMSAUTO(wms);```"
            ],
            "static": 1,
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "fromWMSAUTO",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.SpatialReference"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 588,
            "description": "Import coordinate system from XML format (GML only currently).",
            "static": 1,
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "fromXML",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.SpatialReference"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 613,
            "description": "Initialize from OGC URN.\n\nThe OGC URN should be prefixed with \"urn:ogc:def:crs:\" per recommendation\npaper 06-023r1. Currently EPSG and OGC authority values are supported,\nincluding OGC auto codes, but not including CRS1 or CRS88 (NAVD88).",
            "static": 1,
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "fromURN",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.SpatialReference"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 642,
            "description": "Initialize from OGC URL.\n\nThe OGC URL should be prefixed with \"http://opengis.net/def/crs\" per best\npractice paper 11-135. Currently EPSG and OGC authority values are supported,\nincluding OGC auto codes, but not including CRS1 or CRS88 (NAVD88).",
            "static": 1,
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "fromCRSURL",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.SpatialReference"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 671,
            "description": "Initialize spatial reference from a URL.\n\nThis method will download the spatial reference from the given URL.",
            "static": 1,
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "fromURL",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.SpatialReference"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 698,
            "description": "Initialize from a Mapinfo style CoordSys definition.",
            "static": 1,
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "fromMICoordSys",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.SpatialReference"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 723,
            "description": "Initialize from an arbitrary spatial reference string.\n\nThis method will examine the provided input, and try to deduce the format,\nand then use it to initialize the spatial reference system.",
            "static": 1,
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "fromUserInput",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.SpatialReference"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 751,
            "description": "Initialize from EPSG GCS or PCS code.",
            "example": [
                "\n```\nvar ref = gdal.SpatialReference.fromEPSGA(4326);```"
            ],
            "static": 1,
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "fromEPSG",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.SpatialReference"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 780,
            "description": "Initialize from EPSG GCS or PCS code.\n\nThis method is similar to `fromEPSG()` except that EPSG preferred axis\nordering *will* be applied for geographic and projected coordinate systems.\nEPSG normally defines geographic coordinate systems to use lat/long, and also\nthere are also a few projected coordinate systems that use northing/easting\norder contrary to typical GIS use).",
            "example": [
                "\n```\nvar ref = gdal.SpatialReference.fromEPSGA(26910);```"
            ],
            "static": 1,
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "fromEPSGA",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.SpatialReference"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 815,
            "description": "Import coordinate system from ESRI .prj format(s).\n\nThis function will read the text loaded from an ESRI .prj file, and translate\nit into an OGRSpatialReference definition. This should support many (but by\nno means all) old style (Arc/Info 7.x) .prj files, as well as the newer\npseudo-OGC WKT .prj files. Note that new style .prj files are in OGC WKT\nformat, but require some manipulation to correct datum names, and units on\nsome projection parameters. This is addressed within importFromESRI() by an\nautomatical call to morphFromESRI().\n\nCurrently only GEOGRAPHIC, UTM, STATEPLANE, GREATBRITIAN_GRID, ALBERS,\nEQUIDISTANT_CONIC, TRANSVERSE (mercator), POLAR, MERCATOR and POLYCONIC\nprojections are supported from old style files.",
            "static": 1,
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "fromESRI",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "String[]"
                }
            ],
            "return": {
                "description": "",
                "type": "gdal.SpatialReference"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 860,
            "description": "Fetch linear geographic coordinate system units.",
            "itemtype": "method",
            "name": "getLinearUnits",
            "return": {
                "description": "An object containing `value` and `unit` properties.",
                "type": "Object"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 881,
            "description": "Fetch angular geographic coordinate system units.",
            "itemtype": "method",
            "name": "getAngularUnits",
            "return": {
                "description": "An object containing `value` and `unit` properties.",
                "type": "Object"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_spatial_reference.cpp",
            "line": 902,
            "description": "Validate SRS tokens.\n\nThis method attempts to verify that the spatial reference system is well\nformed, and consists of known tokens. The validation is not comprehensive.",
            "itemtype": "method",
            "name": "validate",
            "return": {
                "description": "`\"corrupt\"`, '\"unsupported\"', `null` (if fine)",
                "type": "String|null"
            },
            "class": "gdal.SpatialReference"
        },
        {
            "file": "src/gdal_warper.cpp",
            "line": 14,
            "description": "GDALReprojectImage() method with a ChunkAndWarpImage replaced with\nChunkAndWarpMulti",
            "class": "gdal"
        },
        {
            "file": "src/gdal_warper.cpp",
            "line": 165,
            "interface": "_reprojectOptions { src: gdal.Dataset, dst: gdal.Dataset, s_srs: gdal.SpatialReference, t_srs: gdal.SpatialReference, resampling?: string, cutline?: gdal.Geometry, srcBands?: number[], dstBands?: number[], srcNodata?: number, dstNodata?: number, memoryLimit?: number, maxError?: number, multi?: boolean, options?: object }",
            "class": "gdal"
        },
        {
            "file": "src/gdal_warper.cpp",
            "line": 169,
            "description": "Reprojects a dataset.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "reprojectImage",
            "static": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "_reprojectOptions",
                    "props": [
                        {
                            "name": "src",
                            "description": "",
                            "type": "gdal.Dataset"
                        },
                        {
                            "name": "dst",
                            "description": "",
                            "type": "gdal.Dataset"
                        },
                        {
                            "name": "s_srs",
                            "description": "",
                            "type": "gdal.SpatialReference"
                        },
                        {
                            "name": "t_srs",
                            "description": "",
                            "type": "gdal.SpatialReference"
                        },
                        {
                            "name": "resampling",
                            "description": "Resampling algorithm ({{#crossLink\n\"Constants (GRA)\"}}available options{{/crossLink}})",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "cutline",
                            "description": "Must be in src dataset pixel\ncoordinates. Use CoordinateTransformation to convert between georeferenced\ncoordinates and pixel coordinates",
                            "type": "gdal.Geometry",
                            "optional": true
                        },
                        {
                            "name": "srcBands",
                            "description": "",
                            "type": "Number[]",
                            "optional": true
                        },
                        {
                            "name": "dstBands",
                            "description": "",
                            "type": "Number[]",
                            "optional": true
                        },
                        {
                            "name": "srcAlphaBand",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "dstAlphaBand",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "srcNodata",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "dstNodata",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "memoryLimit",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "maxError",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "multi",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "[options.options] Warp options (see:\n[reference]",
                    "description": "(http://www.gdal.org/structGDALWarpOptions.html#a0ed77f9917bb96c7a9aabd73d4d06e08))",
                    "type": "String[]|object"
                }
            ],
            "class": "gdal"
        },
        {
            "file": "src/gdal_warper.cpp",
            "line": 199,
            "description": "Reprojects a dataset.\n{{{async}}}",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "reprojectImageAsync",
            "static": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "_reprojectOptions",
                    "props": [
                        {
                            "name": "src",
                            "description": "",
                            "type": "gdal.Dataset"
                        },
                        {
                            "name": "dst",
                            "description": "",
                            "type": "gdal.Dataset"
                        },
                        {
                            "name": "s_srs",
                            "description": "",
                            "type": "gdal.SpatialReference"
                        },
                        {
                            "name": "t_srs",
                            "description": "",
                            "type": "gdal.SpatialReference"
                        },
                        {
                            "name": "resampling",
                            "description": "Resampling algorithm ({{#crossLink\n\"Constants (GRA)\"}}available options{{/crossLink}})",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "cutline",
                            "description": "Must be in src dataset pixel\ncoordinates. Use CoordinateTransformation to convert between georeferenced\ncoordinates and pixel coordinates",
                            "type": "gdal.Geometry",
                            "optional": true
                        },
                        {
                            "name": "srcBands",
                            "description": "",
                            "type": "Number[]",
                            "optional": true
                        },
                        {
                            "name": "dstBands",
                            "description": "",
                            "type": "Number[]",
                            "optional": true
                        },
                        {
                            "name": "srcAlphaBand",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "dstAlphaBand",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "srcNodata",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "dstNodata",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "memoryLimit",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "maxError",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "multi",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "[options.options] Warp options (see:\n[reference]",
                    "description": "(http://www.gdal.org/structGDALWarpOptions.html#a0ed77f9917bb96c7a9aabd73d4d06e08))",
                    "type": "String[]|object"
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<void>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<void>"
            },
            "class": "gdal"
        },
        {
            "file": "src/gdal_warper.cpp",
            "line": 323,
            "interface": "_warpOptions { src: gdal.Dataset, s_srs: gdal.SpatialReference, t_srs: gdal.SpatialReference, maxError?: number }",
            "class": "gdal"
        },
        {
            "file": "src/gdal_warper.cpp",
            "line": 327,
            "description": "Used to determine the bounds and resolution of the output virtual file which\nshould be large enough to include all the input image.",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "suggestedWarpOutput",
            "static": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Warp options",
                    "type": "_warpOptions",
                    "props": [
                        {
                            "name": "src",
                            "description": "",
                            "type": "gdal.Dataset"
                        },
                        {
                            "name": "s_srs",
                            "description": "",
                            "type": "gdal.SpatialReference"
                        },
                        {
                            "name": "t_srs",
                            "description": "",
                            "type": "gdal.SpatialReference"
                        },
                        {
                            "name": "maxError",
                            "description": "",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        }
                    ]
                }
            ],
            "return": {
                "description": "An object containing `\"rasterSize\"` and `\"geoTransform\"`\nproperties.",
                "type": "Object"
            },
            "class": "gdal"
        },
        {
            "file": "src/gdal_warper.cpp",
            "line": 344,
            "description": "Used to determine the bounds and resolution of the output virtual file which\nshould be large enough to include all the input image.\n{{{async}}}",
            "throws": {
                "description": "Error"
            },
            "itemtype": "method",
            "name": "suggestedWarpOutputAsync",
            "static": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Warp options",
                    "type": "_warpOptions",
                    "props": [
                        {
                            "name": "src",
                            "description": "",
                            "type": "gdal.Dataset"
                        },
                        {
                            "name": "s_srs",
                            "description": "",
                            "type": "gdal.SpatialReference"
                        },
                        {
                            "name": "t_srs",
                            "description": "",
                            "type": "gdal.SpatialReference"
                        },
                        {
                            "name": "maxError",
                            "description": "",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "{{{cb}}}",
                    "type": "Callback<object>",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<object>"
            },
            "class": "gdal"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 113,
            "itemtype": "attribute",
            "name": "lastError",
            "type": "{object}",
            "class": "gdal"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 220,
            "description": "Set paths where proj will search it data.",
            "static": 1,
            "itemtype": "method",
            "name": "setPROJSearchPaths",
            "params": [
                {
                    "name": "Path",
                    "description": "`c:\\ProjData`",
                    "type": "String"
                }
            ],
            "class": "gdal"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 321,
            "description": "The collection of all drivers registered with GDAL",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.drivers",
            "type": "{gdal.GDALDrivers}",
            "class": "gdal"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 340,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.DMD_LONGNAME",
            "type": "{string}",
            "class": "Constants (DMD)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 346,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.DMD_MIMETYPE",
            "type": "{string}",
            "class": "Constants (DMD)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 352,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.DMD_HELPTOPIC",
            "type": "{string}",
            "class": "Constants (DMD)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 358,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.DMD_EXTENSION",
            "type": "{string}",
            "class": "Constants (DMD)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 364,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.DMD_CREATIONOPTIONLIST",
            "type": "{string}",
            "class": "Constants (DMD)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 373,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.DMD_CREATIONDATATYPES",
            "type": "{string}",
            "class": "Constants (DMD)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 385,
            "description": "Error level: (no error)",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.CE_None",
            "type": "{number}",
            "class": "Constants (CPL Error Levels)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 393,
            "description": "Error level: Debug",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.CE_Debug",
            "type": "{number}",
            "class": "Constants (CPL Error Levels)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 401,
            "description": "Error level: Warning",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.CE_Warning",
            "type": "{number}",
            "class": "Constants (CPL Error Levels)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 409,
            "description": "Error level: Failure",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.CE_Failure",
            "type": "{number}",
            "class": "Constants (CPL Error Levels)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 417,
            "description": "Error level: Fatal",
            "itemtype": "property",
            "name": "gdal.CE_Fatal",
            "type": "{number}",
            "class": "Constants (CPL Error Levels)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 429,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.CPLE_None",
            "type": "{number}",
            "class": "Constants (CPL Error Codes)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 435,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.CPLE_AppDefined",
            "type": "{number}",
            "class": "Constants (CPL Error Codes)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 441,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.CPLE_OutOfMemory",
            "type": "{number}",
            "class": "Constants (CPL Error Codes)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 447,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.CPLE_FileIO",
            "type": "{number}",
            "class": "Constants (CPL Error Codes)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 453,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.CPLE_OpenFailed",
            "type": "{number}",
            "class": "Constants (CPL Error Codes)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 459,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.CPLE_IllegalArg",
            "type": "{number}",
            "class": "Constants (CPL Error Codes)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 465,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.CPLE_NotSupported",
            "type": "{number}",
            "class": "Constants (CPL Error Codes)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 471,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.CPLE_AssertionFailed",
            "type": "{number}",
            "class": "Constants (CPL Error Codes)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 477,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.CPLE_NoWriteAccess",
            "type": "{number}",
            "class": "Constants (CPL Error Codes)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 483,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.CPLE_UserInterrupt",
            "type": "{number}",
            "class": "Constants (CPL Error Codes)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 489,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.CPLE_objectNull",
            "type": "{number}",
            "class": "Constants (CPL Error Codes)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 500,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.DCAP_CREATE",
            "type": "{string}",
            "class": "Constants (DCAP)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 506,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.DCAP_CREATECOPY",
            "type": "{string}",
            "class": "Constants (DCAP)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 512,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.DCAP_VIRTUALIO",
            "type": "{string}",
            "class": "Constants (DCAP)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 523,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OLCRandomRead",
            "type": "{string}",
            "class": "Constants (OLC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 529,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OLCSequentialWrite",
            "type": "{string}",
            "class": "Constants (OLC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 535,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OLCRandomWrite",
            "type": "{string}",
            "class": "Constants (OLC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 541,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OLCFastSpatialFilter",
            "type": "{string}",
            "class": "Constants (OLC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 547,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OLCFastFeatureCount",
            "type": "{string}",
            "class": "Constants (OLC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 553,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OLCFastGetExtent",
            "type": "{string}",
            "class": "Constants (OLC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 559,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OLCCreateField",
            "type": "{string}",
            "class": "Constants (OLC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 565,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OLCDeleteField",
            "type": "{string}",
            "class": "Constants (OLC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 571,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OLCReorderFields",
            "type": "{string}",
            "class": "Constants (OLC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 577,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OLCAlterFieldDefn",
            "type": "{string}",
            "class": "Constants (OLC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 583,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OLCTransactions",
            "type": "{string}",
            "class": "Constants (OLC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 589,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OLCDeleteFeature",
            "type": "{string}",
            "class": "Constants (OLC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 595,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OLCFastSetNextByIndex",
            "type": "{string}",
            "class": "Constants (OLC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 602,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OLCStringsAsUTF8",
            "type": "{string}",
            "class": "Constants (OLC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 608,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OLCIgnoreFields",
            "type": "{string}",
            "class": "Constants (OLC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 616,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OLCCreateGeomField",
            "type": "{string}",
            "class": "Constants (OLC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 629,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.ODsCCreateLayer",
            "type": "{string}",
            "class": "Constants (ODsC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 635,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.ODsCDeleteLayer",
            "type": "{string}",
            "class": "Constants (ODsC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 641,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.ODsCCreateGeomFieldAfterCreateLayer",
            "type": "{string}",
            "class": "Constants (ODsC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 651,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.ODrCCreateDataSource",
            "type": "{string}",
            "class": "Constants (ODsC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 657,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.ODrCDeleteDataSource",
            "type": "{string}",
            "class": "Constants (ODsC)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 675,
            "description": "Unknown or unspecified type",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GDT_Unknown",
            "type": "{string}",
            "class": "Constants (GDT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 682,
            "description": "Eight bit unsigned integer",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GDT_Byte",
            "type": "{string}",
            "class": "Constants (GDT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 689,
            "description": "Sixteen bit unsigned integer",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GDT_UInt16",
            "type": "{string}",
            "class": "Constants (GDT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 696,
            "description": "Sixteen bit signed integer",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GDT_Int16",
            "type": "{string}",
            "class": "Constants (GDT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 703,
            "description": "Thirty two bit unsigned integer",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GDT_UInt32",
            "type": "{string}",
            "class": "Constants (GDT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 710,
            "description": "Thirty two bit signed integer",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GDT_Int32",
            "type": "{string}",
            "class": "Constants (GDT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 717,
            "description": "Thirty two bit floating point",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GDT_Float32",
            "type": "{string}",
            "class": "Constants (GDT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 725,
            "description": "Sixty four bit floating point",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GDT_Float64",
            "type": "{string}",
            "class": "Constants (GDT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 733,
            "description": "Complex Int16",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GDT_CInt16",
            "type": "{string}",
            "class": "Constants (GDT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 740,
            "description": "Complex Int32",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GDT_CInt32",
            "type": "{string}",
            "class": "Constants (GDT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 747,
            "description": "Complex Float32",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GDT_CFloat32",
            "type": "{string}",
            "class": "Constants (GDT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 755,
            "description": "Complex Float64",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GDT_CFloat64",
            "type": "{string}",
            "class": "Constants (GDT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 768,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OJUndefined",
            "type": "{string}",
            "class": "Constants (OJ)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 774,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OJLeft",
            "type": "{string}",
            "class": "Constants (OJ)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 780,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OJRight",
            "type": "{string}",
            "class": "Constants (OJ)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 791,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GCI_Undefined",
            "type": "{string}",
            "class": "Constants (GCI)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 797,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GCI_GrayIndex",
            "type": "{string}",
            "class": "Constants (GCI)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 806,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GCI_PaletteIndex",
            "type": "{string}",
            "class": "Constants (GCI)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 815,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GCI_RedBand",
            "type": "{string}",
            "class": "Constants (GCI)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 824,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GCI_GreenBand",
            "type": "{string}",
            "class": "Constants (GCI)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 833,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GCI_BlueBand",
            "type": "{string}",
            "class": "Constants (GCI)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 842,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GCI_AlphaBand",
            "type": "{string}",
            "class": "Constants (GCI)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 851,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GCI_HueBand",
            "type": "{string}",
            "class": "Constants (GCI)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 860,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GCI_SaturationBand",
            "type": "{string}",
            "class": "Constants (GCI)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 869,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GCI_LightnessBand",
            "type": "{string}",
            "class": "Constants (GCI)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 878,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GCI_CyanBand",
            "type": "{string}",
            "class": "Constants (GCI)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 887,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GCI_MagentaBand",
            "type": "{string}",
            "class": "Constants (GCI)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 896,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GCI_YellowBand",
            "type": "{string}",
            "class": "Constants (GCI)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 905,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GCI_BlackBand",
            "type": "{string}",
            "class": "Constants (GCI)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 914,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GCI_YCbCr_YBand",
            "type": "{string}",
            "class": "Constants (GCI)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 923,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GCI_YCbCr_CbBand",
            "type": "{string}",
            "class": "Constants (GCI)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 932,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GCI_YCbCr_CrBand",
            "type": "{string}",
            "class": "Constants (GCI)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 946,
            "description": "Old-style 99-402 extended dimension (Z) WKB types.\nSynonymous with 'wkbVariantOldOgc' (gdal >= 2.0)",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbVariantOgc",
            "type": "{string}",
            "class": "Constants (wkbVariant)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 956,
            "description": "Old-style 99-402 extended dimension (Z) WKB types.\nSynonymous with 'wkbVariantOgc' (gdal < 2.0)",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbVariantOldOgc",
            "type": "{string}",
            "class": "Constants (wkbVariant)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 966,
            "description": "SFSQL 1.2 and ISO SQL/MM Part 3 extended dimension (Z&M) WKB types.",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbVariantIso",
            "type": "{string}",
            "class": "Constants (wkbVariant)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 979,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbXDR",
            "type": "{string}",
            "class": "Constants (wkbByteOrder)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 985,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbNDR",
            "type": "{string}",
            "class": "Constants (wkbByteOrder)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 996,
            "final": "The `wkb25DBit` constant can be used to convert between 2D types to 2.5D\ntypes",
            "example": [
                "\n```\n// 2 -> 2.5D\nwkbPoint25D = gdal.wkbPoint | gdal.wkb25DBit\n\n// 2.5D -> 2D (same as wkbFlatten())\nwkbPoint = gdal.wkbPoint25D & (~gdal.wkb25DBit)```"
            ],
            "itemtype": "property",
            "name": "gdal.wkb25DBit",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1017,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbUnknown",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1023,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbPoint",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1029,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbLineString",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1036,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbCircularString",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1042,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbCompoundCurve",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1048,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbMultiCurve",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1055,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbPolygon",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1061,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbMultiPoint",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1067,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbMultiLinestring",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1073,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbMultiPolygon",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1079,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbGeometryCollection",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1085,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbNone",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1091,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbLinearRing",
            "type": "{string}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1097,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbPoint25D",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1103,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbLineString25D",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1109,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbPolygon25D",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1115,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbMultiPoint25D",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1121,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbMultiLineString25D",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1127,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbMultiPolygon25D",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1133,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbGeometryCollection25D",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1139,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.wkbLinearRing25D",
            "type": "{number}",
            "class": "Constants (wkbGeometryType)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1150,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OFTInteger",
            "type": "{string}",
            "class": "Constants (OFT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1156,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OFTIntegerList",
            "type": "{string}",
            "class": "Constants (OFT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1165,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OFTInteger64",
            "type": "{string}",
            "class": "Constants (OFT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1172,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OFTInteger64List",
            "type": "{string}",
            "class": "Constants (OFT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1182,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OFTReal",
            "type": "{string}",
            "class": "Constants (OFT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1188,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OFTRealList",
            "type": "{string}",
            "class": "Constants (OFT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1194,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OFTString",
            "type": "{string}",
            "class": "Constants (OFT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1200,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OFTStringList",
            "type": "{string}",
            "class": "Constants (OFT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1207,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OFTWideString",
            "type": "{string}",
            "class": "Constants (OFT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1214,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OFTWideStringList",
            "type": "{string}",
            "class": "Constants (OFT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1223,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OFTBinary",
            "type": "{string}",
            "class": "Constants (OFT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1229,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OFTDate",
            "type": "{string}",
            "class": "Constants (OFT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1235,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OFTTime",
            "type": "{string}",
            "class": "Constants (OFT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1241,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.OFTDateTime",
            "type": "{string}",
            "class": "Constants (OFT)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1254,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GRA_NearestNeighbor",
            "type": "{string}",
            "class": "Constants (GRA)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1260,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GRA_Bilinear",
            "type": "{string}",
            "class": "Constants (GRA)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1266,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GRA_Cubic",
            "type": "{string}",
            "class": "Constants (GRA)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1272,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GRA_CubicSpline",
            "type": "{string}",
            "class": "Constants (GRA)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1278,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GRA_Lanczos",
            "type": "{string}",
            "class": "Constants (GRA)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1284,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GRA_Average",
            "type": "{string}",
            "class": "Constants (GRA)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1290,
            "final": 1,
            "itemtype": "property",
            "name": "gdal.GRA_Mode",
            "type": "{string}",
            "class": "Constants (GRA)"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1297,
            "description": "GDAL version (not the binding version)",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.version",
            "type": "{string}",
            "class": "gdal"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1307,
            "description": "GDAL library - system library (false) or bundled (true)",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.bundled",
            "type": "{boolean}",
            "class": "gdal"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1321,
            "description": "Details about the last error that occurred. The property\nwill be null or an object containing three properties: \"number\",\n\"message\", and \"type\".",
            "final": 1,
            "itemtype": "property",
            "name": "gdal.lastError",
            "type": "{object}",
            "class": "gdal"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1339,
            "description": "Disables all output.",
            "static": 1,
            "itemtype": "method",
            "name": "quiet",
            "class": "gdal"
        },
        {
            "file": "src/node_gdal.cpp",
            "line": 1348,
            "description": "Displays extra debugging information from GDAL.",
            "static": 1,
            "itemtype": "method",
            "name": "verbose",
            "class": "gdal"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: typedef",
            "line": " lib/gdal.js:73"
        },
        {
            "message": "unknown tag: typedef",
            "line": " lib/gdal.js:134"
        },
        {
            "message": "unknown tag: typedef",
            "line": " lib/gdal.js:146"
        },
        {
            "message": "Missing item type\nA simple key/value structure",
            "line": " lib/gdal.js:129"
        },
        {
            "message": "Missing item type",
            "line": " src/collections/linestring_points.cpp:9"
        },
        {
            "message": "Missing item type",
            "line": " src/collections/rasterband_pixels.cpp:167"
        },
        {
            "message": "Missing item type",
            "line": " src/collections/rasterband_pixels.cpp:304"
        },
        {
            "message": "Missing item type",
            "line": " src/gdal_algorithms.cpp:18"
        },
        {
            "message": "Missing item type",
            "line": " src/gdal_algorithms.cpp:87"
        },
        {
            "message": "Missing item type",
            "line": " src/gdal_algorithms.cpp:221"
        },
        {
            "message": "Missing item type",
            "line": " src/gdal_algorithms.cpp:376"
        },
        {
            "message": "Missing item type\nGDALReprojectImage() method with a ChunkAndWarpImage replaced with\nChunkAndWarpMulti",
            "line": " src/gdal_warper.cpp:14"
        },
        {
            "message": "Missing item type",
            "line": " src/gdal_warper.cpp:165"
        },
        {
            "message": "Missing item type",
            "line": " src/gdal_warper.cpp:323"
        }
    ]
}